<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>非同步處理 Axios</title>
    <url>/2021/03/05/axios-api/</url>
    <content><![CDATA[<h1 id="使用-Axios-取得-API"><a href="#使用-Axios-取得-API" class="headerlink" title="使用 Axios 取得 API"></a>使用 Axios 取得 API</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; onMounted &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 在DOM元素渲染完成後執行</span></span><br><span class="line">      axios</span><br><span class="line">        .get(<span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="Axios-渲染資料"><a href="#Axios-渲染資料" class="headerlink" title="Axios 渲染資料"></a>Axios 渲染資料</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;img</span><br><span class="line">      v-for=&quot;(item, i) in imgArray.arr&quot;</span><br><span class="line">      :key=&quot;item.url&quot;</span><br><span class="line">      v-show=&quot;ImgIdx === i&quot;</span><br><span class="line">      class=&quot;img&quot;</span><br><span class="line">      :src=&quot;item.url&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btnbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;ImgIdxRemove&quot;</span>&gt;</span>上一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;ImgIdxAdd&quot;</span>&gt;</span>下一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; onMounted, reactive, ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> imgArray = reactive(&#123; <span class="attr">arr</span>: [] &#125;); <span class="comment">// 將取得的資料放進陣列</span></span><br><span class="line">    <span class="keyword">const</span> ImgIdx = ref(<span class="number">0</span>); <span class="comment">// 圖片索引</span></span><br><span class="line">    <span class="keyword">const</span> ImgIdxAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ImgIdx.value++;</span><br><span class="line">      <span class="keyword">if</span> (ImgIdx.value &gt; imgArray.arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">        ImgIdx.value = <span class="number">0</span>; <span class="comment">// 大於總數量時返回第一張</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> ImgIdxRemove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ImgIdx.value--;</span><br><span class="line">      <span class="keyword">if</span> (ImgIdx.value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ImgIdx.value = imgArray.arr.length - <span class="number">1</span>; <span class="comment">//小於0時返回最後一張</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      axios</span><br><span class="line">        .get(<span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          imgArray.arr = res.data;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; imgArray, ImgIdx, ImgIdxAdd, ImgIdxRemove &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="加入-loading-效果"><a href="#加入-loading-效果" class="headerlink" title="加入 loading 效果"></a>加入 loading 效果</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isLoad&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;img</span><br><span class="line">      v-for=&quot;(item, i) in imgArray.arr&quot;</span><br><span class="line">      :key=&quot;item.url&quot;</span><br><span class="line">      v-show=&quot;ImgIdx === i&quot;</span><br><span class="line">      class=&quot;img&quot;</span><br><span class="line">      :src=&quot;item.url&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btnbox&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isLoad&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;ImgIdxRemove&quot;</span>&gt;</span>上一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;ImgIdxAdd&quot;</span>&gt;</span>下一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;!isLoad&quot;</span> <span class="attr">class</span>=<span class="string">&quot;load&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./images/load.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> imgArray = reactive(&#123; <span class="attr">arr</span>: [] &#125;); <span class="comment">// 將取得的資料放進陣列</span></span><br><span class="line"><span class="keyword">const</span> ImgIdx = ref(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> isLoad = ref(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> ImgIdxAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ImgIdx.value++;</span><br><span class="line">  <span class="keyword">if</span> (ImgIdx.value &gt; imgArray.arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">    ImgIdx.value = <span class="number">0</span>; <span class="comment">// 大於總數量時返回第一張</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> ImgIdxRemove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ImgIdx.value--;</span><br><span class="line">  <span class="keyword">if</span> (ImgIdx.value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    ImgIdx.value = imgArray.arr.length - <span class="number">1</span>; <span class="comment">//小於0時返回最後一張</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handImgLoad = <span class="function">(<span class="params">imgArr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>; <span class="comment">// 透過i記錄loading跑完沒</span></span><br><span class="line">  imgArr.forEach(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newImage = <span class="keyword">new</span> Image(); <span class="comment">// 建立Image實體</span></span><br><span class="line">    newImage.src = image.url; <span class="comment">// 透過src去觸發onload事件</span></span><br><span class="line">    newImage.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      i++;</span><br><span class="line">      <span class="keyword">if</span> (imgArr.length === i) &#123;</span><br><span class="line">        <span class="comment">//圖片跑完後執行</span></span><br><span class="line">        imgArray.arr = imgArr;</span><br><span class="line">        isLoad.value = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  axios.get(<span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    handImgLoad(res.data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> &#123; imgArray, ImgIdx, isLoad, ImgIdxAdd, ImgIdxRemove &#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Solved-defineProps is a compiler macro and no longer needs to be imported.</title>
    <url>/2022/04/27/bug-defineProps/</url>
    <content><![CDATA[<p><img src="https://imgur.com/u3IhKJS.jpg" alt="defineProps error"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineProps, defineEmits &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> props = defineProps(&#123;</span><br><span class="line">  foo: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在 Vue3 編譯時出現這個警告<br>[@vue/compiler-sfc] defineProps is a compiler macro and no longer needs to be imported.<br>[@vue/compiler-sfc] defineEmits is a compiler macro and no longer needs to be imported.</p>
<a id="more"></a>
<br/>
<br/>

<h1 id="解譯bug"><a href="#解譯bug" class="headerlink" title="解譯bug"></a>解譯bug</h1><p>⚠️ <strong>@vue/compiler-sfc</strong><br>Vue 單文件組件(SFC) 編譯警告</p>
<p>⚠️<strong>defineProps is a compiler macro and no longer needs to be imported.</strong><br>defineProps 是一個編譯器巨集，不再需要導入。</p>
<p>⚠️<strong>defineEmits is a compiler macro and no longer needs to be imported.</strong><br>defineEmits 是一個編譯器巨集，不再需要導入。<br><br/><br><br/></p>
<h1 id="錯誤原因"><a href="#錯誤原因" class="headerlink" title="錯誤原因"></a>錯誤原因</h1><p>defineProps和 defineEmits 都是只在 <code>&lt;script setup&gt;</code> 中才能使用的編譯器巨集。<br>他們不需要導入且會隨著 <code>&lt;script setup&gt;</code> 處理過程一同被編譯掉<br><br/><br><br/></p>
<h1 id="如何解決"><a href="#如何解決" class="headerlink" title="如何解決"></a>如何解決</h1><p>將 import 的 <code>defineProps</code>、<code>defineEmits</code> 移除即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// import &#123; defineProps, defineEmits &#125; from &#x27;vue&#x27;; // 刪除這行</span></span><br><span class="line"><span class="keyword">const</span> props = defineProps(&#123;</span><br><span class="line">  foo: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><a href="https://v3.cn.vuejs.org/api/sfc-script-setup.html">官方文件</a></p>
<hr>
<p>如果這篇文章對你有幫助，請幫小編按個讚👍～你的鼓勵是我分享的動力😊</p>
]]></content>
      <categories>
        <category>Bug記錄</category>
      </categories>
      <tags>
        <tag>defineProps</tag>
        <tag>defineEmits</tag>
      </tags>
  </entry>
  <entry>
    <title>Solved-Not found &#39;xx&#39; key in &#39;zh_TW&#39; locale messages.</title>
    <url>/2023/12/29/bug-i18n-locale/</url>
    <content><![CDATA[<p><img src="https://imgur.com/EX0HqH7.jpg" alt="defineProps error"></p>
<p>在製作 Vue-i18n 多國語系專案時，有一部分的文字本來是吃本地端的語系檔，而需求改為吃線上的語系檔，但改完後出現了下面的警告<br>[intlify] Not found ‘xx’ key in ‘zh_TW’ locale messages.<br>[intlify] Fall back to translate ‘xx’ key with ‘en’ locale.</p>
<a id="more"></a>
<br/>
<br/>

<h1 id="解譯bug"><a href="#解譯bug" class="headerlink" title="解譯bug"></a>解譯bug</h1><p>⚠️ <strong>[intlify] Not found ‘xx’ key in ‘zh_TW’ locale messages.</strong><br>在 i18n 語系 ‘zh_TW’ 檔案中找不到訊息</p>
<p>⚠️ <strong>[intlify] Fall back to translate ‘xx’ key with ‘en’ locale.</strong><br>在 i18n 語系 ‘en’ 檔案中找不到訊息</p>
<br/>
<br/>

<h1 id="錯誤原因"><a href="#錯誤原因" class="headerlink" title="錯誤原因"></a>錯誤原因</h1><p>一開始會根據目前地區 zh_TW 的語言包去找符合的訊息，<br>因我在 i18n 設定了 fallbackLocale，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fallbackLocale: &#39;en&#39;</span><br></pre></td></tr></table></figure>
<p>所以當在 zh_TW 語言包找不到檔案中的文字，就會到 en 語言包去找</p>
<p>因為需求都改為吃線上的語言包，所以 $t 就可以拿掉了，沒拿掉就會一直無限去抓本地的語言包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; $t( data.gamename ) &#125;&#125;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h1 id="如何解決"><a href="#如何解決" class="headerlink" title="如何解決"></a>如何解決</h1><p>將 $t 拿掉就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; data.gamename &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Bug記錄</category>
      </categories>
      <tags>
        <tag>i18n</tag>
        <tag>Not found &#39;xx&#39; key in &#39;zh_TW&#39; locale messages.</tag>
        <tag>Fall back to translate &#39;xx&#39; key with &#39;en&#39; locale.</tag>
      </tags>
  </entry>
  <entry>
    <title>Solved-Permission to .git denied to github-actions[bot].</title>
    <url>/2024/02/07/bug-github-actions-permission/</url>
    <content><![CDATA[<p>今天在 Github Actions 部署專案時，遇到了錯誤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Permission to [Repository].git denied to github-actions[bot].</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<br/>
<br/>

<h1 id="解譯bug"><a href="#解譯bug" class="headerlink" title="解譯bug"></a>解譯bug</h1><p>⚠️ <strong>Permission to [Repository].git denied to github-actions[bot].</strong></p>
<p>github-actions 拒絕此 Repository 的權限</p>
<br/>
<br/>

<h1 id="錯誤原因"><a href="#錯誤原因" class="headerlink" title="錯誤原因"></a>錯誤原因</h1><p>Repository 沒有設定寫入的權限，因此無法部署</p>
<br/>
<br/>

<h1 id="如何解決"><a href="#如何解決" class="headerlink" title="如何解決"></a>如何解決</h1><p>到 Repository Settings 設定寫入權限<br><code>Settings</code> =&gt; 左側欄 Actions 選取 <code>General</code> =&gt; Workflow permissions 選取 <code>Read and write permissions</code> =&gt; <code>Save</code></p>
<p><img src="https://imgur.com/W43SA7p.jpg" alt="defineProps error"></p>
<p>開啟讀寫權限後，就可以順利部署上去啦~🎉🎉🎉</p>
]]></content>
      <tags>
        <tag>Permission to .git denied to github-actions[bot]</tag>
      </tags>
  </entry>
  <entry>
    <title>Solved-React Material UI Modal fixed move-解決fixed元素移動</title>
    <url>/2024/03/04/bug-material-ui-modal-fixed/</url>
    <content><![CDATA[<p><img src="https://imgur.com/K9WF3j2.jpg" alt="React Material UI Modal"></p>
<p>版本 @material-ui/core v5</p>
<p>在使用 React Material UI 時，版面上有設定了一個 fixed 的元素，但在打開 Modal 後，元素會跟著移動，畫面的移動讓使用者體驗不好</p>
<a id="more"></a>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useStyles = makeStyles(<span class="function">(<span class="params">theme</span>) =&gt;</span> (&#123;</span><br><span class="line">  fixedFilter: &#123;</span><br><span class="line">    position: <span class="string">&#x27;fixed&#x27;</span>,</span><br><span class="line">    top: <span class="number">42</span>,</span><br><span class="line">    left: <span class="number">0</span>,</span><br><span class="line">    paddingRight: <span class="string">&#x27;50px&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> classes = useStyles();</span><br><span class="line"></span><br><span class="line">  &lt;Box className=&#123;classes.fixedFilter&#125;&gt;</span><br><span class="line">    <span class="comment">// 省略程式碼</span></span><br><span class="line">  &lt;/Box&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h1 id="錯誤原因"><a href="#錯誤原因" class="headerlink" title="# 錯誤原因"></a># 錯誤原因</h1><p>一旦打開模態框，滾動就會被阻止，Material UI 自動在 body 的地方會自動加上 <code>padding-right: 17px;</code>，讓畫面不隨著卷軸隱藏而移動<br><img src="https://imgur.com/fvBwLuq.jpg" alt="React Material UI Modal"><br><br/></p>
<p>但 fixed 定位的元素沒辦法吃到此設定，因此會隨著卷軸隱藏而往右移動<br><br/><br><br/></p>
<h1 id="如何解決"><a href="#如何解決" class="headerlink" title="# 如何解決"></a># 如何解決</h1><p>兩種方法可以避免這個問題</p>
<h2 id="1-Dialog-設定-disableScrollLock"><a href="#1-Dialog-設定-disableScrollLock" class="headerlink" title="1. Dialog 設定 disableScrollLock"></a>1. Dialog 設定 disableScrollLock</h2><p>為了不讓 fixed 元素移動，我們不隱藏 Modal 的卷軸</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Dialog</span><br><span class="line">  disableScrollLock</span><br><span class="line">&gt;</span><br><span class="line">  <span class="comment">// 省略程式碼</span></span><br><span class="line">&lt;/Dialog&gt;</span><br></pre></td></tr></table></figure>
<p>在 Dialog 設定 disableScrollLock 之後，就不會隱藏卷軸，fixed 元素也就不會隨著移動了<br><br/><br><br/></p>
<h2 id="2-fixed-元素加入類別-mui-fixed"><a href="#2-fixed-元素加入類別-mui-fixed" class="headerlink" title="2. fixed 元素加入類別 .mui-fixed"></a>2. fixed 元素加入類別 <code>.mui-fixed</code></h2><p>希望卷軸還是可以隱藏，防止與背景互動，也可以在 fixed 元素加上全域的類別 <code>.mui-fixed</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Box className=&#123;<span class="string">`<span class="subst">$&#123;classes.fixedFilter&#125;</span> mui-fixed`</span>&#125;&gt;</span><br><span class="line">  <span class="comment">// 省略程式碼</span></span><br><span class="line">&lt;/Box&gt;</span><br></pre></td></tr></table></figure>
<p>可以發現 Material UI 自動在 fixed 元素上，幫我們再加上了 17px，變成 <code>padding-right: 67px;</code> (原本已有 50px)<br><img src="https://imgur.com/9tjZcBW.jpg" alt="React Material UI Modal"></p>
<p>如此一來就大功告成囉！🎉🎉🎉<br><br/><br><br/></p>
<h1 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h1><p><a href="https://mui.com/material-ui/getting-started/faq/#why-do-the-fixed-positioned-elements-move-when-a-modal-is-opened">Material UI - Why do the fixed positioned elements move when a modal is opened?</a></p>
]]></content>
      <categories>
        <category>Bug記錄</category>
      </categories>
      <tags>
        <tag>React Material UI Modal</tag>
        <tag>React Material UI Modal fixed move</tag>
        <tag>Material UI Modal padding</tag>
      </tags>
  </entry>
  <entry>
    <title>Solved-&#39;%E2%80%8E&#39;API出現多餘字串-Zero Width Space</title>
    <url>/2023/02/08/bug-zero-width-space/</url>
    <content><![CDATA[<p>今天在串接 API 時，遇到了 %E2%80%8E 的問題，</p>
<p><img src="https://imgur.com/2fMc3Na.jpg" alt="api"></p>
<a id="more"></a>

<p>明明 url 是 “/v1/Authorized/Login”，但開啟 Network 一看，<br>url 變成了 “/v1%E2%80%8E/Authorized/Login”！</p>
<p>因此始終會是返回 404</p>
<!--more-->
<br/>
<br/>

<h1 id="錯誤原因"><a href="#錯誤原因" class="headerlink" title="錯誤原因"></a>錯誤原因</h1><p>%E2%80%8E 的學術名詞叫 Zero Width Space(零寬空格)，顧名思義，它是一個 Unicode 字符，卻肉眼不可見，<br>判斷可能出現的原因是因為直接從 swagger 複製 API<br><br/><br><br/></p>
<h1 id="如何解決"><a href="#如何解決" class="headerlink" title="如何解決"></a>如何解決</h1><ol>
<li>刪除複製的 url，手動重新輸入一遍</li>
<li>在請求攔截器裡對 url 進行字符過濾</li>
</ol>
<p>axios interceptors</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">request.interceptors.request.use(</span><br><span class="line">  (config) =&gt; &#123;</span><br><span class="line">    config.url = <span class="built_in">decodeURI</span>(<span class="built_in">encodeURI</span>(config.url).replace(<span class="regexp">/%E2%80%8B/g</span>,<span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>除了 %E2%80%8E 另外還有很多像這種的 <a href="https://utf8-chartable.de/unicode-utf8-table.pl?start=8192&number=128&utf8=string-literal">unicode 字符</a>，以後再遇到就會知道了🧐</p>
]]></content>
      <categories>
        <category>Bug記錄</category>
      </categories>
      <tags>
        <tag>%E2%80%8E</tag>
        <tag>Zero-Width Space</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Component 組件基本介紹</title>
    <url>/2021/03/10/components-base/</url>
    <content><![CDATA[<h1 id="組件基本介紹"><a href="#組件基本介紹" class="headerlink" title="組件基本介紹"></a>組件基本介紹</h1><p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App).use(router).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>main.js 為網站主程式的進入點，Vue 的初始化操作都在此設定<br>只要有使用到擴充功能，都要用<code>.use</code> 串接到主程式</p>
<hr>
<h1 id="拆分組件"><a href="#拆分組件" class="headerlink" title="拆分組件"></a>拆分組件</h1><p>App.vue<br>JS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;@/components/Header.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">&quot;@/components/Footer.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>template</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft JhengHei&quot;</span>, <span class="string">&quot;Heiti TC&quot;</span>, <span class="string">&quot;sans-serif&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@是給 VueJs 使用的，代表 src 資料夾，CSS 使用時須在前面加上波浪符<code>~@</code>，使用@取代../路徑，避免 bundle 的時候出錯</p>
<p>Header.vue<br>改寫成 SCSS 時須加上 <code>lang=&quot;scss&quot;</code>，並將 RWD @media 放進自己的 class<br><code>scoped</code> 只限制此檔案元素的 style</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: greenyellow;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#373c3f</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">97px</span>;</span><br><span class="line">  @media screen and (max-width: 640px) &#123;</span><br><span class="line">    <span class="selector-tag">transition</span>: <span class="selector-tag">height</span> 0.2<span class="selector-tag">s</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 37<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1024px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    @media screen and (max-width: 1044px) &#123;</span><br><span class="line">      <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">640px</span>) &#123;</span><br><span class="line">      <span class="selector-tag">width</span>: 100%;</span><br><span class="line">      <span class="selector-tag">height</span>: 232<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/<span class="selector-tag">style</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="注入全域的-CSS"><a href="#注入全域的-CSS" class="headerlink" title="注入全域的 CSS"></a>注入全域的 CSS</h3><p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/assets/css/reset.css&quot;</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>Vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>Solved-swiper.slideTo is not a function</title>
    <url>/2024/01/24/bug-swiper-slideTo/</url>
    <content><![CDATA[<p><img src="https://imgur.com/1PR3WVk.jpg" alt="swiper"></p>
<p>在製作 Swiper 輪播時，我希望 mouseenter 到 thumb 時，就會指定到該 slide<br>但卻出現了以下錯誤：<br>Uncaught TypeError: imagesSwiper.value.slideTo is not a function<br>*版本 vue: ^3.3.4 / swiper: ^11.0.3</p>
<a id="more"></a>
<br/>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; Swiper, SwiperSlide &#125; <span class="keyword">from</span> <span class="string">&quot;swiper/vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Navigation, Autoplay, Thumbs, EffectCoverflow &#125; <span class="keyword">from</span> <span class="string">&quot;swiper/modules&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;swiper/css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;swiper/css/thumbs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modules = [Navigation, Autoplay, Thumbs, EffectCoverflow];</span><br><span class="line"><span class="keyword">const</span> data = reactive(&#123;</span><br><span class="line">  data: [</span><br><span class="line">    &#123;</span><br><span class="line">      image: Image1,</span><br><span class="line">      title: <span class="string">&quot;data1&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      image: Image2,</span><br><span class="line">      title: <span class="string">&quot;data2&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      image: Image3,</span><br><span class="line">      title: <span class="string">&quot;data3&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thumbsSwiper = ref(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> imagesSwiper = ref(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setThumbsSwiper = <span class="function">(<span class="params">swiper</span>) =&gt;</span> &#123;</span><br><span class="line">  thumbsSwiper.value = swiper;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setImageSwiper = <span class="function">(<span class="params">swiper</span>) =&gt;</span> &#123;</span><br><span class="line">  imagesSwiper.value = swiper;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeSlide = <span class="function">(<span class="params">idx</span>) =&gt;</span> &#123;</span><br><span class="line">  imagesSwiper.value.slideTo(idx);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;swiper</span><br><span class="line">    :modules=<span class="string">&quot;modules&quot;</span></span><br><span class="line">    :slides-per-view=<span class="string">&quot;3&quot;</span></span><br><span class="line">    :direction=<span class="string">&quot;&#x27;vertical&#x27;&quot;</span></span><br><span class="line">    :spaceBetween=<span class="string">&quot;40&quot;</span></span><br><span class="line">    watch-slides-progress</span><br><span class="line">    @swiper=<span class="string">&quot;setThumbsSwiper&quot;</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;swiper-slide</span><br><span class="line">      v-<span class="keyword">for</span>=<span class="string">&quot;(item, idx) in data.data&quot;</span></span><br><span class="line">      :key=<span class="string">&quot;item.title&quot;</span></span><br><span class="line">      @mouseenter=<span class="string">&quot;changeSlide(idx)&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;&#123; item.title &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/swiper-slide&gt;</span><br><span class="line">  &lt;/swiper&gt;</span><br><span class="line"></span><br><span class="line">  &lt;swiper</span><br><span class="line">    :modules=<span class="string">&quot;modules&quot;</span></span><br><span class="line">    :effect=<span class="string">&quot;&#x27;coverflow&#x27;&quot;</span></span><br><span class="line">    :direction=<span class="string">&quot;&#x27;vertical&#x27;&quot;</span></span><br><span class="line">    :speed=<span class="string">&quot;1000&quot;</span></span><br><span class="line">    :coverflow-effect=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">      rotate: 0,</span></span><br><span class="line"><span class="string">      stretch: -300, // 每個slide之間拉伸值（負值遠離）</span></span><br><span class="line"><span class="string">      depth: 300, // 值越大圖片越往後退</span></span><br><span class="line"><span class="string">      modifier: 1,</span></span><br><span class="line"><span class="string">      slideShadows: false,</span></span><br><span class="line"><span class="string">    &#125;&quot;</span></span><br><span class="line">    :thumbs=<span class="string">&quot;&#123; swiper: thumbsSwiper &#125;&quot;</span></span><br><span class="line">    @swiper=<span class="string">&quot;setImageSwiper&quot;</span></span><br><span class="line">    ref=<span class="string">&quot;imagesSwiper&quot;</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;swiper-slide v-<span class="keyword">for</span>=<span class="string">&quot;item in data.data&quot;</span> :key=<span class="string">&quot;item.title&quot;</span>&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;img :src=<span class="string">&quot;item.image&quot;</span>/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/swiper-slide&gt;</span><br><span class="line">  &lt;/swiper&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h1 id="解譯bug"><a href="#解譯bug" class="headerlink" title="解譯bug"></a>解譯bug</h1><p><strong>Uncaught TypeError: imagesSwiper.value.slideTo is not a function</strong><br>在 imagesSwiper.value 找不到 slideTo 的 function</p>
<br/>
<br/>

<h1 id="錯誤原因"><a href="#錯誤原因" class="headerlink" title="錯誤原因"></a>錯誤原因</h1><p>用了 ref 想綁定 imagesSwiper，但這抓到的是整個 swiper 的 HTML 區塊，所以不會有 slideTo 的 function<br>應使用 @swiper=”setImageSwiper” 來綁定 swiper 實體才能使用 slideTo function</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> setImageSwiper = <span class="function">(<span class="params">swiper</span>) =&gt;</span> &#123;</span><br><span class="line">  imagesSwiper.value = swiper;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h1 id="如何解決"><a href="#如何解決" class="headerlink" title="如何解決"></a>如何解決</h1><p>因為本來就已經有設定 @swiper=”setImageSwiper”，把 ref=”imagesSwiper” 拿掉就可以抓到 swiper 了</p>
]]></content>
      <categories>
        <category>Bug記錄</category>
      </categories>
      <tags>
        <tag>swiper.slideTo is not a function</tag>
        <tag>swiper mouseenter</tag>
        <tag>swiper slideTo not working</tag>
      </tags>
  </entry>
  <entry>
    <title>組件資料傳遞 emit-子層傳參數到父層</title>
    <url>/2021/03/14/components-emit/</url>
    <content><![CDATA[<h1 id="組件資料傳遞-emit-子傳父"><a href="#組件資料傳遞-emit-子傳父" class="headerlink" title="組件資料傳遞 emit (子傳父)"></a>組件資料傳遞 emit (子傳父)</h1><p>使用 emit 往上傳遞資料</p>
<a id="more"></a>

<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EmitTest <span class="keyword">from</span> <span class="string">&quot;@/components/EmitTest.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    EmitTest,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clickFn = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      clickFn,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EmitTest</span> @<span class="attr">callBack</span>=<span class="string">&quot;clickFn&quot;</span> /&gt;</span> // @在emit定義的變數=&quot;父層Fn&quot;</span><br></pre></td></tr></table></figure>
<p>EmitTest.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">0</span>);</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      context.emit(<span class="string">&quot;callBack&quot;</span>, num); <span class="comment">// emit(自定義變數, 要使用的參數)</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>setup 接收兩個參數，前面為 props，第二個 context<br>使用 emit 也可以直接解構出來</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props, &#123;emit&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">0</span>);</span><br><span class="line">    onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      emit(<span class="string">&quot;callBack&quot;</span>, num);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="emits-的使用"><a href="#emits-的使用" class="headerlink" title="emits 的使用"></a>emits 的使用</h1><p>聲明有使用到的 emit，可以寫成 Array<br>emit 也可以寫成 object 來做驗證的動作<br>如驗證未通過，console 會跳出 warning 的提示來告訴開發者</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  emits: &#123;</span><br><span class="line">    callBack: <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> num.value === <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; emit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">1</span>);</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      emit(<span class="string">&quot;callBack&quot;</span>, num);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="計數器範例"><a href="#計數器範例" class="headerlink" title="計數器範例"></a>計數器範例</h1><p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EmitTest <span class="keyword">from</span> <span class="string">&quot;@/components/EmitTest.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    EmitTest,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handTimeOut = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;time is over&quot;</span>, num.value);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      handTimeOut,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EmitTest</span> @<span class="attr">TimeOut</span>=<span class="string">&quot;handTimeOut&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>EmitTest.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  emits: &#123;</span><br><span class="line">    TimeOut: <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (num.value === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; emit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        num.value--;</span><br><span class="line">        <span class="keyword">if</span> (num.value === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">          emit(<span class="string">&quot;TimeOut&quot;</span>, num);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>emit</tag>
      </tags>
  </entry>
  <entry>
    <title>組件資料傳遞 Props-父層傳參數到子層</title>
    <url>/2021/03/11/components-props/</url>
    <content><![CDATA[<h1 id="組件資料傳遞-Props-父傳子"><a href="#組件資料傳遞-Props-父傳子" class="headerlink" title="組件資料傳遞 Props (父傳子)"></a>組件資料傳遞 Props (父傳子)</h1><p>上層的 data 透過 props 往下傳，不會往上傳回 data，所以下層的資料改變不會影響到上層(data)</p>
<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PropsTest <span class="keyword">from</span> <span class="string">&quot;@/components/PropsTest.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    PropsTest,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = ref(<span class="string">&quot;hello Vue!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; data &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropsTest</span> <span class="attr">:msg</span>=<span class="string">&quot;data&quot;</span> /&gt;</span> // :子層屬性=&quot;父層 data&quot;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>PropsTest.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">&quot;msg&quot;</span>],</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; props &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;props.msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Props-型態"><a href="#Props-型態" class="headerlink" title="Props 型態"></a>Props 型態</h1><p>props 雖可以為陣列，但建議使用<code>物件</code>表示，物件可以定義型別，還能設定<code>預設值</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  msg: <span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Or</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  msg: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">&#x27;HI&#x27;</span> <span class="comment">// 如上層未設定msg值，會顯示HI</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Props-定義各個型別的預設值"><a href="#Props-定義各個型別的預設值" class="headerlink" title="Props 定義各個型別的預設值"></a>Props 定義各個型別的預設值</h1><p>父層</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PropsTest <span class="keyword">from</span> <span class="string">&quot;@/components/PropsTest.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    PropsTest,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> string = ref(<span class="string">&quot;string&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> boolean = ref(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> array = reactive([]);</span><br><span class="line">    <span class="keyword">const</span> obj = reactive(&#123;&#125;);</span><br><span class="line">    <span class="keyword">const</span> clickFn = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; string, boolean, num, array, obj, clickFn &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;PropsTest</span><br><span class="line">  :string=&quot;string&quot;</span><br><span class="line">  :boolean=&quot;boolean&quot;</span><br><span class="line">  :num=&quot;num&quot;</span><br><span class="line">  :array=&quot;array&quot;</span><br><span class="line">  :obj=&quot;obj&quot;</span><br><span class="line">  :clickFn=&quot;clickFn&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<br>
子層

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    string: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    boolean: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    num: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    array: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        [];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    obj: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">      <span class="comment">// 等於</span></span><br><span class="line">      <span class="comment">// default: ()=&gt;&#123;</span></span><br><span class="line">      <span class="comment">//   return &#123;&#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    clickFn: &#123;</span><br><span class="line">      type: <span class="built_in">Function</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; props &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>props</tag>
      </tags>
  </entry>
  <entry>
    <title>C槽空間不足，容量爆滿，清理windows更新造成的多餘檔案</title>
    <url>/2022/07/19/computer-space-full/</url>
    <content><![CDATA[<p><img src="https://imgur.com/GpolNsn.jpg" alt="windows"></p>
<p>作業系統：win10<br>在 windows 系統自動更新後，突然 C 槽就爆滿了，因為更新後的系統會產生一些多餘的檔案，有些是沒有用的廢棄檔案，不去清理只會越積越多，<strong>系統碟太滿就會導致電腦變慢</strong>，以下查到了兩個方法可以清理磁碟，整整幫我清出了 10G 可用空間呢！😍</p>
<a id="more"></a>

<h1 id="磁碟清理"><a href="#磁碟清理" class="headerlink" title="磁碟清理"></a>磁碟清理</h1><p>最簡單的方法是直接清理磁碟<br>對著本機磁碟按右鍵 → <strong>內容</strong><br><br/></p>
<p><img src="https://imgur.com/wcthMA2.jpg" alt="磁碟清理1"><br><br/></p>
<p>點擊 <strong>清理磁碟</strong> 後會開始計算可以釋放多少空間<br><img src="https://imgur.com/A7hwFR5.jpg" alt="磁碟清理2"><br><img src="https://imgur.com/RRwNXwz.jpg" alt="磁碟清理3"><br><br/></p>
<p>再點擊 <strong>確定</strong>，等清理完就大功告成了!<br><img src="https://imgur.com/itajEP2.jpg" alt="磁碟清理4"><br><br/><br/><br/></p>
<h1 id="釋放儲存空間"><a href="#釋放儲存空間" class="headerlink" title="釋放儲存空間"></a>釋放儲存空間</h1><p>如果 磁碟清理 後，還是覺得空間不夠，可以再設定釋放儲存空間<br>選擇設定 → 系統 → 儲存空間<br>系統會列出所擁有的磁碟裡裝的各種軟體、暫存，把不必要的檔案刪除，磁碟空間就多出來了</p>
<p>儲存空間感知器能自動去除不需要的檔案來釋出空間，例如暫存檔案和資源回收筒中的內容<br><img src="https://imgur.com/hcqwnai.jpg" alt="釋放儲存空間1"><br><br/></p>
<p>點擊 <strong>設定或立即執行儲存空間感知器</strong><br><img src="https://imgur.com/ptTZoJr.jpg" alt="釋放儲存空間2"><br><br/></p>
<p>點擊 <strong>立即清除</strong><br><img src="https://imgur.com/s7oF1iW.jpg" alt="釋放儲存空間3"><br><br/></p>
<p>點擊 <strong>應用程式與功能</strong> 後，可以卸載不必要的軟體<br><img src="https://imgur.com/1g2EKuh.jpg" alt="釋放儲存空間4"><br><br/></p>
<p>點擊 <strong>暫存檔案</strong><br><img src="https://imgur.com/Sjck0La.jpg" alt="釋放儲存空間5"><br><br/></p>
<p>點擊 <strong>移除檔案</strong>，可以移除很多不必要的檔案<br><img src="https://imgur.com/WDwJAuC.jpg" alt="釋放儲存空間6"></p>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="8536485431"></ins></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>清理完看起來舒服很多🤩，如果你磁碟爆滿也可以試試看是否有用唷！如果對你有幫助，希望也可以給我一點鼓勵😊</p>
]]></content>
      <categories>
        <category>電腦相關問題</category>
      </categories>
      <tags>
        <tag>C槽空間不足</tag>
        <tag>C槽爆滿</tag>
        <tag>C槽清理</tag>
        <tag>C槽容量不足</tag>
        <tag>c槽突然爆滿</tag>
      </tags>
  </entry>
  <entry>
    <title>用 CSS 打造酷炫的變形蟲效果-CSS教學</title>
    <url>/2024/07/11/css-effect-radius/</url>
    <content><![CDATA[<p><img src="https://imgur.com/yPw1nuZ.gif" alt="CSS"></p>
<p>在做專案時，設計稿上有個圓形，設計師希望呈現出不規則橢圓的動畫效果，我把它稱之為變形蟲效果😆<br>就像上圖所呈現的，動畫效果持續為不規則橢圓，並且會漸漸的變色</p>
<p>如何做到的呢？這其實不難～跟著我一起往下做吧！</p>
<a id="more"></a>
<br/>
<br/>

<h1 id="1-畫出基本圓形"><a href="#1-畫出基本圓形" class="headerlink" title="1. 畫出基本圓形"></a>1. 畫出基本圓形</h1><p>首先先在畫布畫出一個圓形，並給了一個黃到綠的漸層顏色</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, #ffe400 <span class="number">22%</span>, #<span class="number">00</span>ac97 <span class="number">72%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h1 id="2-設定橢圓動畫效果"><a href="#2-設定橢圓動畫效果" class="headerlink" title="2. 設定橢圓動畫效果"></a>2. 設定橢圓動畫效果</h1><p>利用 <code>@keyframes</code> 設定橢圓效果，並在 <code>animation</code> 使用，<code>alternate</code> 會正反轉輪流播放</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, #ffe400 <span class="number">22%</span>, #<span class="number">00</span>ac97 <span class="number">72%</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: change-radius <span class="number">10s</span> ease-in-out infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> change-radius &#123;</span><br><span class="line">  0%, 100% &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">68%</span> <span class="number">55%</span> <span class="number">80%</span> <span class="number">50%</span> / <span class="number">68%</span> <span class="number">60%</span> <span class="number">70%</span> <span class="number">55%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">37%</span> <span class="number">63%</span> <span class="number">51%</span> <span class="number">49%</span> / <span class="number">37%</span> <span class="number">65%</span> <span class="number">35%</span> <span class="number">63%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  40% &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">36%</span> <span class="number">64%</span> <span class="number">64%</span> <span class="number">36%</span> / <span class="number">64%</span> <span class="number">48%</span> <span class="number">52%</span> <span class="number">36%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  60% &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">37%</span> <span class="number">63%</span> <span class="number">51%</span> <span class="number">49%</span> / <span class="number">30%</span> <span class="number">30%</span> <span class="number">70%</span> <span class="number">70%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">40%</span> <span class="number">60%</span> <span class="number">42%</span> <span class="number">58%</span> / <span class="number">41%</span> <span class="number">51%</span> <span class="number">49%</span> <span class="number">59%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h1 id="3-設定顏色漸變"><a href="#3-設定顏色漸變" class="headerlink" title="3. 設定顏色漸變"></a>3. 設定顏色漸變</h1><p>利用 <code>@keyframes</code> 設定背景色的位置，<code>background-size</code> 調整到 1600%，數值可自行調整<br>如有兩個以上的 <code>animation</code>，使用逗號隔開就可以囉！</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, #ffe400 <span class="number">22%</span>, #<span class="number">00</span>ac97 <span class="number">72%</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">1600%</span> <span class="number">1600%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: change-radius <span class="number">10s</span> ease-in-out infinite alternate,</span><br><span class="line">  change-position <span class="number">20s</span> linear infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> change-radius &#123;</span><br><span class="line">  0%, 100% &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">68%</span> <span class="number">55%</span> <span class="number">80%</span> <span class="number">50%</span> / <span class="number">68%</span> <span class="number">60%</span> <span class="number">70%</span> <span class="number">55%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">37%</span> <span class="number">63%</span> <span class="number">51%</span> <span class="number">49%</span> / <span class="number">37%</span> <span class="number">65%</span> <span class="number">35%</span> <span class="number">63%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  40% &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">36%</span> <span class="number">64%</span> <span class="number">64%</span> <span class="number">36%</span> / <span class="number">64%</span> <span class="number">48%</span> <span class="number">52%</span> <span class="number">36%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  60% &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">37%</span> <span class="number">63%</span> <span class="number">51%</span> <span class="number">49%</span> / <span class="number">30%</span> <span class="number">30%</span> <span class="number">70%</span> <span class="number">70%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">40%</span> <span class="number">60%</span> <span class="number">42%</span> <span class="number">58%</span> / <span class="number">41%</span> <span class="number">51%</span> <span class="number">49%</span> <span class="number">59%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> change-position &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h1 id="完整範例"><a href="#完整範例" class="headerlink" title="完整範例"></a>完整範例</h1><p>這麼一來就大功告成囉！做出來是不是很有趣呢 😊</p>
<p class="codepen" data-height="560" data-default-tab="css,result" data-slug-hash="PorwOpO" data-pen-title="CSS變形蟲" data-user="bobee" style="height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/bobee/pen/PorwOpO">
  CSS變形蟲</a> by Lala (<a href="https://codepen.io/bobee">@bobee</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<br/>
<br/>

<h1 id="Hey！想學習更多前端知識嗎"><a href="#Hey！想學習更多前端知識嗎" class="headerlink" title="Hey！想學習更多前端知識嗎?"></a>Hey！想學習更多前端知識嗎?</h1><p>最近 Lala 開了前端課程 👉<a href="https://www.accupass.com/event/2407061431532017444968">【<strong>實地掌握RWD - 12小時新手實戰班</strong>】</a>👈<br/>無論您是 0 基礎新手，又或是想學 RWD 的初學者，<br>我們將帶你從零開始，深入了解並掌握 RWD 響應式網頁設計的核心技術，快來一起看看吧 😊</p>
<p><a href="https://www.accupass.com/event/2407061431532017444968"><img src="https://imgur.com/NhLHW7H.jpg" alt="RWD"></a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>border-radius</tag>
        <tag>CSS</tag>
        <tag>CSS變形蟲</tag>
      </tags>
  </entry>
  <entry>
    <title>clip-path製作box-shadow陰影無效!?你應該這樣做!</title>
    <url>/2024/04/09/css-clip-path-shadow/</url>
    <content><![CDATA[<p><img src="https://imgur.com/ZL3TwvJ.jpg" alt="clip-path"></p>
<p>在製作專案時，遇到了不規則形狀的 tag，我使用了 clip-path 來達成不規則形狀的效果</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>tag<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tag</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b84900</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">16%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">100%</span>, <span class="number">0%</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/wGMMKPV.jpg" alt="clip-path"><br><br/></p>
<p>非常完美！</p>
<p>接著希望它可以加上一點陰影，所以加上了 box-shadow</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tag</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p>結果會發現並沒有發生任何改變！<br><br/></p>
<p><img src="https://imgur.com/wGMMKPV.jpg" alt="clip-path"><br><br/></p>
<p>發生什麼事了？哪邊弄錯了嗎？<br><br/><br>不！這是因為 box-shadow 被 clip-path 給裁剪了</p>
<p>難道用了 clip-path 就沒辦法加上陰影了嗎？<br><br/><br><br/><br><br/><br>別擔心，還是可以有陰影的，我們只需要調整一下做法！<br><br/><br><br/><br><br/></p>
<h1 id="filter-drop-shadow-取代-box-shadow"><a href="#filter-drop-shadow-取代-box-shadow" class="headerlink" title="filter drop-shadow 取代 box-shadow"></a>filter drop-shadow 取代 box-shadow</h1><p>為了避免陰影被 clip-path 切斷，我們需在 tag 外層多包一層</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span>&gt;</span></span><br><span class="line">    tag</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>

<p>使用 filter drop-shadow，將會沿著形狀創建陰影，如使用 box-shadow 將會是一個矩形，會不符合我們的預期</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tag-box</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
這樣一來就完成囉！
<br/>
<br/>
<p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="QWPrwWK" data-user="bobee" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/bobee/pen/QWPrwWK">
  Untitled</a> by Lala (<a href="https://codepen.io/bobee">@bobee</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>clip-path</tag>
        <tag>box-shadow</tag>
        <tag>drop-shadow</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用CSS控制移動端可視區域？使用lvh, svh, dvh單位優化網站</title>
    <url>/2024/07/17/css-height-unit/</url>
    <content><![CDATA[<p><img src="https://imgur.com/OASo4VI.jpg" alt="CSS"></p>
<p>最近做專案時，設計師希望行動版第一區塊可以滿版呈現，而當下第一個念頭就是用 vh 來做，但實際在手機看時發現，不管是 Chrome 或 Safari 瀏覽器，底下的 UI 工具列都會擋到內容，沒辦法完整呈現 🤔</p>
<a id="more"></a>

<p>就像這樣內容會被瀏覽器底下的地址欄蓋住<br/><br><img src="https://imgur.com/24jhzAt.jpg" width="400"  alt="vh"></p>
<br/>
<br/>

<p>為了解決 vh 單位在某些情況下無法準確反映視口高度的問題，CSS 增加了三種單位的規範</p>
<ul>
<li>小型可視區域 (Small Viewport Units)：svh</li>
<li>大型可視區域 (Large Viewport Units)：lvh</li>
<li>動態可視區域 (Dynamic Viewport Units)：dvh<br/>
<br/>

</li>
</ul>
<p><img src="https://imgur.com/OZoS7W1.jpg" alt="svh、lvh"></p>
<h1 id="svh-小型可視區域"><a href="#svh-小型可視區域" class="headerlink" title="#svh 小型可視區域"></a>#svh 小型可視區域</h1><p>svh 則會計算網址列與工具列，扣掉瀏覽器UI元素後的安全可視區域高度百分比。<br>例如：在具有 1080 像素高度的顯示器上，如果地址欄佔用 100 像素，則 svh 的值為 980 像素。<br><br/></p>
<h1 id="lvh-大型可視區域"><a href="#lvh-大型可視區域" class="headerlink" title="#lvh 大型可視區域"></a>#lvh 大型可視區域</h1><p>lvh 不會計算網址列與工具列，即為螢幕解析度高度百分比。<br>例如：在具有 1080 像素高度的顯示器上，lvh 的值為 1080 像素。<br><br/><br><br/></p>
<p><img src="https://imgur.com/FudPx9j.jpg" alt="dvh"></p>
<h1 id="dvh-動態可視區域"><a href="#dvh-動態可視區域" class="headerlink" title="#dvh 動態可視區域"></a>#dvh 動態可視區域</h1><p>dvh 會根據瀏覽器視窗尺寸的變化來調整高度，反映當前可視區域的百分比，這包括了可能隨時出現或隱藏的 UI 元素。<br>例如：在具有 1080 像素高度的顯示器上，如果瀏覽器的地址欄和工具欄佔用 100 像素且虛擬鍵盤佔用 200 像素時，dvh 的值將為 780 像素。隨著這些 UI 元素的出現或消失，dvh 的值會動態更新。</p>
<p>這邊也做了 demo，方便大家觀察差異</p>
<p><strong>👉 <a href="https://happy9990929.github.io/viewport-demo/">Demo 連結</a></strong><br><br/><br><br/></p>
<h1 id="瀏覽器支援度"><a href="#瀏覽器支援度" class="headerlink" title="#瀏覽器支援度"></a>#瀏覽器支援度</h1><p>需要注意的是，目前 svh、lvh、dvh 的支援度還沒有每個瀏覽器都支援，不過主流的瀏覽器，像是 Chrome、Edge、Safari、Firefox 都已支援，個人覺得這樣已經很足夠，IE 我已不抱希望 😂</p>
<p><img src="https://imgur.com/ba0PLtg.jpg" alt="svh、lvh、dvh"><br><br/><br><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>在前端開發中，確保網站在各種設備上的良好顯示是至關重要的。傳統的 <code>vh</code> 單位在行動設備上可能會遇到一些挑戰，特別是在瀏覽器的 UI 工具列擋住內容時。新引入的 <code>svh</code>、<code>lvh</code> 和 <code>dvh</code> 單位提供了更靈活和精確的解決方案，讓我們能夠更好地控制視口高度，應對各種不同的情況。</p>
<p>透過這些新的單位，我們可以確保網站在移動設備上的顯示更加一致，無論是地址欄、工具欄的出現或消失，都能動態調整內容的呈現方式。雖然這些單位的支援度尚未完全普及，但主流瀏覽器的支援已經足夠應對大多數情況，讓我們能夠更自信地使用這些新技術來提升用戶體驗。</p>
<p><strong>👉 <a href="https://happy9990929.github.io/viewport-demo/">Demo 連結</a></strong><br><br/><br><br/></p>
<h1 id="Hey！想學習更多前端知識嗎"><a href="#Hey！想學習更多前端知識嗎" class="headerlink" title="Hey！想學習更多前端知識嗎?"></a>Hey！想學習更多前端知識嗎?</h1><p>最近 Lala 開了前端課程 👉<a href="https://www.accupass.com/event/2407061431532017444968">【<strong>實地掌握RWD - 12小時新手實戰班</strong>】</a>👈<br/>無論您是 0 基礎新手，又或是想學 RWD 的初學者，<br>我們將帶你從零開始，深入了解並掌握 RWD 響應式網頁設計的核心技術，快來一起看看吧 😊</p>
<p><a href="https://www.accupass.com/event/2407061431532017444968"><img src="https://imgur.com/NhLHW7H.jpg" alt="RWD"></a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>svh</tag>
        <tag>lvh</tag>
        <tag>dvh</tag>
      </tags>
  </entry>
  <entry>
    <title>3 個前端開發免費好用的 AI 工具 - AI 生成程式碼</title>
    <url>/2024/01/12/frontend-ai/</url>
    <content><![CDATA[<p><img src="https://imgur.com/2N881IG.jpg" alt="AI"></p>
<p>近年來 AI 的崛起，網路上出現了很多 AI 技術，像是利用 AI 產出圖片、請 AI 寫企劃、論文、做音樂等等的，在前端開發時也可以請 AI 幫我們寫程式，協助工程師在前端開發時更順暢、省時間、卡關不會卡太久 😆<br>接下來就來分享 3 個在前端開發時，可以搭配使用的 AI 工具。</p>
<a id="more"></a>
<br />

<h1 id="1-ChatGPT-聊天機器人"><a href="#1-ChatGPT-聊天機器人" class="headerlink" title="#1 ChatGPT - 聊天機器人"></a>#1 <a href="https://chat.openai.com/">ChatGPT</a> - 聊天機器人</h1><p>第一個大家可能都用過，就是 ChatGPT，也是我最常用的工具之一。ChatGPT 是 OpenAI 開發的聊天機器人，直接透過對話的方式與機器人進行互動，不管任何疑難雜症都可以問它。<br>首先我先在這邊問它，如何使用 vite npx 安裝 React 專案</p>
<p><img src="https://imgur.com/Dk3fpnv.jpg" alt="ChatGPT"><br>ChatGPT 回答<br><img src="https://imgur.com/gikdfvM.jpg" alt="ChatGPT"></p>
<p>只不過要注意的是，ChatGPT 3.5 的資料只有到 2021 年，因此很多問題他可能沒辦法回答得完全正確，如想要更高的準確性，可以考慮課金下去😆，就可以開通 ChatGPT 4 囉!<br><br /><br /></p>
<h1 id="2-Amazon-CodeWhisperer-即時程式碼產生器"><a href="#2-Amazon-CodeWhisperer-即時程式碼產生器" class="headerlink" title="#2 Amazon CodeWhisperer - 即時程式碼產生器"></a>#2 <a href="https://aws.amazon.com/tw/codewhisperer/">Amazon CodeWhisperer</a> - 即時程式碼產生器</h1><p>在開發環境(IDE)時也可以有 AI 的輔助，現行有名的就是 GitHub Copilot 了！但 GitHub Copilot 是需要付費的，推薦另一款與 Copilot 功能類似的 AI 工具 - <strong>Amazon CodeWhisperer</strong><br><br /><br>CodeWhisperer 是亞馬遜公司開發的即時程式碼產生器，支援多種語言，包括 JavaScript、TypeScript、Python、Java、C#、Go、Rust、PHP、Ruby、Kotlin、C、C++、Shell 指令碼、SQL、Scala、JSON、YAML 和 HCL，也整合了開發環境，你可以直接使用你習慣的 IDE 來做開發<br><br /><br><strong>CodeWhisperer 可以：</strong></p>
<ul>
<li>根據註解和現有程式碼，在 IDE 中即時產生從程式碼片段到完整功能的程式碼建議</li>
<li>使用專家助理 Amazon Q 加強開發能力</li>
<li>取得關聯開放原始碼專案的儲存庫 URL 和授權</li>
<li>掃描程式碼，協助修復已識別的問題<br><br /><br /></li>
</ul>
<h2 id="安裝-CodeWhisperer"><a href="#安裝-CodeWhisperer" class="headerlink" title="安裝 CodeWhisperer"></a>安裝 CodeWhisperer</h2><p>在 VS code 的 EXTENSIONS 搜尋 <a href="https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-toolkit-vscode">AWS Toolkit</a> 並 Install</p>
<p><img src="https://imgur.com/5F2sKdI.jpg" alt="CodeWhisperer"><br><br /></p>
<p>安裝完成之後，左邊就會出現 AWS 的選單<br><img src="https://imgur.com/SBo2oWZ.jpg" alt="CodeWhisperer"></p>
<br />
要使用 CodeWhisperer 前，我們需要先登入 AWS 的 ID<br />
點擊 AWS ⇒ Sign in to get started ⇒ Use for free with AWS Builder ID
<br /><br />

<p><img src="https://imgur.com/YOmvNUX.jpg" alt="CodeWhisperer"><br><br /><br /></p>
<p>點擊後會另開視窗，登入 AWS，如沒有帳號需要去註冊一個<br><img src="https://imgur.com/gwX3U3R.jpg" alt="CodeWhisperer"><br><br /><br /></p>
<p>成功登入之後會出現 <strong>Connected to AWS Builder ID</strong> 的提示</p>
<p><img src="https://imgur.com/fanO5gb.jpg" alt="CodeWhisperer"><br><br /><br /></p>
<p>在 CodeWhisperer 的地方已開啟 Auto-Suggestions，表示正在使用 CodeWhisperer，<br>如不想使用也可以點擊 Pause Auto-Suggestions，將會暫時關閉<br><strong>Run Security Scan</strong> 可以掃描程式碼以識別難以發現的安全漏洞<br><br /></p>
<p><img src="https://imgur.com/F4ni3pZ.jpg" alt="CodeWhisperer"><br><br /><br /></p>
<h2 id="操作-CodeWhisperer"><a href="#操作-CodeWhisperer" class="headerlink" title="操作 CodeWhisperer"></a>操作 CodeWhisperer</h2><p>先打出註解<br>寫一個方法並印出 1~10 的數字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; write a method named showNumber to print 1~10 number</span><br></pre></td></tr></table></figure>
<p><code>enter</code> 之後會跳出建議程式碼</p>
<p>按 <code>←</code> 或 <code>→</code> 可以選擇下一個建議</p>
<p>按 <code>Tab</code> 使用整行程式</p>
<p>按 <code>Ctrl</code> + <code>→</code> 可以選取單字程式</p>
<p>點擊更多選項，選擇 <strong>Always Show Toolbar</strong> 可以固定顯示工具列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// write a method named showNumber to print 1~10 number</span></span><br><span class="line">  <span class="keyword">const</span> showNumber = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  showNumber();</span><br></pre></td></tr></table></figure>
<br />

<p>中文註解也是可以的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寫一個 function，讓 count 會變成兩倍</span></span><br><span class="line"><span class="keyword">const</span> doubleCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  setCount(count * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接著自己打 halfCount 時，也會自動跳出程式碼</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> halfCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  setCount(count / <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br /><br /></p>
<h1 id="3-Visual-Copilot-設計稿轉換程式碼"><a href="#3-Visual-Copilot-設計稿轉換程式碼" class="headerlink" title="#3 Visual Copilot - 設計稿轉換程式碼"></a>#3 <a href="https://www.builder.io/m/design-to-code">Visual Copilot</a> - 設計稿轉換程式碼</h1><p>現在連切版 AI 都可以幫你做好，還直接包含 RWD！<br>Visual Copilot 是由 Builder.io 推出的 Figma-to-code plugin，支援許多主流框架，包含 React、Vue、Angular、Next.js、Qwik 等等，還可以選擇是否使用 Tailwind CSS，為設計師與工程師共創便利快速的開發流程</p>
<p>在 <a href="https://www.figma.com/community/free">Figma community</a> 有一些創作者提供免費使用的素材，這邊使用 <a href="https://www.figma.com/community/file/1325116068411673165">Real Estate Landing page</a> 這個版型來示範操作<br><br /><br /></p>
<h2 id="如何使用-Visual-Copilot"><a href="#如何使用-Visual-Copilot" class="headerlink" title="如何使用 Visual Copilot"></a>如何使用 Visual Copilot</h2><p>從應用程式搜尋 Builder.io 點擊 Plugins，找到 Builder.io 後並點擊 Run</p>
<p><img src="https://imgur.com/U3n5Xf6.jpg" alt="Figma"><br><br /></p>
<p>接著會出現一個 Builder.io 的小視窗，選擇設計稿後，點擊 Generate code</p>
<p><img src="https://imgur.com/dJDwwOu.jpg" alt="Figma"><br><br /></p>
<p>開始進行編譯，大概等個幾十秒鐘，完成後會自動另開一個視窗</p>
<p><img src="https://imgur.com/iD4SCbi.jpg" alt="Figma"><br><br /></p>
<p>如沒跳出視窗，也可以點擊 View Code</p>
<p><img src="https://imgur.com/PWgvIed.jpg" alt="Figma"><br><br /></p>
<p>可以看到 Visual Copilot 幫我們很快速的切好版了，如此就可以將程式碼複製到專案裡<br>你可以選擇要使用的 Framework、Styling 與產出品質<br><strong>Fast</strong> 是一般快速產出，屬於較簡易的<br><strong>Quality</strong> 品質會比較精緻，如設計稿不複雜可以使用 Quality 產出，但如果要輸出的設計稿比較複雜，就需要付費</p>
<p><img src="https://imgur.com/vmswwti.jpg" alt="Figma"><br><br /></p>
<p>最後可以看到切版後的樣子，還可以直接有 RWD。<br>但可以看出樣子並不是百分之百的正確，甚至有一些跑版的部分，特殊字型也無法辨識，都需要我們在調整處理，不過如果是比較簡單一點的排版，還是可以使用的，這對於前端切版初學者是一個好的學習工具，也可以看看是否有新的 CSS 屬性的用法，相信日後如輸出版面更加精準，肯定在切版的部分可以省下不少時間。</p>
<p><img src="https://imgur.com/hmMOEbZ.jpg" alt="Figma"><br><br /><br /></p>
<h1 id="AI-會取代工程師嗎"><a href="#AI-會取代工程師嗎" class="headerlink" title="AI 會取代工程師嗎?"></a>AI 會取代工程師嗎?</h1><p>很多人都在問，AI 是否會取代工程師呢？<br>目前狀況筆者認為是不會的！因為 AI 並不是百分之百正確，還是需要有專業知識的工程師，判斷 AI 給出的東西是否可以使用。AI 是用來輔助工程師的好助手，善加利用 AI 工具，在做專案時就能事半功倍！</p>
]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>ChatGPT</tag>
        <tag>Amazon CodeWhisperer</tag>
        <tag>Visual Copilot</tag>
        <tag>Builder.io</tag>
        <tag>AI生成程式碼</tag>
      </tags>
  </entry>
  <entry>
    <title>ngrok教學-從外部連到localhost執行你的網站</title>
    <url>/2022/06/13/frontend-ngrok/</url>
    <content><![CDATA[<p><img src="https://imgur.com/L7Qvsfy.jpg" alt="ngrok"></p>
<p>你是否有遇過，想測試一個功能，或是想在不同裝置上測試，卻又要大費周章部署到測試機，你其實可以不用這麼麻煩！<br>ngrok 可以在本地 localhost 的環境下直接進行測試，重點是 <strong>免費版</strong> 就夠給我們一般使用<br><br/><br/></p>
<a id="more"></a>

<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="8536485431"></ins></p>
<h1 id="下載-ngrok"><a href="#下載-ngrok" class="headerlink" title="下載 ngrok"></a>下載 ngrok</h1><p>首先<a href="https://ngrok.com/download">Install ngrok</a>，依自己的 OS 作業系統選擇檔案<br><br/><br/></p>
<h1 id="註冊-ngrok-帳號"><a href="#註冊-ngrok-帳號" class="headerlink" title="註冊 ngrok 帳號"></a>註冊 ngrok 帳號</h1><p>進入 <a href="https://ngrok.com/">ngrok 官網</a>，可以用 github 或 google 帳號建立，或是自行建立一個帳號<br><br/><br/></p>
<h1 id="登入-ngrok-取得-token"><a href="#登入-ngrok-取得-token" class="headerlink" title="登入 ngrok 取得 token"></a>登入 ngrok 取得 token</h1><p>直接把 Command Line 複製下來<br><img src="https://imgur.com/TIW1WYt.jpg" alt="ngrok token"><br><br/><br/></p>
<h1 id="加入-token"><a href="#加入-token" class="headerlink" title="加入 token"></a>加入 token</h1><p>將 Command Line 貼到剛下載的 ngrok.exe<br>設定完之後會看到自動建立了 ngrok.yml<br><br/></p>
<p><img src="https://imgur.com/PIH8hgB.jpg" alt="ngrok token"><br><br/><br/></p>
<h1 id="啟用連到-local-的-web-服務"><a href="#啟用連到-local-的-web-服務" class="headerlink" title="啟用連到 local 的 web 服務"></a>啟用連到 local 的 web 服務</h1><p>依本地端的埠號去下指令，如果我的本地是 localhost:4000 那就會是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok http 4000</span><br></pre></td></tr></table></figure>
<p>之後就會出現以下畫面<br><br/></p>
<p><img src="https://imgur.com/9KrXRa9.jpg" alt="ngrok http"><br>把網址貼到瀏覽器上執行，就會出現你本地端的網站啦～</p>
<p><img src="https://imgur.com/fErKOQK.jpg" alt="ngrok http"><br><br/><br/></p>
<hr>
<h1 id="使用框架時遇到-invalid-host-header"><a href="#使用框架時遇到-invalid-host-header" class="headerlink" title="使用框架時遇到 invalid host header"></a>使用框架時遇到 invalid host header</h1><p>vue 的解決方式是直接在 vue.config.js 的地方設定 <code>disableHostCheck: true</code>，就可以開啟囉！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">     disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br/>

<p>使用 React 時，網友也提供了解法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ngrok http <span class="number">8080</span> -host-header=<span class="string">&quot;localhost:8080&quot;</span></span><br><span class="line">ngrok http --host-header=rewrite <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>記得將 8080 改成自己的 port 號哦！</p>
<br/>

<h1 id="錯誤-Your-account-is-limited-to-1-simultaneous-ngrok-agent-session"><a href="#錯誤-Your-account-is-limited-to-1-simultaneous-ngrok-agent-session" class="headerlink" title="錯誤: Your account is limited to 1 simultaneous ngrok agent session."></a>錯誤: Your account is limited to 1 simultaneous ngrok agent session.</h1><p>如果出現此錯誤: 他的意思是你使用了一個以上的代理，<br>當下找不到斷開的方式，最萬能的解法是 <strong>重開機</strong> 就會好囉😂</p>
<hr>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>有時在檢查網站裝置畫面功能，可能會跟在行動裝置上有不同狀況發生，ngrok 就很適合拿來測試行動裝置上的問題，也不需要一直重複部署，真的很方便呢！如果我的文章有幫助到你，歡迎給我一點鼓勵哦👏👏👏</p>
]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>ngrok</tag>
        <tag>ngrok 教學</tag>
        <tag>ngrok token</tag>
        <tag>invalid host header</tag>
        <tag>Your account is limited to 1 simultaneous ngrok agent session.</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis CI 在 Github Pages 自動部署簡易教學</title>
    <url>/2022/12/22/frontend-travis-ci/</url>
    <content><![CDATA[<p><img src="https://imgur.com/eKYQhDq.jpg" alt="Travis CI"></p>
<p>今天來分享如何在 GitHub 上使用 Travis CI，來做自動部署吧！</p>
<p>在你建立完 Repository 後，每次都要下指令去手動部署，這樣不僅麻煩也浪費很多時間，這時候可以使用 CI/CD 去幫我們做自動部署，而 Travis CI 對 GitHub 有著高度的整合，讓使用者可以快速與 GitHub 的 Repository 串接完成，享受 CI/CD 的服務。</p>
<p>以下步驟跟著操作，即可建立自動部署</p>
<a id="more"></a>

<h1 id="1-登入-Travis-CI"><a href="#1-登入-Travis-CI" class="headerlink" title="1. 登入 Travis CI"></a>1. 登入 Travis CI</h1><p>登入 <a href="https://www.travis-ci.com/">Travis CI</a>，並連動 GitHub 帳號</p>
<br>
<br>

<h1 id="2-選擇要部署的-Repository"><a href="#2-選擇要部署的-Repository" class="headerlink" title="2.選擇要部署的 Repository"></a>2.選擇要部署的 Repository</h1><p>點擊右上頭像 ⇒ Settings</p>
<p>選擇你要建立部署的 Repositories</p>
<p><img src="https://imgur.com/NXVn3n1.png" alt="Settings"></p>
<p>剛建立的儲存庫，不一定會馬上出現，上次等了一小時多才出現，</p>
<p>但有時候建立完又馬上就出現，我也不是很懂這是怎樣😂</p>
<br>
<br>

<h1 id="3-在-Repository-建立-travis-yml"><a href="#3-在-Repository-建立-travis-yml" class="headerlink" title="3. 在 Repository 建立 .travis.yml"></a>3. 在 Repository 建立 .travis.yml</h1><p>在儲存庫的 root 新增一個 .travis.yml 檔案</p>
<p>要有這支檔案才可以跑 CI/CD</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;16.14.2&quot;</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">dist</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GITHUB_TOKEN</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">gh-pages</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<ul>
<li>language ：用什麼語言寫的</li>
<li>node_js ：設定 NodeJS 的版本</li>
<li>install：安裝依賴套件，這邊是用 npm 所以直接下 <code>npm install</code> </li>
<li>script： 部署要執行的指令，可以輸入多個， Travis CI 會一行一行執行</li>
<li>deploy：</li>
</ul>
<ol>
<li>provider：要部署到的地方，此設定為 GitHub Pages 上</li>
<li>skip-cleanup：需設定為 true，否則 Travis CI 會把上方指令創建的檔案都刪除，也包含我們編譯出來的文件</li>
<li>github-token：設置的值是 <code>$GITHUB_TOKEN</code>，Travis CI 會去抓 Environment Variables 中新增的變數</li>
<li>local-dir：指定要部署的目錄，如編譯後的檔案會放在 dist 中，即指定 dist</li>
<li>keep-history：保留部署歷史紀錄</li>
<li>target_branch：指定目標分支，預設是 gh-pages</li>
<li>on：基於哪個分支建構</li>
</ol>
<br>
<br>

<h1 id="4-建立-Repository-的-GITHUB-TOKEN"><a href="#4-建立-Repository-的-GITHUB-TOKEN" class="headerlink" title="4.建立 Repository 的 GITHUB TOKEN"></a>4.建立 Repository 的 GITHUB TOKEN</h1><p>需要建立 Token，提供給 Travis CI 做環境變數</p>
<p>點擊頭像 ⇒ Settings</p>
<p><img src="https://imgur.com/mLRkHPE.png" alt="Settings"><br><br></p>
<p>左側 sidebar 最下方，點擊 Developer settings<br><img src="https://i.imgur.com/5MthmF7.jpg" alt="Developer settings"><br><br></p>
<p>選擇 Tokens(classic)<br><img src="https://imgur.com/s7ZQtsL.png" alt="Tokens"><br><br></p>
<p>選擇 Generate new token ⇒ Generate new token(classic)<br><img src="https://imgur.com/Gtbl4ii.png" alt="Generate new token"><br><br></p>
<p>在 Note 填上 Repository 名稱，勾選 workflow 並完成<br><img src="https://imgur.com/1H9hjiT.png" alt="workflow"><br><br></p>
<p>將會生成出一組 token，這就是要在 Travis CI 設定的 GITHUB_TOKEN，複製起來到下個步驟<br><img src="https://imgur.com/myfj3ud.png" alt="GITHUB_TOKEN"></p>
<br>
<br>

<h1 id="5-設定-Travis-CI-Environment-Variables"><a href="#5-設定-Travis-CI-Environment-Variables" class="headerlink" title="5.設定 Travis CI Environment Variables"></a>5.設定 Travis CI Environment Variables</h1><p>回到剛剛的 Travis CI，選擇專案，點擊 More options ⇒ Settings<br><img src="https://imgur.com/pZmpXJi.png" alt="Settings"><br><br></p>
<p>填寫 GITHUB_TOKEN 跟 VALUE 並 Add，<br>VALUE 填寫專案的 Token<br>新增後就會呈現灰色區塊<br><img src="https://imgur.com/WRRzWZl.png" alt="Environment Variables"></p>
<br>
<br>

<h1 id="6-自動部署"><a href="#6-自動部署" class="headerlink" title="6.自動部署"></a>6.自動部署</h1><p>以上都設定完即可部署</p>
<p>按下 Restart build<br><img src="https://imgur.com/OYUqJwD.png" alt="Restart build"><br><br></p>
<p>將會開始跑工作流程，可以看到工作進度<br><img src="https://imgur.com/s6Tr0Gb.png" alt="workflow"><br><br></p>
<p>最後是完成或失敗都會顯示出來，整個流程的代碼<br><img src="https://imgur.com/Zbd8eJg.png" alt="complete"><br><br></p>
<p>在 Repository 也可以點擊查看細節<br><img src="https://imgur.com/judassk.png" alt="complete"></p>
<br>
<br>

<p>點我看 <a href="https://github.com/happy9990929/travisTest">專案 Demo</a></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>自動部署只要設定一次就可以省去一堆麻煩的步驟，實在太方便了！大家一起來試試看吧～～～😉</p>
]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>Travis CI</tag>
        <tag>Github Pages</tag>
        <tag>Travis CI 教學</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite 教學快速上手，秒安裝秒啟動</title>
    <url>/2022/04/24/frontend-vite/</url>
    <content><![CDATA[<p><img src="https://imgur.com/iogr3On.jpg" alt="vite"></p>
<p>Vite 是由 Vue 之父 尤雨溪開發的新打包工具，可以說是 Vue Cli 的升級版，Cli 因為有依賴 webpack 解決了很多打包上複雜的問題，然而，當專案越來越大，打包時間隨著專案變大包跑得越久，大大降低了開發者的開發效率和幸福感。</p>
<p><strong>vite 解決了開發速度上的痛點，秒啟動根本驚為天人</strong>⚡️⚡️⚡️！打包速度極快，不用像 vue-cli 要進行編譯後啟動，省了很多開發上的時間。</p>
<a id="more"></a>

<br />

<h1 id="Vite-是什麼"><a href="#Vite-是什麼" class="headerlink" title="Vite 是什麼?"></a>Vite 是什麼?</h1><p>Vite 法語意為「快速」的意思，提供開發者一個快速啟動、即時更新的開發工具，預設無設定檔。</p>
<p>🔸 開發環境：基於瀏覽器原生 ES Module 提供的內建功能，能夠通過 import 和 export 連結檔案，並有基於 esbuild 的依賴預建構，擁有速度快到驚人的緩存模塊熱更新（HMR），Vite 會預先針對所有模組進行轉譯與打包，當瀏覽器再次請求某個模組時，就只針對被更改的模組進行編譯，這樣就能避免多次請求的問題了</p>
<p><span style="font-size: 16px; border: 1px dashed #d9d9d9; padding: 1rem; ">📌 熱更新：Hot Module Replacement，簡稱 HMR，在不刷新瀏覽器的前提下就能夠對應用進行更新</span></p>
<br />

<p>🔸 生產環境：使用 Rollup 打包代碼，透過較快的時間來將檔案打包成更小容量。</p>
<!-- 文章內廣告 -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="5051618728"></ins></p>
<h1 id="Vite-安裝"><a href="#Vite-安裝" class="headerlink" title="Vite 安裝"></a>Vite 安裝</h1><p>使用 NPM</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure>
<p>使用 yarn</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure>
<br />

<p><strong>接著依自己專案需求來做選擇(以下以 vue 為例)</strong></p>
<p>Project name: (專案名稱)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vite-project</span><br></pre></td></tr></table></figure>
<br />
Select a framework: (選擇框架)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vanilla</span><br><span class="line">✔ vue</span><br><span class="line">react</span><br><span class="line">preact</span><br><span class="line">lit</span><br><span class="line">svelte</span><br></pre></td></tr></table></figure>
<br />
Select a variant: (使用 js 或 ts)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✔ vue</span><br><span class="line">vue-ts</span><br></pre></td></tr></table></figure>
<br />

<p>這樣就安裝完成了！！！另外還有更快速的指令，<br>你也可以通過附加的命令行選項<b>直接指定專案名稱和框架模板</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># npm 6.x</span><br><span class="line">npm create vite@latest my-vue-app --template vue</span><br><span class="line"></span><br><span class="line"># npm 7+, extra double-dash is needed:</span><br><span class="line">npm create vite@latest my-vue-app -- --template vue</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure>
<br />

<p>🔸 框架模板</p>
<table>
<thead>
<tr>
<th>JavaScript</th>
<th>TypeScript</th>
</tr>
</thead>
<tbody><tr>
<td>vanilla</td>
<td>vanilla-ts</td>
</tr>
<tr>
<td>vue</td>
<td>vue-ts</td>
</tr>
<tr>
<td>react</td>
<td>react-ts</td>
</tr>
<tr>
<td>preact</td>
<td>preact-ts</td>
</tr>
<tr>
<td>lit</td>
<td>lit-ts</td>
</tr>
<tr>
<td>svelte</td>
<td>svelte-ts</td>
</tr>
</tbody></table>
<br />
注意：<br />
Vite 需要 Node.js 版本 >= 12.0.0<br />
vue 目前僅支援 vue3，所以不能使用與 vue3 不兼容的套件<br />
引入檔案必須掛載副檔名

<br />
<br />
<br />

<h1 id="Vite-專案目錄結構"><a href="#Vite-專案目錄結構" class="headerlink" title="Vite 專案目錄結構"></a>Vite 專案目錄結構</h1><p>打開專案後，其實目錄結構跟 Cli 差不多，只是多了一個 vite 的設定檔 vite.config.js<br><br /></p>
<p><img src="https://imgur.com/hu4VSoP.jpg" alt="vite目錄"></p>
<br />

<p>比較特別的是，在 Cli 時 index.html 是在 public 文件夾內，而 Vite 放在最外層了，index.html 是 Vite 項目的入口文件，原碼也做了一些調整。</p>
<p><img src="https://imgur.com/GuYJb6p.jpg" alt="index"></p>
<p>瀏覽器透過 JavaScript 的 <code>&lt;script type=&quot;module&quot;&gt;</code> 找到 main.js 進入點，便可以使用 <strong>ESM 語法</strong>，根據 import 的 url 路徑加載模組，<br>Vite 有<strong>根目錄</strong>的概念，index.html 中的 URL 自動轉換絕對路徑，也可以使用相對路徑導入，因此不再需要 %PUBLIC_URL% 佔位符了。</p>
<br />
<br />

<h1 id="共用-SCSS-變數"><a href="#共用-SCSS-變數" class="headerlink" title="共用 SCSS 變數"></a>共用 SCSS 變數</h1><p>vite 共用 SCSS 變數需在 <code>vite.config</code> 設定，<br>由於 vite 沒有內建 @ 的語法糖，如要使用需設定 alias，更多設定請參考<a href="https://vitejs.dev/config/">官方文件</a></p>
<p>vite.config</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  css:&#123;</span><br><span class="line">    preprocessorOptions: &#123;</span><br><span class="line">       scss: &#123;</span><br><span class="line">         additionalData: <span class="string">`@import &quot;@/assets/scss/variable.scss&quot;;`</span>,</span><br><span class="line">         charset: <span class="literal">false</span>,</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br />
<br />

<h1 id="Vite-跟-Cli-對比"><a href="#Vite-跟-Cli-對比" class="headerlink" title="Vite 跟 Cli 對比"></a>Vite 跟 Cli 對比</h1><table>
<thead>
<tr>
<th></th>
<th>Vite</th>
<th>Vue-Cli</th>
</tr>
</thead>
<tbody><tr>
<td>打包工具</td>
<td>rollup</td>
<td>webpack</td>
</tr>
<tr>
<td>效能</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>功能</td>
<td>功能較基本、簡單</td>
<td>webpack 功能性較豐富</td>
</tr>
<tr>
<td>框架兼容</td>
<td>提供多種框架支援，Vue 只支援 Vue3 以上</td>
<td>僅支援 Vue 框架，Vue2、Vue3 都兼容</td>
</tr>
<tr>
<td>瀏覽器兼容</td>
<td>僅支援 ES6 的瀏覽器</td>
<td>因有 babel 可兼容多種瀏覽器</td>
</tr>
</tbody></table>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="8536485431"></ins></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>Vite 的快速省了很多開發時間，是開發者的福音，尤雨溪在 twitter 也發表了，<br><strong>Vite 會取代 Vue CLI 嗎？</strong><br><br /></p>
<p><img src="https://imgur.com/35PNPXZ.jpg" alt="尤雨溪twitter"></p>
<br />

<p><strong>起初，我也不確定，但是現階段我相信最終會是這樣。</strong></p>
<p>你學會 vite 了嗎?</p>
<hr>
<h1 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h1><p><a href="https://cn.vitejs.dev/guide/">Vite 官方文件</a></p>
]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vite 教學</tag>
        <tag>vite scss共用變數</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用指令</title>
    <url>/2021/10/17/git-cmdline/</url>
    <content><![CDATA[<p><img src="https://imgur.com/6mK0zWq.jpg" alt="Git"></p>
<h1 id="Git-常用指令"><a href="#Git-常用指令" class="headerlink" title="Git 常用指令"></a>Git 常用指令</h1><p><strong>Git 是否有安裝成功：</strong><code>git --version</code></p>
<a id="more"></a>

<p><strong>設定/修改個人資料</strong></p>
<ul>
<li>輸入姓名：<code>git config --global user.name &quot;gon&quot;</code></li>
<li>輸入個人的 email：<code>git config --global user.email &quot;gonsakon@gmail.com&quot;</code></li>
<li>查詢 git 設定內容：<code>git config --list</code></li>
<li>查看用户名：<code>git config user.name</code></li>
<li>查看用户邮箱：<code>git config user.email</code></li>
</ul>
<p><strong>Git 常用指令</strong></p>
<ul>
<li>初始化數據庫：<code>git init</code></li>
<li>查詢當前狀態：<code>git status</code></li>
<li>將檔案加入到索引：<code>git add .</code></li>
<li>將索引檔案變成一個更新(commit)：<code>git commit -m &quot;修改內容&quot;</code></li>
<li>觀察 commit 歷史紀錄： <code>git log</code></li>
<li>下載遠端數據庫：<code>git clone 數據庫網址</code></li>
<li>更新遠端數據庫：<code>git push origin master</code></li>
<li>刪除遠端分支：<code>git push origin --delete 分支名稱</code></li>
<li>下載同步更新：<code>git pull</code></li>
</ul>
<p><strong>分支 (branch)</strong></p>
<ul>
<li>新增分支：<code>git branch 分支名稱</code></li>
<li>查看分支：<code>git branch</code></li>
<li>切換分支：<code>git checkout 分支名稱</code></li>
<li>建立並切換分支：<code>git checkout -b 分支名稱</code></li>
<li>刪除分支：<code>git branch -d 分支名稱</code> (-D 是強制刪除)</li>
<li>還原上個版本：<code>git reset HEAD^</code> (^為要回去哪一個版本，^^兩個就是回到前兩個版本)</li>
<li>合併分支：<code>git merge 分支名稱</code></li>
<li>取消快轉：<code>git merge 分支名稱 --no-ff</code></li>
<li>觀看線圖：<code>git log —oneline -graph</code></li>
<li>還原合併前狀態：<code>git reset —hard ORIG_HEAD</code></li>
</ul>
<p><strong>還原技巧</strong></p>
<ul>
<li>回頭觀看版本內容：<code>git checkout 編號</code></li>
<li>返回最新的版本：<code>git checkout master(分支名稱)</code></li>
<li>索引檔案&gt;還原到工作目錄：<code>git reset HEAD</code></li>
<li>還原前兩個版本：<code>git reset HEAD^^</code></li>
<li>還原前兩個版本，所有更新檔案都<strong>放棄</strong>：<code>git reset HEAD^^ --hard</code></li>
<li>觀看詳細所有歷史紀錄：<code>git reflog</code></li>
<li>新增檔案時，檔案還沒加追蹤時，清空工作目錄<br>顯示此次清除的檔案：<code>git clean -n</code><br>強制清除檔案：<code>git clean -f</code></li>
<li>檔案已加入追蹤，還原工作目錄上已更改的檔案 ：<code>git checkout -- &lt;file&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Git指令</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Publisher Tag 教學-顯示廣告版位程式碼</title>
    <url>/2024/06/04/google-publisher-tag/</url>
    <content><![CDATA[<p><img src="https://imgur.com/xIgYxMJ.jpg" alt="Google Publisher Tag"></p>
<p>Google Publisher Tag 是一種 JavaScript 標籤庫，簡稱為 GPT (跟 ChatGPT 沒關係嘿~XD)，用於在網頁上展示廣告並管理廣告投放。GPT 是 Google Ad Manager 平台的重要組成部分，它提供了強大且靈活的功能，幫助網站管理者優化廣告展示，提高廣告收入</p>
<p>本篇文章將會介紹如何操作 Google Publisher Tag，在網站成功顯示廣告~👍</p>
<a id="more"></a>
<br/>
<br/>

<h1 id="基本廣告位顯示設定"><a href="#基本廣告位顯示設定" class="headerlink" title="# 基本廣告位顯示設定"></a># 基本廣告位顯示設定</h1><h2 id="1-載入-gpt-js"><a href="#1-載入-gpt-js" class="headerlink" title="1. 載入 gpt.js"></a>1. 載入 gpt.js</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://securepubads.g.doubleclick.net/tag/js/gpt.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h2 id="2-初始化-googletag-對象及其命令陣列-cmd"><a href="#2-初始化-googletag-對象及其命令陣列-cmd" class="headerlink" title="2. 初始化 googletag 對象及其命令陣列 cmd"></a>2. 初始化 googletag 對象及其命令陣列 cmd</h2><p>檢查 window 對象上是否已經存在 googletag 對象，如果不存在則創建一個包含 cmd 屬性的對象。cmd 是一個陣列，用於儲存將被異步執行的命令。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.googletag = <span class="built_in">window</span>.googletag || &#123; <span class="attr">cmd</span>: [] &#125;;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h2 id="3-定義廣告版位"><a href="#3-定義廣告版位" class="headerlink" title="3. 定義廣告版位"></a>3. 定義廣告版位</h2><p>定義一個廣告版位，包括設置廣告單元路徑、尺寸和 HTML 元素 ID，並將廣告位添加到發布服務中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">googletag.cmd.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  googletag</span><br><span class="line">    .defineSlot(<span class="string">&quot;/6355419/Travel/Europe/France/Paris&quot;</span>, [<span class="number">300</span>, <span class="number">250</span>], <span class="string">&quot;banner-ad&quot;</span>)</span><br><span class="line">    .addService(googletag.pubads());</span><br><span class="line">  googletag.enableServices();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>這段代碼將一個函數推送到 <code>googletag.cmd</code> 陣列，這個函數包含以下步驟：</p>
<ul>
<li><strong><code>defineSlot</code></strong> 方法創建了一個廣告位。<br>參數 /6355419/Travel/Europe/France/Paris 是廣告單元的路徑，<br>[360, 250] 是廣告的尺寸，<br>banner-ad 是將顯示廣告的 HTML 元素的 ID。</li>
<li><strong><code>addService(googletag.pubads())</code></strong> 將此廣告位添加到 Google 的廣告發布服務。</li>
<li><strong><code>enableServices()</code></strong> 啟用所有已經添加的廣告服務，使廣告位可以正常運行。<br/>
<br/>
<br/>

</li>
</ul>
<h2 id="4-啟用廣告服務，使其可以運行"><a href="#4-啟用廣告服務，使其可以運行" class="headerlink" title="4. 啟用廣告服務，使其可以運行"></a>4. 啟用廣告服務，使其可以運行</h2><p>這段代碼將另一個函數推送到 googletag.cmd 陣列，這個函數包含 googletag.display(“banner-ad”) 方法。這個方法的作用是觸發在指定的 HTML 元素（ID 為 banner-ad）中顯示廣告。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">googletag.cmd.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  googletag.display(<span class="string">&quot;banner-ad&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h2 id="5-顯示廣告在指定的-HTML-元素中"><a href="#5-顯示廣告在指定的-HTML-元素中" class="headerlink" title="5.顯示廣告在指定的 HTML 元素中"></a>5.顯示廣告在指定的 HTML 元素中</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner-ad&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://securepubads.g.doubleclick.net/tag/js/gpt.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.googletag = <span class="built_in">window</span>.googletag || &#123; <span class="attr">cmd</span>: [] &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    googletag.cmd.push(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">      googletag</span><br><span class="line"><span class="javascript">        .defineSlot(<span class="string">&quot;/6355419/Travel/Europe/France/Paris&quot;</span>, [<span class="number">300</span>, <span class="number">250</span>], <span class="string">&quot;banner-ad&quot;</span>)</span></span><br><span class="line">        .addService(googletag.pubads());</span><br><span class="line">      googletag.enableServices();</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner-ad&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    googletag.cmd.push(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      googletag.display(<span class="string">&quot;banner-ad&quot;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>👉 GPT 官方也提供了<a href="https://developers.google.com/publisher-tag/samples/display-test-ad?hl=zh-tw">範例參考</a><br><br/><br><br/></p>
<h1 id="動態切換廣告"><a href="#動態切換廣告" class="headerlink" title="# 動態切換廣告"></a># 動態切換廣告</h1><p>現在有兩個 tab 分別為 ad1、ad2，我希望切換 tab 會分別出現不同的廣告，當然最簡單的做法就是直接複製兩個，並用 display: none 來做切換，不過這邊想使用不同的情境，在切換 tab 後，動態變更 id 顯示廣告<br><br/><br><br/></p>
<h2 id="1-HTML-元素-切換分頁按鈕與廣告版位"><a href="#1-HTML-元素-切換分頁按鈕與廣告版位" class="headerlink" title="1. HTML 元素 - 切換分頁按鈕與廣告版位"></a>1. HTML 元素 - 切換分頁按鈕與廣告版位</h2><p>首先，會有兩個 li，分別為不同的分頁，下面為廣告呈現</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;ad1&quot;</span>&gt;</span>AD1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;ad2&quot;</span>&gt;</span>AD2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner-ad&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h2 id="2-點擊分頁，變換廣告"><a href="#2-點擊分頁，變換廣告" class="headerlink" title="2. 點擊分頁，變換廣告"></a>2. 點擊分頁，變換廣告</h2><p>點擊 id 後，帶入廣告路徑、尺寸、id 參數至函式 displayAd()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;ad1&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  displayAd(<span class="string">&#x27;/6355419/Travel/Europe/France/Paris&#x27;</span>, [<span class="number">300</span>, <span class="number">250</span>], <span class="string">&quot;banner-ad&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;ad2&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  displayAd(<span class="string">&#x27;/22521021505/demo&#x27;</span>, [<span class="number">360</span>, <span class="number">293</span>], <span class="string">&quot;div-gpt-ad&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h2 id="3-變更-id，啟用廣告"><a href="#3-變更-id，啟用廣告" class="headerlink" title="3. 變更 id，啟用廣告"></a>3. 變更 id，啟用廣告</h2><p>基於前面的基本做法，需注意的是要先銷毀目前已定義的廣告位，再創建新的廣告版後，再 refresh進行更新，如果沒有 refresh 將不會顯示廣告</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> displayAd = <span class="function">(<span class="params">path, size, id</span>) =&gt;</span> &#123;</span><br><span class="line">  googletag.destroySlots();</span><br><span class="line">  <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list div&#x27;</span>);</span><br><span class="line">  divs.id = id;</span><br><span class="line"></span><br><span class="line">  googletag.cmd.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    googletag</span><br><span class="line">    .defineSlot(path, size, id)</span><br><span class="line">    .addService(googletag.pubads());</span><br><span class="line">      googletag.enableServices();</span><br><span class="line"></span><br><span class="line">    googletag.display(id);</span><br><span class="line">    googletag.pubads().refresh();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>googletag.destroySlots()</code>：銷毀當前頁面上所有已經定義的廣告位，釋放相關的內存和資源，從而提高頁面的性能</li>
<li><code>googletag.pubads().refresh()</code>：加載與更新廣告內容<br/>
<br/>

</li>
</ul>
<h2 id="完整程式碼-1"><a href="#完整程式碼-1" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;https://securepubads.g.doubleclick.net/tag/js/gpt.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.googletag = <span class="built_in">window</span>.googletag || &#123; <span class="attr">cmd</span>: [] &#125;;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;ad1&quot;</span>&gt;</span>AD1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;ad2&quot;</span>&gt;</span>AD2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner-ad&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ad1&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      displayAd(<span class="string">&#x27;/6355419/Travel/Europe/France/Paris&#x27;</span>, [<span class="number">300</span>, <span class="number">250</span>], <span class="string">&quot;banner-ad&quot;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ad2&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      displayAd(<span class="string">&#x27;/22521021505/demo&#x27;</span>, [<span class="number">360</span>, <span class="number">293</span>], <span class="string">&quot;div-gpt-ad&quot;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> displayAd = <span class="function">(<span class="params">path, size, id</span>) =&gt;</span> &#123;</span></span><br><span class="line">      googletag.destroySlots();</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list div&#x27;</span>);</span></span><br><span class="line">      divs.id = id;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      googletag.cmd.push(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">        googletag</span><br><span class="line">        .defineSlot(path, size, id)</span><br><span class="line">        .addService(googletag.pubads());</span><br><span class="line">          googletag.enableServices();</span><br><span class="line"></span><br><span class="line">        googletag.display(id);</span><br><span class="line">        googletag.pubads().refresh();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      displayAd(<span class="string">&#x27;/6355419/Travel/Europe/France/Paris&#x27;</span>, [<span class="number">300</span>, <span class="number">250</span>], <span class="string">&quot;banner-ad&quot;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>GPT 是一個強大且靈活的工具，它不僅能夠提高廣告投放的精準度和效果，還能夠顯著提升網站的廣告收入，Google Publisher Tag 的官方文件其實也寫得很清楚，遇到任何問題還是查找文件最快了~本篇文章就介紹到這邊，歡迎大家互相交流分享唷 😊<br><br/><br><br/></p>
<h1 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h1><p><a href="https://support.google.com/admanager/answer/181073">Google Publisher Tag 官方文件</a></p>
<p><a href="https://developers.google.com/publisher-tag/guides/get-started">Google Publisher Tag 開發人員文件</a></p>
]]></content>
      <categories>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Google Publisher Tag</tag>
        <tag>Google Ad Manager</tag>
        <tag>GPT</tag>
      </tags>
  </entry>
  <entry>
    <title>icoMoon 教學-將 icon 生成圖標字體</title>
    <url>/2022/03/12/icomoon/</url>
    <content><![CDATA[<p><img src="https://imgur.com/STTYcIy.jpg" alt="icoMoon"><br>在網站上常常會使用到 icon 圖示做為點綴，而現今行動版普及化，響應式網站大多使用縮放都不會失真的 svg 向量圖檔，來獲得最佳的視覺體驗。網路有很多的插件內建 svg 圖示可以做為字型使用，例如 <a href="https://fontawesome.com/icons">fontawesome</a> 使用上就很方便快速，不過有時候想要自行定義圖示，或是只有用到少數的 icon，不想載入太大包檔案，這次要介紹的就是可以自行客製 icon 的 <a href="https://icomoon.io/">icoMoon</a></p>
<a id="more"></a>

<h1 id="IcoMoon-App-概述"><a href="#IcoMoon-App-概述" class="headerlink" title="IcoMoon App 概述"></a>IcoMoon App 概述</h1><ul>
<li>5500 多個免費圖標</li>
<li>可以導出 SVG、PNG 等格式的圖標，IcoMoon 生成可與 use 標籤一起使用的內聯 SVG</li>
<li>導入客製的向量圖，生成圖標字體</li>
<li>IcoMoon 生成的代碼文件（HTML、CSS、JS）是 MIT 許可的，可免費使用</li>
<li>IcoMoon 應用程序中所做的幾乎所有事情都發生在本地。例如，當導入 SVG 圖像/字體或生成字體時，一切都發生在自己的瀏覽器中，不會上傳到 IcoMoon 的服務器</li>
</ul>
<h1 id="IcoMoon-教學"><a href="#IcoMoon-教學" class="headerlink" title="IcoMoon 教學"></a>IcoMoon 教學</h1><p>先進入 <a href="https://icomoon.io/app/">IcoMoon App</a></p>
<br/>

<h2 id="STEP-1-加入-icon"><a href="#STEP-1-加入-icon" class="headerlink" title="STEP 1.加入 icon"></a>STEP 1.加入 icon</h2><p>🔸 加入 IcoMoon 所提供的 icon<br>從 <a href="https://icomoon.io/app/#/select/library">Icon Library</a> 圖示庫可以加入你想要的圖示，Add 為免費直接加入，Purchase、Go Premium 需要升級購買<br><img src="https://i.imgur.com/jd8pOqJ.jpg" alt="IcoMoon"></p>
<p>🔸 客製 icon<br>左上點擊 Import Icons，將 svg 圖檔匯入，如圖<br><img src="https://i.imgur.com/wIiyeSu.png" alt="Import Icons"></p>
<br/>

<h2 id="STEP-2-選取要使用的-icon"><a href="#STEP-2-選取要使用的-icon" class="headerlink" title="STEP 2.選取要使用的 icon"></a>STEP 2.選取要使用的 icon</h2><p>將要使用的 icon 點選起來，選起來的圖示會自動變成一個 Selection<br><img src="https://i.imgur.com/p9kqsqE.jpg" alt="icoMoon-select"></p>
<br/>

<h2 id="STEP-3-生成圖標字體或圖示，Download"><a href="#STEP-3-生成圖標字體或圖示，Download" class="headerlink" title="STEP 3.生成圖標字體或圖示，Download"></a>STEP 3.生成圖標字體或圖示，Download</h2><p>你可以選擇使用 Generate Font 或 Generate SVG &amp; More 其中一種</p>
<p>🔸 選取 Generate Font<br>產生圖標字體，Download 檔案後引入到自己的專案，即可使用裡面的 class，並用 font-size 就可以調整大小</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-smile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>點選圖示的 Get code，即可查看語法<br><img src="https://imgur.com/87LT8Zr.jpg" alt="icoMoon-Font"></p>
<br/>

<p>🔸 選取 Generate SVG &amp; More<br>也可以生成 svg 圖示，Download 檔案後引入到自己的專案，用繪製 svg 的方式顯示 icon</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon icon-smile&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-smile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;icon-smile&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 32 32&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M25.632 10.65c0 1.432-1.16 2.592-2.592 2.592s-2.592-1.16-2.592-2.592c0-1.432 1.16-2.592 2.592-2.592s2.592 1.16 2.592 2.592z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M11.955 10.65c0 1.432-1.16 2.592-2.592 2.592s-2.592-1.16-2.592-2.592c0-1.432 1.16-2.592 2.592-2.592s2.592 1.16 2.592 2.592z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M16.774 24.877c-8.429 0-15.008-6.022-15.11-6.112l1.312-1.402c0.55 0.512 13.619 12.416 26.022 0.026l1.357 1.357c-4.602 4.595-9.325 6.131-13.581 6.131z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>點選圖示的 Get code，即可查看語法<br><img src="https://imgur.com/JBAMcSe.jpg" alt="icoMoon-Svg"></p>
<hr>
<p>icoMoon 真的是簡單又好用，尤其是可以自訂圖示的部分更是加分，大家也可以使用看看哦😊</p>
]]></content>
      <categories>
        <category>Plugins</category>
      </categories>
      <tags>
        <tag>icoMoon教學</tag>
        <tag>icoMoon</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery常用方法大全</title>
    <url>/2022/06/14/jquery/</url>
    <content><![CDATA[<p><img src="https://imgur.com/1CT5iTI.jpg" alt="jquery"><br>jQuery 是一個 Javascript 的函示庫，透過它可以簡單的撰寫做出各種網頁效果。<br>以下是 jQuery 一些常用的方法，方便查閱記錄。</p>
<a id="more"></a>

<h1 id="元素查找"><a href="#元素查找" class="headerlink" title="元素查找"></a>元素查找</h1><h2 id="prev"><a href="#prev" class="headerlink" title="prev()"></a>prev()</h2><p>取得同層上一個元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).prev(<span class="string">&quot;.selected&quot;</span>)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h2><p>取得同層下一個元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).next(<span class="string">&quot;.selected&quot;</span>)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="nextAll"><a href="#nextAll" class="headerlink" title="nextAll()"></a>nextAll()</h2><p>取得元素之後的所有兄弟元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).nextAll()</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="siblings"><a href="#siblings" class="headerlink" title="siblings()"></a>siblings()</h2><p>取得所有同级元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;li&quot;</span>).siblings().css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="children"><a href="#children" class="headerlink" title="children()"></a>children()</h2><p>選取元素的子元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).children().css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="parent"><a href="#parent" class="headerlink" title="parent()"></a>parent()</h2><p>選取元素的父元素中符合選擇器的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).parent().css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="parents"><a href="#parents" class="headerlink" title="parents()"></a>parents()</h2><p>選取元素的祖先元素中符合選擇器的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).parents().css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="parentsUntil"><a href="#parentsUntil" class="headerlink" title="parentsUntil()"></a>parentsUntil()</h2><p>選取元素的祖先元素中直到遇到第一個符合選擇器的元素(不含此元素)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).parentsUntil().css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="before"><a href="#before" class="headerlink" title="before()"></a>before()</h2><p>在DOM之前插入元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).before(<span class="string">&quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="after"><a href="#after" class="headerlink" title="after()"></a>after()</h2><p>在DOM後插入元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).after(<span class="string">&quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="prepend"><a href="#prepend" class="headerlink" title="prepend()"></a>prepend()</h2><p>將元素添加到被選元素的開頭</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).prepend(<span class="string">&quot;&lt;b&gt;prepend&lt;/b&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h2><p>將元素添加到被選元素的結尾</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).append(<span class="string">&quot;&lt;li&gt;hello&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><p>移除元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).remove();</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="closest"><a href="#closest" class="headerlink" title="closest()"></a>closest()</h2><p>尋找離當前元素最近的祖先元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).closest(<span class="string">&quot;ul&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><p>查找元素底下的子元素<br>與 <code>$(&#39;p .text&#39;)</code> 相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).find(<span class="string">&quot;.text&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>查找元素同層<br>與 <code>$(&#39;p.text&#39;)</code> 相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).filter(<span class="string">&quot;.text&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h2><p>選取元素中子孫元素符合選擇器的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).has(<span class="string">&quot;span&quot;</span>)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="eq"><a href="#eq" class="headerlink" title="eq()"></a>eq()</h2><p>元素中符合索引值的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).eq(<span class="number">1</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>


<h1 id="屬性與-CSS"><a href="#屬性與-CSS" class="headerlink" title="屬性與 CSS"></a>屬性與 CSS</h1><h2 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h2><p>設定元素的屬性和值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;img&quot;</span>).attr(<span class="string">&quot;width&quot;</span>,<span class="string">&quot;300&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="css"><a href="#css" class="headerlink" title="css()"></a>css()</h2><p>設定CSS樣式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;#000&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).css(&#123;</span><br><span class="line">  color: <span class="string">&#x27;#000&#x27;</span>,</span><br><span class="line">  fontSize: <span class="string">&#x27;16px&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="animate"><a href="#animate" class="headerlink" title="animate()"></a>animate()</h2><p>控制CSS動畫效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).animate(&#123;</span><br><span class="line">  opacity: <span class="number">0</span></span><br><span class="line">&#125;, <span class="number">1500</span>)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h2><p>元素動畫完成前執行停止<br><code>true</code> 可中斷執行中動畫<br><code>false</code> 不可中斷執行中動畫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).stop(<span class="literal">true</span>).animate(&#123;</span><br><span class="line">  opacity: <span class="number">0</span></span><br><span class="line">&#125;, <span class="number">1500</span>)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="addClass"><a href="#addClass" class="headerlink" title="addClass()"></a>addClass()</h2><p>加入class</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#add&#x27;</span>).addClass(<span class="string">&#x27;text&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass()"></a>removeClass()</h2><p>移除class</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#add&#x27;</span>).removeClass(<span class="string">&#x27;text&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass()"></a>toggleClass()</h2><p>收合class，如果有class就移除，沒有就加入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#add&#x27;</span>).toggleClass(<span class="string">&#x27;text&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>


<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="ready"><a href="#ready" class="headerlink" title="ready()"></a>ready()</h2><p>DOM都載入後執行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">&quot;ready!&quot;</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>也可為</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log( <span class="string">&quot;ready!&quot;</span> );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><p>生成被選元素的副本，包含子節點、文本和屬性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).clone().appendTo(<span class="string">&quot;section&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="each"><a href="#each" class="headerlink" title="each()"></a>each()</h2><p>對每個選取元素進行處理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 執行動作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="create-element"><a href="#create-element" class="headerlink" title="create element"></a>create element</h2><p>使用標籤建立元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> elem = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<br/>

<h2 id="on"><a href="#on" class="headerlink" title="on()"></a>on()</h2><p>執行動作<br>mouseover、mouseout、mousedown、mouseup、mousemove、click、dbclick、keydown、keyup、focus、blur、change、resize、scroll</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>prev</tag>
        <tag>next</tag>
        <tag>nextAll</tag>
        <tag>siblings</tag>
        <tag>children</tag>
        <tag>parent</tag>
        <tag>parents</tag>
        <tag>parentsUntil</tag>
        <tag>before</tag>
        <tag>after</tag>
        <tag>prepend</tag>
        <tag>append</tag>
        <tag>remove</tag>
        <tag>closest</tag>
        <tag>find</tag>
        <tag>filter</tag>
        <tag>has</tag>
        <tag>eq</tag>
        <tag>attr</tag>
        <tag>animate</tag>
        <tag>addClass</tag>
        <tag>removeClass</tag>
        <tag>toggleClass</tag>
        <tag>ready</tag>
      </tags>
  </entry>
  <entry>
    <title>綁定 this 的方法-call / apply / bind</title>
    <url>/2021/07/31/js-call-apply-bind/</url>
    <content><![CDATA[<p><img src="https://imgur.com/ZVq8tKl.jpg" alt="Imgur"></p>
<p>因為 this 是動態的，所以會需要一些方法，讓函式被呼叫都能有固定的 this</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  name: <span class="string">&#x27;mimi&#x27;</span>,</span><br><span class="line">  printName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bobee&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我們都知道，要印出 cat 的 name，只需要調用 cat.printName();<br>但 dog 如果不新增方法，要怎麼印出 dog name 呢?<br>…<br>..<br>.</p>
<p><img src="https://imgur.com/i7BFQCv.png" alt="Imgur"></p>
<p>.<br>..<br>…<br>當然是借 cat 的來用囉 😆</p>
<br>

<h1 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h1><p>藉其他物件的函式，改變 this 的對象，用來強制指定 this，這三個的分別可以把他們分成兩組來看<br>call、apply 是指定 this 後直接執行<br>bind 是先指定 this，不會馬上執行，要調用時再加()執行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  name: <span class="string">&#x27;mimi&#x27;</span>,</span><br><span class="line">  printName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bobee&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cat.printName.call(dog); <span class="comment">// bobee</span></span><br><span class="line">cat.printName.apply(dog); <span class="comment">// bobee</span></span><br><span class="line">cat.printName.bind(dog)(); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<p>如此一來就可以順利取得 dog 的 name</p>
<br>

<h2 id="代入參數"><a href="#代入參數" class="headerlink" title="代入參數"></a>代入參數</h2><p>代入參數時使用的方式不太一樣</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">call(物件名稱, 參數<span class="number">1</span>, 參數<span class="number">2</span>); <span class="comment">// 逗號隔開</span></span><br><span class="line">apply(物件名稱, [參數<span class="number">1</span>, 參數<span class="number">2</span>]); <span class="comment">// 用陣列代入</span></span><br><span class="line">bind(物件名稱)(參數<span class="number">1</span>, 參數<span class="number">2</span>); <span class="comment">// 在函式調用代入</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  name: <span class="string">&#x27;mimi&#x27;</span>,</span><br><span class="line">  showAge: <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + num + <span class="string">&#x27;歲&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bobee&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cat.showAge.call(dog, <span class="number">11</span>); <span class="comment">// bobee11歲</span></span><br><span class="line">cat.showAge.apply(dog, [<span class="number">11</span>]); <span class="comment">// bobee11歲</span></span><br><span class="line">cat.showAge.bind(dog)(<span class="number">11</span>); <span class="comment">// bobee11歲</span></span><br></pre></td></tr></table></figure>
<br>
<br>
有了 call、apply、bind 可以確保當前的 this 是誰，避免不小心去連結到全域物件或是不想指向的物件喔！
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>call</tag>
        <tag>apply</tag>
        <tag>bind</tag>
      </tags>
  </entry>
  <entry>
    <title>瀏覽器視窗alert、comfirm、prompt</title>
    <url>/2023/02/09/js-alert-comfirm-prompt/</url>
    <content><![CDATA[<p><img src="https://imgur.com/zI7wsQu.jpg" alt="Imgur"></p>
<p>相信大家都有用過 alert 視窗，除了 alert 其實還有其他的視窗可以使用，<br>JavaScript 提供三個方法 alert(), confirm(), prompt() 讓你可以使用瀏覽器內建的對話視窗。</p>
<a id="more"></a>
<br>
<br>

<h1 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h1><p><code>alert()</code> 跳出提示 (警告) 對話視窗</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&#x27;歡迎來到Lala的前端大補帖&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/klHpYlA.jpg" alt="alert"></p>
<br>
<br>

<h1 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a>confirm()</h1><p><code>confirm()</code> 跳出需要使用者確認的對話視窗，對話視窗中會有確定及取消兩個按鈕</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> check = confirm(<span class="string">&#x27;確認送出？&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (check) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;你按了確定按鈕&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;你按了取消按鈕&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/9Q9PIpE.jpg" alt="confirm"></p>
<br>
<br>

<h1 id="prompt"><a href="#prompt" class="headerlink" title="prompt()"></a>prompt()</h1><p><code>prompt()</code> 跳出需輸入文字的對話視窗</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">prompt(message, <span class="keyword">default</span>);</span><br><span class="line"><span class="keyword">const</span> result = prompt(<span class="string">&#x27;請輸入姓名&#x27;</span>, <span class="string">&#x27;lala&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>第一個參數 message 是給使用者看得提示文字</li>
<li>第二個參數 default 是輸入框中的預設文字</li>
<li>prompt() 執行後會返回使用者輸入的字串 (或得到空字串)，如果使用者按取消按鈕則會返回 <code>null</code></li>
</ul>
<p><img src="https://imgur.com/sa30zZu.jpg" alt="prompt"></p>
<br>
<br>


]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>alert</tag>
        <tag>comfirm</tag>
        <tag>prompt</tag>
      </tags>
  </entry>
  <entry>
    <title>瀏覽器資料儲存-Cookie、LocalStorage、SessionStorage</title>
    <url>/2021/08/16/js-cookie/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>Cookie</th>
<th>LocalStorage</th>
<th>SessionStorage</th>
</tr>
</thead>
<tbody><tr>
<td>資料大小</td>
<td>≤4KB</td>
<td>≥5MB</td>
<td>≥5MB</td>
</tr>
<tr>
<td>生命週期</td>
<td>預設資料失效是關閉瀏覽器，也可以設定失效時間</td>
<td>不會過期，除非手動清除</td>
<td>每次分頁或瀏覽器關掉後就會清除</td>
</tr>
<tr>
<td>與 Server 溝通</td>
<td>每次都會攜帶在 HTTP 中，保存過多數據會帶來效能問題</td>
<td>僅在瀏覽器保存，不參與 Server 溝通</td>
<td>僅在瀏覽器保存，不參與 Server 溝通</td>
</tr>
</tbody></table>
<a id="more"></a>

<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>HTTP cookie（web cookie、browser cookie）為伺服器傳送給使用者瀏覽器的一個小片段資料，通常由伺服器透過 Set-Cookie header 傳遞給瀏覽器。瀏覽器收到後會將 cookie 儲存起來，並在下一次請求回傳 cookie 至相同的伺服器。</p>
<p>可以在後端設定修改，資料僅在本地瀏覽器儲存。可以設定失效時間，預設為關閉瀏覽器。</p>
<p><strong>常見用途</strong><br>Cookie 最常見的用途之一是認證身份，例如帳號登入、購物車、遊戲分數，或任何其他伺服器應該記住的資訊，也被應用於追蹤並分析使用者行為廣告上。Cookie 也被用於客戶端的儲存方式，但由於 cookie 會被附加在每一次的 request 之中，可能會影響效能，所以如果是不需要記錄在 server 的資訊，可以改用 storage API。</p>
<br>

<h1 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h1><p>不會和跟隨 HTTP 請求，所以不會佔用資源，適合儲存較複雜且不敏感的資料<br>需要使用者主動刪除，否則就是永久儲存，不同瀏覽器之間不會共享資料。<br>形式：key → value<br>key 跟 value 必須是字串，如果是 object 或 number 會自動轉換成 string</p>
<p><strong>常見用途</strong><br>而另一方面 localStorage 代替了 Cookie 管理購物車的工作，同時也能勝任其他工作。比如說 HTML 遊戲通常會產生一些數據，localStorage 也很適合使用。</p>
<br>

<h1 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h1><p>臨時儲存，跟 LocalStorage 只差在-每次分頁或瀏覽器關掉後就會清除</p>
<p><strong>常見用途</strong><br>如果遇到一些內容特別多的表單，為了提升用戶體驗，可能要把表單頁面拆分成多個子頁面，然後按照步驟引導用戶。這時候 sessionStorage 就可以發揮出效用。</p>
<br>

<h1 id="安全考慮"><a href="#安全考慮" class="headerlink" title="安全考慮"></a>安全考慮</h1><p>並非所有數據都適合儲存在這些其中。因為只要網站中存在 XSS 注入的風險，打開控制台，就可以隨意修改值，就能對你的 localStorage 肆意妄為。所以千萬不要將敏感數據儲存在這其中。</p>
<br>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="cookie-1"><a href="#cookie-1" class="headerlink" title="cookie"></a>cookie</h2><h3 id="讀取-cookie"><a href="#讀取-cookie" class="headerlink" title="讀取 cookie"></a>讀取 cookie</h3><p>讀取出來是一個很長的字串，字串裡面是所有曾經儲存的 cookie，格式是 key=value，用分號 ; 分隔不同的 cookie。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">allCookies = <span class="built_in">document</span>.cookie;</span><br><span class="line"><span class="built_in">console</span>.log(allCookies);</span><br></pre></td></tr></table></figure>
<p>Cookie 讀取函數<br>內建的方法沒有那麼好用，通常我們會自己寫一個方便讀取個別 cookie 的函數：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCookie</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cookieObj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> cookieAry = <span class="built_in">document</span>.cookie.split(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> cookie;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = cookieAry.length; i &lt; l; ++i) &#123;</span><br><span class="line">    cookie = jQuery.trim(cookieAry[i]);</span><br><span class="line">    cookie = cookie.split(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    cookieObj[cookie[<span class="number">0</span>]] = cookie[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cookieObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookieByName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = parseCookie()[name];</span><br><span class="line">  <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    value = <span class="built_in">decodeURIComponent</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們就可以很方便的讀取 cookie，像是取得 username 的 cookie 只需要用 getCookieByName(‘username’)。</p>
<p>當我們在設定的 value 的時候，可以使用 encodeURIComponent() 這個方法來儲存內容，可以讓特殊符號 $#@*^!,這種轉換成 URI 形式，讓程式解析的時候比較不會出錯 。</p>
<h3 id="寫入-cookie"><a href="#寫入-cookie" class="headerlink" title="寫入 cookie"></a>寫入 cookie</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;cookie3=value3&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = newCookie;</span><br></pre></td></tr></table></figure>
<h3 id="參數設定"><a href="#參數設定" class="headerlink" title="參數設定"></a>參數設定</h3><p>建立 cookie 後面還可以加上這些設定：</p>
<p><strong>path=path</strong><br>設定能讀取到此 cookie 的路徑，例如 ;path=/ 表示讓整個網站都讀取得到，預設為目前網頁所在的路徑。</p>
<p><strong>domain=domain</strong><br>設定能讀取到此 cookie 的網域</p>
<p><strong>max-age=seconds</strong><br>設定 cookie 的存活期限，單位為秒，例如 86400 就是一天後失效。</p>
<p><strong>expires=date-in-GMTString-format</strong><br>設定 cookie 的存活期限，值是一個 Date.toUTCString() 格式的時間字串，這個參數在 HTTP 1.1 之後已經被 max-age 取代。</p>
<p><strong>secure = boolean/null</strong><br>設定 cookie 只能於 https 連線中被傳送。</p>
<p>設定一個新 cookie 只有 key=value 部分是必要的，其他部分都可以省略。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;id=test0; Secure; Path=/; Domain=example.com&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;id=test1; Expires=Wed, 21 Oct 2015 07:28:00 GMT&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;id=test2; Max-Age=2592000&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>當一個 cookie 沒有設定失效時間，就是所謂的 session cookie (有設定失效時間的則稱 persistent cookie)，該 cookie 會在使用者關閉瀏覽器後被自動刪除。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定兩個 cookie 叫 test1, test2</span></span><br><span class="line"><span class="comment">// 在瀏覽器關閉後會自動被刪除</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;test1=Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;test2=World&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定一個 username cookie 裡面的值是 Bobee，儲存一個月</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;username=Bobee; max-age=2592000; path=/&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="刪除-cookie"><a href="#刪除-cookie" class="headerlink" title="刪除 cookie"></a>刪除 cookie</h3><p>單純把你想要那個 cookies 值，設成過期就好<br>例如刪除 username 這一個 cookie：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&#x27;</span>;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="localStorage-1"><a href="#localStorage-1" class="headerlink" title="localStorage"></a>localStorage</h2><p>H5 對於 web storage 的支援很友好，使用方法很簡單</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 獲取指定 key 的本地儲存的值</span></span><br><span class="line"><span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;keyName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 value 儲存到 key 欄位中</span></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;keyName&#x27;</span>, value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除指定 key 的本地儲存的值</span></span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;keyName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除所有的key ,value,慎用，慎用，慎用，會清除所有，會把別的網頁的儲存也刪除</span></span><br><span class="line"><span class="built_in">localStorage</span>.clear();</span><br></pre></td></tr></table></figure>
<br>

<h2 id="sessionStorage-1"><a href="#sessionStorage-1" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p>基本和 localStorage 一樣</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//獲取指定 key 的本地儲存的值</span></span><br><span class="line">sessionStorage.getItem(<span class="string">&#x27;keyName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 value 儲存到 key 欄位中</span></span><br><span class="line">sessionStorage.setItem(<span class="string">&#x27;keyName&#x27;</span>, value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除指定 key 的本地儲存的值</span></span><br><span class="line">sessionStorage.removeItem(<span class="string">&#x27;keyName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除所有的 key, value,慎用，慎用，慎用，會清除所有，會把別的網頁的儲存也刪除</span></span><br><span class="line">sessionStorage.clear();</span><br></pre></td></tr></table></figure>
<br>

<h1 id="Storage-取物件"><a href="#Storage-取物件" class="headerlink" title="Storage 取物件"></a>Storage 取物件</h1><p>雖然我們可以透過 Storage 方法，輕鬆的將資料儲存在本地端，但是實際應用之後，我們會發現我們要儲存的資料 value，全部被轉成字串格式，因此當我們要儲存的資料為一個物件的時候就會產生一個嚴重的問題：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">&#x27;testString&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> number = <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">let</span> array = [<span class="string">&#x27;asd&#x27;</span>, <span class="number">123</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">let</span> object = &#123; <span class="attr">test</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item&#x27;</span>, string);</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item2&#x27;</span>, number);</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item3&#x27;</span>, array);</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item4&#x27;</span>, object);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item&#x27;</span>)); <span class="comment">// testString</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item2&#x27;</span>)); <span class="comment">// 12345</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item3&#x27;</span>)); <span class="comment">// &#x27;asd&#x27;, 123, true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item4&#x27;</span>)); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure>
<p>有幾種方法可以有效避開這種情況，而在本次的課題當中，我們要使用到  <code>JSON</code>  這種資料格式。JSON 全名為 JavaScript Object Notation (Javascript 物件符號)，可以把資料轉成字串型別，方便將資料於網頁與伺服器之間做傳輸，其中包含兩種方法：</p>
<ol>
<li><code>JSON.stringify()</code>：將資料轉為 JSON 格式的字串。</li>
<li><code>JSON.parse(myJSON)</code>：將資料由 JSON 格式字串轉回原本的資料內容及型別。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">&#x27;testString&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> number = <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">let</span> array = [<span class="string">&#x27;asd&#x27;</span>, <span class="number">123</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">let</span> object = &#123; <span class="attr">test</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item&#x27;</span>, <span class="built_in">JSON</span>.stringify(string));</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item2&#x27;</span>, <span class="built_in">JSON</span>.stringify(number));</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item3&#x27;</span>, <span class="built_in">JSON</span>.stringify(array));</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item4&#x27;</span>, <span class="built_in">JSON</span>.stringify(object));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item&#x27;</span>))); <span class="comment">// testString</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item2&#x27;</span>))); <span class="comment">// 12345</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item3&#x27;</span>))); <span class="comment">// (3) [&quot;asd&quot;, 123, true]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item4&#x27;</span>))); <span class="comment">// &#123;test: 1&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://www.fooish.com/javascript/cookie.html">JavaScript Cookie</a><br><a href="https://ithelp.ithome.com.tw/articles/10195522">LocalStorage</a></p>
<hr>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
        <tag>LocalStorage</tag>
        <tag>SessionStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>搞懂JS-什麼是 closure 閉包</title>
    <url>/2021/07/25/js-closure/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/vCMSnlu.png" alt="Imgur"></p>
<p>閉包是由英文的 closure 直接翻譯過來的，所以從字面上看起來，可能也不知道閉包是什麼。</p>
<a id="more"></a>

<p>closure 是函式在與其語彙範疇之外被調用，也仍記得並能夠被存取的能力，可說是指向特定範疇的參考。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line">baz(); <span class="comment">// 2 closure</span></span><br></pre></td></tr></table></figure>
<p>bar() 函式能夠存取 foo 的內層範疇。<br>一般來說我們預期 foo() 的整個內層範疇都會消失，基本上函式離開執行環境時，也會同時將佔用的記憶體空間給釋放出來，但 closure 不會讓這件事發生，foo() 內層的範疇實際上仍在使用，因此不會消失。誰在使用它呢? 就是 bar() 函式本身。</p>
<br/>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  bar(baz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  fn(); <span class="comment">// closure</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們將內層函式 baz 傳給了 bar，並呼叫 bar 的內層函式 fn，包覆 foo() 內層範疇的 closure 就能藉由存取 a 來觀察。</p>
<p>而這些到處傳遞的函式也可以是間接的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn = baz; <span class="comment">// 指定 baz 給全域變數</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(); <span class="comment">// closure</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">bar(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>不管我們使用了何種方法，將一個內層函式運送到其語彙範疇之外，它依然會保留對他原本宣告處的一個範疇參考。</p>
<h1 id="迴圈與-Closure"><a href="#迴圈與-Closure" class="headerlink" title="迴圈與 Closure"></a>迴圈與 Closure</h1><p>closure 最經典的範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們預期它會每秒印出 1、2、3、4、5，但實際上是每秒印出了五次 6!?<br>這是因為 setTimeout 在迴圈結束後才執行，因此每次都會出現 6，那到底我們程式中缺少了什麼呢?</p>
<p>我們想要讓迴圈每次迭代都能在該次迭代進行時捕捉到他自己的 i 的一份拷貝，然而，那些計時器函式全都是在迴圈完成後執行，所有的那五個函式，雖然都是在各自的迴圈迭代中分別定義的，但它們都會覆蓋同一個共同的全域範疇，其中實際上只有一個 i 存在。</p>
<p>我們需要更多已被封閉包圍的範疇，也就是說，每次迭代都需要一個新的 closure scope</p>
<p>解決方式 IIFE：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, j * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用 IIFE 建立專屬範疇，並有自己的變數，來放置每次迭代 i 的一份拷貝</p>
<h1 id="重返區塊範疇"><a href="#重返區塊範疇" class="headerlink" title="重返區塊範疇"></a>重返區塊範疇</h1><p>我們用了 IIFE 來建立專屬每次迭代的新範疇，實際上，我們需要的是各次迭代專屬的區塊範疇。<br>let 宣告會劫持一個區塊，且每次重新宣告變數 i，並將上一次迭代的結果作為這一次的初始值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>區塊範疇和 closure 攜手合作，解決了所有的問題。</p>
<h1 id="模組"><a href="#模組" class="headerlink" title="模組"></a>模組</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoolModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> something = <span class="string">&#x27;cool&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> another = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(something);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doAnother</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(another.join(<span class="string">&#x27;!&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    doSomething: doSomething,</span><br><span class="line">    doAnother: doAnother,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = CoolModule();</span><br><span class="line">foo.doSomething(); <span class="comment">// cool</span></span><br><span class="line">foo.doAnother(); <span class="comment">// 1!2!3</span></span><br></pre></td></tr></table></figure>
<p>模組模式又稱揭露模組(revealing module)，可以將內層函式的資料<code>保持隱藏和私有</code>，調用時只回傳對外公開的 API，<br>這個物件回傳最終會指定給外層變數 foo，就能存取 API 的特性方法，例如 foo.doSomething()</p>
<p>要行使模組模式，有兩個必要條件：</p>
<ol>
<li>必須有一個外層的包含函式，而它必須至少被調用一次(每次都會建立一個新的模組實體)</li>
<li>這個包含函式至少得回傳一個內層函式，如此這個內層函式才能有覆蓋那個私有範疇的 closure，因此得以存取或修改那個私有狀態</li>
</ol>
<p>帶有一個函式特性的物件本身並不是一個真正的模組，從一次函式調用所回傳的物件，如果其上只有資料特性，沒有產生 closure 的函式，那它也不是一個真正的模組。</p>
<p>CoolModule()展示了一個獨立的模組創造器，可以被調用數次，每次都會建立一個新的模組實體。<br>如果只想要單一個實體的時候：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span> <span class="title">CoolModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> something = <span class="string">&#x27;cool&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> another = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(something);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doAnother</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(another.join(<span class="string">&#x27;!&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    doSomething: doSomething,</span><br><span class="line">    doAnother: doAnother,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">foo.doSomething(); <span class="comment">// cool</span></span><br><span class="line">foo.doAnother(); <span class="comment">// 1!2!3</span></span><br></pre></td></tr></table></figure>
<p>模組函式變成了一個 IIFE，即刻調用，並將回傳值直接指定給我們單一個模組實體式別字 foo</p>
<p>模組只是函式，所以能夠接收參數：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoolMoudule</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    identify: identify,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo1 = CoolMoudule(<span class="string">&#x27;foo 1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> foo2 = CoolMoudule(<span class="string">&#x27;foo 2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">foo1.identify(); <span class="comment">// &quot;foo 1&quot;</span></span><br><span class="line">foo2.identify(); <span class="comment">// &quot;foo 2&quot;</span></span><br></pre></td></tr></table></figure>
<p>為公開 API 的回傳物件取個名稱：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span> <span class="title">CoolModule</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// modify the public API</span></span><br><span class="line">    publicAPI.identify = identify2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">identify1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">identify2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id.toUpperCase());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> publicAPI = &#123;</span><br><span class="line">    change: change,</span><br><span class="line">    identify: identify1,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> publicAPI;</span><br><span class="line">&#125;)(<span class="string">&#x27;foo module&#x27;</span>);</span><br><span class="line"></span><br><span class="line">foo.identify(); <span class="comment">// foo module</span></span><br><span class="line">foo.change();</span><br><span class="line">foo.identify(); <span class="comment">// FOO MODULE</span></span><br></pre></td></tr></table></figure>
<p>在模組實體中保留對公開 API 物件的一個內層參考，就能夠從內部修改那個模組實體，包括新增與移除方法和特性，還有變更它們的值。</p>
<hr>
<h3 id="參考書籍：-你不知道的-JS-範疇與-Closures"><a href="#參考書籍：-你不知道的-JS-範疇與-Closures" class="headerlink" title="參考書籍： 你不知道的 JS-範疇與 Closures"></a>參考書籍： 你不知道的 JS-範疇與 Closures</h3><hr>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>closure</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-import &amp; export 怎麼用</title>
    <url>/2021/06/15/js-import-export/</url>
    <content><![CDATA[<p><img src="https://imgur.com/2Auy2fY.jpg" alt="Imgur"></p>
<p>ES6 推出了管理 javascript 模組的語法，透過 import、export 可以將每個檔案視為獨立模組，讓檔案不會過於龐大，且可讀性也比較高，每個系統都有相對的模組，在程式碼的管理與組織方便了許多。</p>
<a id="more"></a>

<p>要在瀏覽器中運行，我們需先在 HTML 加上模組類型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// import要匯入的檔案</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這樣一來，就可以開始做模組管理了！</p>
<h1 id="import-amp-export"><a href="#import-amp-export" class="headerlink" title="import &amp; export"></a>import &amp; export</h1><p>export 可以輸出任何類型的資料，如物件、函式與純值等，輸出又分為 default export、named export 兩種<br>import 是將 export 的檔案匯入，default export、named export 的輸入方式也稍微不太一樣，輸入的數量是沒有限制的</p>
<br>

<h2 id="default-export-預設匯出"><a href="#default-export-預設匯出" class="headerlink" title="default export(預設匯出)"></a>default export(預設匯出)</h2><p>單一輸出名稱，預設使用 export default，每一個檔案只能有一個 export default</p>
<h3 id="1-可以不指定變數名稱"><a href="#1-可以不指定變數名稱" class="headerlink" title="1.可以不指定變數名稱"></a>1.可以不指定變數名稱</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dog <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<h3 id="2-也可以指定變數名稱，-import-裡的名稱可以使用不同的名稱呼叫"><a href="#2-也可以指定變數名稱，-import-裡的名稱可以使用不同的名稱呼叫" class="headerlink" title="2.也可以指定變數名稱， import 裡的名稱可以使用不同的名稱呼叫"></a>2.也可以指定變數名稱， import 裡的名稱<code>可以</code>使用不同的名稱呼叫</h3><p>🔸 預設單筆</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> dog;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> goodDog <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(goodDog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<p>🔸 預設多筆</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; dog, add &#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> goodDog <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(goodDog.dog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="named-export-具名匯出"><a href="#named-export-具名匯出" class="headerlink" title="named export(具名匯出)"></a>named export(具名匯出)</h2><p>多個輸出名稱，需先宣告名稱，在 import 時必須使用一樣名稱才能匯出，即使只匯出一個名稱也需加上中括號{}</p>
<h3 id="1-export-每個宣告"><a href="#1-export-每個宣告" class="headerlink" title="1.export 每個宣告"></a>1.export 每個宣告</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dog &#125; <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>; <span class="comment">// 需加上中括號&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<h3 id="2-在結尾時統一使用物件匯出"><a href="#2-在結尾時統一使用物件匯出" class="headerlink" title="2.在結尾時統一使用物件匯出"></a>2.在結尾時統一使用物件匯出</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; dog, add &#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dog &#125; <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="import-export-全部資料-使用"><a href="#import-export-全部資料-使用" class="headerlink" title="import/export 全部資料 使用*"></a>import/export 全部資料 使用*</h1><p>*代表全部的意思，並賦予一個名稱，就可以呼叫你要的東西囉!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; dog, add &#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myModule <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myModule.dog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="import-無需匯出的檔案"><a href="#import-無需匯出的檔案" class="headerlink" title="import 無需匯出的檔案"></a>import 無需匯出的檔案</h1><p>若想要單純執行某支檔案程式，則不用帶任何名稱引入即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;/export.js&quot;</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>有了 export 跟 import，程式碼可以被模組化，讓系統更好維護提升管理效率，<br>歡迎路過多多指教，一起學習程式吧 😀<br></p>
<hr>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>import</tag>
        <tag>export</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>搞懂JS-什麼是hoisting?</title>
    <url>/2021/06/14/js-hoisting/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/n7k7xaM.jpg" alt="Imgur"></p>
<p>JS 在編譯時，會將宣告的變數、函式都先存放到一個記憶體空間，很像是被提升到最前面，賦值不會跟著被提升，實際運行時，再把值塞進剛剛存放的記憶體空間裡。</p>
<a id="more"></a>

<h1 id="變數提升-Variable-hoisting"><a href="#變數提升-Variable-hoisting" class="headerlink" title="變數提升(Variable hoisting)"></a>變數提升(Variable hoisting)</h1><p>先來看個範例:<br>我 log 了一個從未宣告的變數 dog</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(dog);</span><br></pre></td></tr></table></figure>
<p>會出現 Uncaught ReferenceError: dog is not defined 的錯誤，這非常合理！<br><br><br>那如果先 log 出下面的變數會發生什麼事?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(dog);</span><br><span class="line"><span class="keyword">var</span> dog = <span class="string">&quot;bobee&quot;</span>;</span><br></pre></td></tr></table></figure>
<br>
出現了 undefined！！為什麼不是 ReferenceError: dog is not defined 呢?
<br>
<br>
這是因為宣告的變數先被存放到記憶體空間了，而賦值不會被提升，你可以想成這樣

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dog;</span><br><span class="line"><span class="built_in">console</span>.log(dog);</span><br><span class="line">dog = <span class="string">&quot;bobee&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>注意！var dog 並不是真的被放到最前面，而是<code>記憶體空間</code>先存放了 dog，才會繼續依照執行順序運行程式碼，因此 log 會是 undefined，在執行程式碼之前，記憶體空間會是這樣</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">globle scope: &#123;</span><br><span class="line">  dog: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
在函式裡宣告的變數也會被放到 function scope 的記憶體空間

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">  <span class="keyword">var</span> bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行起來時會像是這樣:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bark;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">  bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="函式提升-Function-hoisting"><a href="#函式提升-Function-hoisting" class="headerlink" title="函式提升(Function hoisting)"></a>函式提升(Function hoisting)</h1><p>函式有分為函式陳述式(具名函式)、函式表達式(匿名函式)兩種，其中函式陳述式會被提升，函式表達式不會被提升，我們來看看範例。</p>
<h2 id="函式陳述式"><a href="#函式陳述式" class="headerlink" title="函式陳述式"></a>函式陳述式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dog();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>結果會是 woof<br>dog()放在函式之前，卻可以 log 出我們要的結果，這是 hoisting 的關係，可以想成這樣</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">&#125;</span><br><span class="line">dog();</span><br></pre></td></tr></table></figure>
<br>

<h2 id="函式表達式"><a href="#函式表達式" class="headerlink" title="函式表達式"></a>函式表達式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dog();</span><br><span class="line"><span class="keyword">var</span> dog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>結果變成 Uncaught TypeError: dog is not a function</p>
<p>這是因為宣告的變數先被提升了，會變成這個樣子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dog;</span><br><span class="line">dog();</span><br><span class="line">dog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我們在呼叫 dog 時還不是個 function，因此會噴出 TypeError 的錯誤<br><br></p>
<h2 id="函式的-hoisting-可以輕易達成遞迴函式"><a href="#函式的-hoisting-可以輕易達成遞迴函式" class="headerlink" title="函式的 hoisting 可以輕易達成遞迴函式"></a>函式的 hoisting 可以輕易達成遞迴函式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">even</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> odd(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">odd</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> even(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">even(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>我們在 even 裡面呼叫 odd，在 odd 裡面也呼叫 even，這種遞迴狀況如果沒有 hoisting 是沒辦法解決的。<br><br></p>
<h1 id="函式與變數同名，函式優先"><a href="#函式與變數同名，函式優先" class="headerlink" title="函式與變數同名，函式優先"></a>函式與變數同名，函式優先</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// fn dog()&#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> dog;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>函式的優先權比變數高，如有多個函式，將會覆蓋前面的</p>
<br>

<h1 id="let-與-const-也有-hoisting"><a href="#let-與-const-也有-hoisting" class="headerlink" title="let 與 const 也有 hoisting"></a>let 與 const 也有 hoisting</h1><p>在上一篇<a href="https://happy9990929.github.io/2021/06/13/js-variable/">var, let, const 概念</a>就有講到， let、const 也是會有 hoisting 的，差別在於提升之後，var 宣告的變數會被初始化為 undefined，而 let 與 const 的宣告不會被初始化為 undefined，而且如果你在「賦值之前」就存取它，就會拋出錯誤。</p>
<p>在「提升之後」以及「賦值之前」這段期間被稱為「暫時死區」（Temporal Dead Zone，TDZ），可以幫助我們養成在變數還沒宣告之前，不要使用他的好習慣，讓程式碼可讀性提高。<br><br><br><br><br>hoisting 的筆記就告一段落，了解正確觀念真的很重要，歡迎路過多多指教，一起學習程式吧 😀<br></p>
<hr>
<h3 id="推薦閱讀：-我知道你懂-hoisting，可是你了解到多深？"><a href="#推薦閱讀：-我知道你懂-hoisting，可是你了解到多深？" class="headerlink" title="推薦閱讀： 我知道你懂 hoisting，可是你了解到多深？"></a>推薦閱讀： <a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting">我知道你懂 hoisting，可是你了解到多深？</a></h3><hr>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>hoisting</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript-Math運算</title>
    <url>/2022/06/27/js-math/</url>
    <content><![CDATA[<p><img src="https://imgur.com/zI7wsQu.jpg" alt="Imgur"><br>寫 Javascript 時有時候會碰到一些小數、數學的運算，這篇歸納了一些常用的 Math 運算</p>
<a id="more"></a>

<h1 id="Math-max"><a href="#Math-max" class="headerlink" title="Math.max()"></a>Math.max()</h1><p>可返回指定的數中帶有較大的值的那個數<br>返回參數中最大的值。如果沒有參數，則返回 -Infinity。<br>如果有某個參數為 NaN，或是不能轉換成數字的非數字值，則返回 NaN。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">5</span>,<span class="number">7</span>) <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">Math</span>.max() <span class="comment">// -Infinity</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="literal">NaN</span>, <span class="number">999</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="Math-min"><a href="#Math-min" class="headerlink" title="Math.min()"></a>Math.min()</h1><p>可返回指定的數中帶有較小的值的那個數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">5</span>,<span class="number">7</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.max() <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="literal">NaN</span>, <span class="number">999</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed()"></a>toFixed()</h1><p>四捨五入 保留兩位小數</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">2.446242342</span>;</span><br><span class="line">num.toFixed(<span class="number">2</span>); <span class="comment">// 2.45</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h1><p>取得亂數</p>
<p><strong>原始回傳0~0.99999(無窮小數)</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random()</span><br></pre></td></tr></table></figure>
<p>值範圍：0 ~ 0.9999999(無窮小數)<br><br/></p>
<p><strong>設定亂數最大值</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> max = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">Math</span>.random() * max</span><br></pre></td></tr></table></figure>
<p>值範圍：0 ~ 2.9999999(無窮小數)<br><br/></p>
<p><strong>設定亂數最小值&amp;最大值</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> max = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> min = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Math</span>.random() * max + min</span><br></pre></td></tr></table></figure>
<p>值範圍：1 ~ 1.9999999(無窮小數)<br><br/></p>
<p><strong>設定亂數整數最小值&amp;最大值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">2</span> + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>值範圍：1 ~ 4 的整數<br><br/></p>
<h1 id="Math-round"><a href="#Math-round" class="headerlink" title="Math.round()"></a>Math.round()</h1><p>四捨五入</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">4.3</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">4.5</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="Math-ceil"><a href="#Math-ceil" class="headerlink" title="Math.ceil()"></a>Math.ceil()</h1><p>取得大於指定數的最小整數值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">1.5</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="Math-floor"><a href="#Math-floor" class="headerlink" title="Math.floor()"></a>Math.floor()</h1><p>取得小於指定數的最大整數值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">1.5</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="千分位"><a href="#千分位" class="headerlink" title="千分位"></a>千分位</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCurrency</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = num.toString().split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  parts[<span class="number">0</span>] = parts[<span class="number">0</span>].replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> parts.join(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Javascript</tag>
        <tag>Math.max</tag>
        <tag>Math.min</tag>
        <tag>toFixed</tag>
        <tag>Math.floor</tag>
        <tag>Math.random</tag>
        <tag>Math.round</tag>
        <tag>Math.ceil</tag>
        <tag>js 無條件進位</tag>
        <tag>js 四捨五入</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-Promise 非同步的解決方案</title>
    <url>/2021/07/29/js-promise/</url>
    <content><![CDATA[<p><img src="https://imgur.com/RuN7HR6.png" alt="Imgur"></p>
<p>由於非同步的程式沒辦法照順序執行，像是 AJAX、setTimeout 都是典型的非同步，ES6 提出了 Promise 的新物件，可以確保非同步處理完畢後，再進行下一步的動作，Promise 就是來解決非同步的程式碼。</p>
<a id="more"></a>

<h1 id="Promise-物件的三種狀態"><a href="#Promise-物件的三種狀態" class="headerlink" title="Promise 物件的三種狀態"></a>Promise 物件的三種狀態</h1><p>在建立 Promise 之前，先來了解 Promise 只會出現以下三種狀態</p>
<ol>
<li>pending 初始狀態 (進行中)</li>
<li>fulfilled 事件已完成，回傳 resolve 的結果</li>
<li>rejected 事件已失敗，回傳 rejected 的結果</li>
</ol>
<p>Promise 狀態的改變只有兩種可能<br>從 pending 變成 fulfilled<br>從 pending 變成 rejected<br>而一但狀態改變就會固定，永遠不會再改變狀態了。</p>
<br>

<h1 id="建立一個-Promise-物件"><a href="#建立一個-Promise-物件" class="headerlink" title="建立一個 Promise 物件"></a>建立一個 Promise 物件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(<span class="string">&#x27;失敗&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li>創建一個新 Promise 構造函數，並代入一個 function</li>
<li>function 代入兩個參數，這兩個參數也是函式，分別為 resolve (執行成功)、reject (執行失敗)</li>
<li>設定 resolve / reject 回傳方法<br>resolve() 執行成功的函式<br>reject() 執行失敗的函式</li>
</ol>
<br>

<h1 id="取得-Promise-結果"><a href="#取得-Promise-結果" class="headerlink" title="取得 Promise 結果"></a>取得 Promise 結果</h1><p>Promise 物件生成後，可以用 Promise 的原型方法來執行取得的結果</p>
<h2 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h2><p>綁定當 fulfilled 或 rejected 狀態時，分別要執行的函數，.then 可傳入兩個參數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 當狀態是 fulfilled (成功) 時，執行這個函數</span></span><br><span class="line">    <span class="comment">// value 是透過 resolve() 傳進來的參數</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 當狀態是 rejected (失敗) 時，執行這個函數</span></span><br><span class="line">    <span class="comment">// error 是透過 reject() 傳進來的參數</span></span><br><span class="line">    <span class="comment">// 此參數選擇性的，不一定需要</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h2><p>綁定當 rejected 狀態時，要執行的函數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="finally"><a href="#finally" class="headerlink" title=".finally()"></a>.finally()</h2><p>不帶有任何參數，表示非同步執行完畢，無論是否正確完成，要執行的函數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">success</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(success);</span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<br>

<h1 id="Chaining-串接"><a href="#Chaining-串接" class="headerlink" title="Chaining 串接"></a>Chaining 串接</h1><p>then、catch 執行後都會返回一個新的 Promise 物件，可以使用鏈接的方式不斷的進行<br>後面的 then 會接收前一個 then 的 return value 當作參數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str + <span class="string">&#x27; 456&#x27;</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str); <span class="comment">// 123456</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<br>

<h1 id="Promise-方法介紹"><a href="#Promise-方法介紹" class="headerlink" title="Promise 方法介紹"></a>Promise 方法介紹</h1><h2 id="Promise-all-iterable"><a href="#Promise-all-iterable" class="headerlink" title="Promise.all(iterable)"></a>Promise.all(iterable)</h2><p>透過陣列的形式傳入多個 promise 函式，Promise.all 會回傳一個陣列，分別有三種情況</p>
<ol>
<li>當引數 iterable 中所有的 promises 都被實現（resolved）</li>
<li>引數 iterable 不含任何 promise 時，被實現</li>
<li>得到一個 rejected 時，第一個被 reject 的值會被傳進回 all Promise 物件的 callback</li>
</ol>
<p>當全部執行完成後回傳陣列結果，陣列的結果順序與傳入的順序一致，適合用在多支 API 要一起執行，並確保全部完成後才進行其他工作時</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">values</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(values); <span class="comment">// [3, 123, &quot;foo&quot;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<h2 id="Promise-race-iterable"><a href="#Promise-race-iterable" class="headerlink" title="Promise.race(iterable)"></a>Promise.race(iterable)</h2><p>透過陣列的形式傳入多個 promise 函式，Promise.race 的結果為第一個最先改變狀態的 Promise 物件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 會顯示 &quot;two&quot;，因為 p2 比較快被 resolve</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<h2 id="Promise-resolve-value"><a href="#Promise-resolve-value" class="headerlink" title="Promise.resolve(value)"></a>Promise.resolve(value)</h2><p>直接定義 Promise 物件 resolve 的狀態，回傳一個 Promise 物件，value 有三種可能</p>
<ol>
<li>value 為具有”then”方法的 Promise，回傳的 promise 將依其結果採取其最終狀態</li>
<li>value 為 promise，呼叫 Promise.resolve 之結果</li>
<li>其他情形都將回傳以 value 實現的 promise</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">&#x27;Success&#x27;</span>).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Fail&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出 &quot;Success&quot;</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="Promise-reject-reason"><a href="#Promise-reject-reason" class="headerlink" title="Promise.reject(reason)"></a>Promise.reject(reason)</h2><p>回傳一個以 reason 拒絕的 Promise 物件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Fail&#x27;</span>)).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Fail&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出 &quot;Fail&quot;</span></span><br></pre></td></tr></table></figure>
<p><br><br><br>有了 Promise 非同步語法，就可以捨棄古早時期使用的 callback hell，變得更清楚直觀，程式碼可讀性更高了 👍</p>
<hr>
<h3 id="參考文獻：-Fooish-程式技術、MDN、卡斯柏’s-blog"><a href="#參考文獻：-Fooish-程式技術、MDN、卡斯柏’s-blog" class="headerlink" title="參考文獻： Fooish 程式技術、MDN、卡斯柏’s blog"></a>參考文獻： <a href="https://www.fooish.com/javascript/ES6/Promise.html">Fooish 程式技術</a>、<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise/all">MDN</a>、<a href="https://wcc723.github.io/development/2020/02/16/all-new-promise/">卡斯柏’s blog</a></h3><hr>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>Javascript</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>var, let, const 變數宣告差別</title>
    <url>/2021/06/13/js-variable/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/W5cIWBE.jpg" alt="Imgur"></p>
<p>ES6 提出的 let 與 const，能讓宣告變數的使用方式、型態可以更謹慎，也會限制 scope 範圍，一起來看看 var, let, const 之間有什麼差異吧！</p>
<a id="more"></a>

<h1 id="var-let-const-的差異"><a href="#var-let-const-的差異" class="headerlink" title="var, let, const 的差異"></a>var, let, const 的差異</h1><table>
<thead>
<tr>
<th></th>
<th>可以被修改</th>
<th>可重複宣告</th>
<th>作用域</th>
<th>hoisting（變量提升）</th>
<th>宣告前存取</th>
</tr>
</thead>
<tbody><tr>
<td>var</td>
<td>✔️ 可以</td>
<td>✔️ 可重複宣告並覆蓋</td>
<td>僅限 funciton</td>
<td>有 hoisting</td>
<td>undefine</td>
</tr>
<tr>
<td>let</td>
<td>✔️ 可以</td>
<td>❌ 不可</td>
<td>block 區塊</td>
<td>有 hoisting + TDZ</td>
<td>ReferenceError</td>
</tr>
<tr>
<td>const</td>
<td>❌ 不可</td>
<td>❌ 不可</td>
<td>block 區塊</td>
<td>有 hoisting + TDZ</td>
<td>ReferenceError</td>
</tr>
</tbody></table>
<h1 id="var"><a href="#var" class="headerlink" title="var"></a>var</h1><p>var 的作用域只有在<code>函式</code>區塊，在 if 或 for 迴圈是沒有作用域的，都會被當成全域使用，如有外部程式跟這些變數名稱相同時，容易發生不可預期的錯誤，或在無意間修改了不想修改的變數</p>
<p>在 var 宣告中會被拆成兩行，變數的宣告會提升，賦值不會提升</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefine</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>等同於</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<br>
再來看看 var 的作用域

<h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">print(); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>在函式中是有作用域的，函式外的 a 不會被覆蓋掉</p>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//2 a被覆蓋掉了</span></span><br></pre></td></tr></table></figure>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>, a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b&quot;</span>, b); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>在 if 跟 for 裡的變數都會被修改，b 在 global 未宣告，卻可以印出數值，證明在這邊是沒有自己的區塊的</p>
<p>如將此改為 let，就可以達到我們要的結果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>, a); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b&quot;</span>, b); <span class="comment">// b is not defined</span></span><br></pre></td></tr></table></figure>
<h2 id="迴圈-非同步"><a href="#迴圈-非同步" class="headerlink" title="迴圈+非同步"></a>迴圈+非同步</h2><p>預期: 印出每秒 1-9 的數字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 10(印了9次)</span></span><br><span class="line">  &#125;, a * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>印出來的是 10，並非我們想要的結果，可以用閉包的方式解決</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(b); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">    &#125;, b * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此一來可以出現我們要的結果，但最簡單的方式還是直接改為 let 就可以輕易的做到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">  &#125;, a * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h1><p>let、const 的作用域都在 block{}區塊，他們兩者最大的不同是<br>let 可以被修改的變數<br>const 不可以被修改的常數，除非是參考值(物件、陣列)</p>
<p>比較特別的是，let、const 有「暫時死區」（Temporal Dead Zone，TDZ）的特性，中文解釋為「時間上暫時無法達到的區域」，如果在宣告變數之前使用變數，這個變數就是存在「暫時死區」中無法存取，可以幫助我們養成在變數還沒宣告之前，不要使用他的好習慣，讓程式碼可讀性提高。<br>那 let、const 會不會有 hoisting 呢?<br>答案是: 有的! let、const 存在變數提升，但是在「提升之後」以及「賦值之前」的 TDZ 之間是不存在的。</p>
<h2 id="物件是參考"><a href="#物件是參考" class="headerlink" title="物件是參考"></a>物件是參考</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure>
<p>const 如果為參考值(by reference)是可以被修改的<br><br><br>ES6 提出的 let 與 const，能讓宣告變數可以更謹慎，也會限制範圍，才不會造成出乎意料的結果。</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>var</tag>
        <tag>let</tag>
        <tag>const</tag>
      </tags>
  </entry>
  <entry>
    <title>2023年度回顧~今年做了哪些事呢</title>
    <url>/2024/01/12/life-2023review/</url>
    <content><![CDATA[<p><img src="https://imgur.com/j6PgHYS.jpg" alt="review"></p>
<p>記錄一下 2023 都做了哪些事情~</p>
<a id="more"></a>
<p><br /><br /></p>
<h1 id="1-六角-Node-js-企業專題班-2月-7月"><a href="#1-六角-Node-js-企業專題班-2月-7月" class="headerlink" title="#1 六角 Node.js 企業專題班-2月~7月"></a>#1 六角 Node.js 企業專題班-2月~7月</h1><p>第一次報了關於後端的課程，雖然我的主要技能在前端，但多了解後端知識會更好與後端溝通，課程專案要做出包含前後台的網站，每天白天做案子，晚上繼續趕課程專案，搞到半夜一兩點都是標配，我們組員都很認真負責，在結業的那天有終於解脫的感覺 <strong>😆</strong><br><br /><br /></p>
<h1 id="2-VoiceTube-Hero-零元挑戰-7月-12月"><a href="#2-VoiceTube-Hero-零元挑戰-7月-12月" class="headerlink" title="#2 VoiceTube Hero 零元挑戰-7月~12月"></a>#2 VoiceTube Hero 零元挑戰-7月~12月</h1><p>看到零元挑戰真的很吸引我，只要在固定時間內上完課就退還學費，等於是上了免費的英文課！！除了上英文影片課，也是第一次與外籍人士一對一家教全程用英文講話。目前還在堅持努力中，已經維持了五個多月，課程一月中結束，應該是會成功的吧哈哈～但最重要的還是養成學習英文的好習慣<br><br /><br /></p>
<h1 id="3-捐髮-30-公分以上"><a href="#3-捐髮-30-公分以上" class="headerlink" title="#3 捐髮 30 公分以上"></a>#3 捐髮 30 公分以上</h1><p>不知道已留了幾年的頭髮，來到差不多過腰的長度，把我的秀髮捐給了「中華民國癌病腫瘤患者扶助協會」，幫助癌友也有漂亮的頭髮~~<strong>🥰</strong> 也讓我吹頭變得很快速<strong>😆</strong><br><br /><br /></p>
<h1 id="4-投保工會"><a href="#4-投保工會" class="headerlink" title="#4 投保工會"></a>#4 投保工會</h1><p>做為一個自由工作者，想要有勞保就要投入工會囉！本來以為會很麻煩所以一直抽不出時間來處理，結果寫個文件後沒幾分鐘就辦好了！<br><br /><br /></p>
<h1 id="5-部落格持續新增"><a href="#5-部落格持續新增" class="headerlink" title="#5 部落格持續新增"></a>#5 部落格持續新增</h1><p>雖然今年一直都很忙，但只要有時間時還是會持續新增文章 😎<br><br /><br /></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>2023 整體來說過得很忙碌但很充實，2024 也立下了一些目標~雖然常常計畫趕不上變化<strong>😆</strong>，還是會努力達成的！</p>
]]></content>
      <categories>
        <category>生活記事</category>
      </categories>
      <tags>
        <tag>2023年度回顧</tag>
      </tags>
  </entry>
  <entry>
    <title>前端數據排序上移、下移、置頂、互換</title>
    <url>/2023/01/14/js-sort/</url>
    <content><![CDATA[<p><img src="https://imgur.com/VDCmPpJ.jpg" alt="Imgur"><br>在前端的專案中，常常會遇到 Javascript 數據需調換順序的功能，在此做個記錄</p>
<a id="more"></a>

<p>data 為一個單純的 Array</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;第一個項目&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;第二個項目&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;第三個項目&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;第四個項目&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;第五個項目&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="上移"><a href="#上移" class="headerlink" title="上移"></a>上移</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clickUp = <span class="function">(<span class="params">idx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (idx === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  data[idx] = data.splice(idx - <span class="number">1</span>, <span class="number">1</span>, data[idx])[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>splice 可刪除從 idx 處開始的零個或多個元素，改變原來的 data，並將被刪除的數組替換到 idx 的位置<br><br><br><br></p>
<h1 id="下移"><a href="#下移" class="headerlink" title="下移"></a>下移</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clickDown = <span class="function">(<span class="params">idx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (idx === data.length - <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  data[idx] = data.splice(idx + <span class="number">1</span>, <span class="number">1</span>, data[idx])[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="置頂"><a href="#置頂" class="headerlink" title="置頂"></a>置頂</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clickTop = <span class="function">(<span class="params">idx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (idx === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  data.unshift(data.splice(idx, <span class="number">1</span>)[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="互換"><a href="#互換" class="headerlink" title="互換"></a>互換</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> change = <span class="function">(<span class="params">idx, idx2</span>) =&gt;</span> &#123;</span><br><span class="line">  data[idx] = data.splice(idx2, <span class="number">1</span>, data[idx])[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="Vue-範例"><a href="#Vue-範例" class="headerlink" title="Vue 範例"></a>Vue 範例</h1><p>這邊用 Vue 來操作上移、下移、置頂、互換，附上 codesandbox</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, idx) in data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; idx + 1 &#125;&#125;. &#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickUp(idx)&quot;</span>&gt;</span>▲<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickDown(idx)&quot;</span>&gt;</span>▼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickTop(idx)&quot;</span>&gt;</span>置頂<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.number&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;change(idx)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> data = reactive([</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;第一個項目&quot;</span>, <span class="attr">number</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;第二個項目&quot;</span>, <span class="attr">number</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;第三個項目&quot;</span>, <span class="attr">number</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;第四個項目&quot;</span>, <span class="attr">number</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;第五個項目&quot;</span>, <span class="attr">number</span>: <span class="number">0</span> &#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clickUp = <span class="function">(<span class="params">idx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (idx === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  data[idx] = data.splice(idx - <span class="number">1</span>, <span class="number">1</span>, data[idx])[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clickDown = <span class="function">(<span class="params">idx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (idx === data.length - <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  data[idx] = data.splice(idx + <span class="number">1</span>, <span class="number">1</span>, data[idx])[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clickTop = <span class="function">(<span class="params">idx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (idx === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  data.unshift(data.splice(idx, <span class="number">1</span>)[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> change = <span class="function">(<span class="params">idx</span>) =&gt;</span> &#123;</span><br><span class="line">  data[idx] = data.splice(data[idx].number - <span class="number">1</span>, <span class="number">1</span>, data[idx])[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<br/>

<iframe src="https://codesandbox.io/embed/sort-eiffpu?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="sort"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript排序</tag>
        <tag>Vue排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Voicetube Hero 零元挑戰-勇敢踏上英文之路</title>
    <url>/2023/08/02/life-hero/</url>
    <content><![CDATA[<p><img src="https://imgur.com/Ik66GPg.jpg" alt="hero"></p>
<p>在今年七月中時報名了 <a href="https://afftck.com/track/clicks/6826/c627c2bf900920d9fa8fec35dc2e9753743940ce71e8e0f1113ff408610c5de8">Voicetube Hero 零元挑戰</a>，為什麼會參加零元挑戰?<br>當然是要好好惡補我的英文😵 從出社會後好像就有點脫離英文了!<br>尤其是轉職當工程師後，很多文件都是英文撰寫，看到都會馬上下意識的點選右鍵翻譯成中文XD<br>想想這樣不行啊~~~結果剛好就看到了這個活動~</p>
<a id="more"></a>
<br/>
<br/>

<h1 id="零元挑戰規則"><a href="#零元挑戰規則" class="headerlink" title="零元挑戰規則"></a>零元挑戰規則</h1><p>零元? 所以是免費學英文嗎?<br><br/></p>
<p>可以說 是 也可以 不是<br><br/></p>
<p>我們需要在指定期限內完成挑戰任務，就可以獲得全額退費</p>
<ul>
<li><p>『影片課挑戰日』需上 1 堂影片課，以及智慧複習單元至少 2 顆星：<br>完課時間定義為當日 23:59（台灣時間GMT+8) 前完成，且持續到挑戰截止日當天。若新課提前上完，則需上完 1 堂完整舊課。智慧複習單元會依據該課的智慧複習單元答題正確率給予對應星等。</p>
</li>
<li><p>『家教課挑戰日』需上 1 堂家教課：<br>家教課完成定義為有準時出席不遲到、未早退、全程有與老師互動應答，若有遲到或早退則視為挑戰失敗。</p>
</li>
</ul>
<p>指定期限可以選擇 <strong>半年</strong> 或 <strong>一年</strong><br>時間其實滿長的，所以要挑戰成功必須要有很毅力，畢竟人家系統也要賺錢XD<br><br/><br><br/></p>
<h1 id="選擇挑戰日"><a href="#選擇挑戰日" class="headerlink" title="選擇挑戰日"></a>選擇挑戰日</h1><p>報名成功之後進入課程系統，就會請挑戰者選擇每周的挑戰日，選了之後就不能改了<br><a href="https://afftck.com/track/clicks/6826/c627c2bf900920d9fa8fec35dc2e9753743940ce71e8e0f1113ff408610c5de8"><img src="https://help.voicetube.com/hc/article_attachments/4414533769369/D__________.jpg"/></a>(圖片取自 hero 官方)</p>
<p>我自己是報了影片+家教課，有家教課的話，下面還會再多一個選擇家教課程的挑戰日<br>影片跟家教課的日期可以重複，<br>不過我覺得這樣太硬了，所以選擇不同天</p>
<br/>
<br/>

<h1 id="Hero-課程系統"><a href="#Hero-課程系統" class="headerlink" title="Hero 課程系統"></a>Hero 課程系統</h1><h2 id="影片課程"><a href="#影片課程" class="headerlink" title="影片課程"></a>影片課程</h2><p><img src="https://imgur.com/NRlhp0h.jpg" alt="hero"><br>報名後過四天即開始挑戰，hero 會依你的程度去給上課的教材，<br>目前我已經上到第 7 課囉！</p>
<br/>
<br/>

<h2 id="家教課程"><a href="#家教課程" class="headerlink" title="家教課程"></a>家教課程</h2><p><img src="https://imgur.com/TJ5e7cb.jpg" alt="hero"><br>家教課程會讓你選擇你上過的影片課程，去做為家教的教課題材，<br>預約時間還滿多的有 6:00~23:00 可選擇，<br>老師目前我看到的都是外籍的，想選亞洲的結果找不到😱<br>在上課前最好先依上課教材準備一下，<br>老師會請你依本課的單字、片語講解意思並且造樣造句，<br>之前第一次試上時不知道要準備，結果卡詞卡了很久😅<br><br/><br><br/></p>
<h2 id="行事曆-amp-其他"><a href="#行事曆-amp-其他" class="headerlink" title="行事曆&amp;其他"></a>行事曆&amp;其他</h2><p><img src="https://imgur.com/FBf6ebb.jpg" alt="hero"><br>行事曆會告訴你今天的挑戰倒數時間，且要在選擇的紅色日期完課，其他天沒上沒有關係<br>其他還有像是收藏筆記、學習紀錄、學習數據等等，功能做的其實還滿完善<br><br/><br><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>Voicetube Hero 零元挑戰開啟我的英文之路，雖然也不知道會不會成功，但就算失敗我是覺得也沒關係，畢竟半年的課程費用其實也不貴，還可以養成學英文的習慣，但是我還是會以成功為目標，希望自己英文可以大大提升 💪<br>半年後再來看看有沒有挑戰成功囉！最後附上我的推薦碼<br>👉 優惠碼<span style='color: #fc6423'> <strong>v_vzyakn</strong> </span><br>用我的優惠碼購買 <a href='https://afftck.com/track/clicks/6826/c627c2bf900920d9fa8fec35dc2e9753743940ce71e8e0f1113ff408610c5de8'>Hero 或 Vclass 課程</a>，都能享有 9 折優惠 ！</p>
<p><a href='https://affclkr.com/track/clicks/6826/ce2bc2bf9a0821deff9cbd2e8d2b891473624acd70ebe3e25826bf036f0659?subid_1=&subid_2=&subid_3=&subid_4=&subid_5=&t=https%3A%2F%2Fhero.voicetube.com'><img src='https://affclkr.com/track/imp/img/139116/ce2bc2bf9a0821deff9cbd2e8d2b891473624acd70ebe3e25826bf036f0659?subid_1=&subid_2=&subid_3=&subid_4=&subid_5=' border='0' width='100%'/></a></p>
]]></content>
      <categories>
        <category>生活記事</category>
      </categories>
      <tags>
        <tag>hero</tag>
        <tag>學英文</tag>
        <tag>Voicetube</tag>
        <tag>零元挑戰</tag>
        <tag>Voicetube Hero</tag>
        <tag>Voicetube Hero 零元挑戰</tag>
      </tags>
  </entry>
  <entry>
    <title>Voicetube Hero 零元挑戰成功後是否會真的退費</title>
    <url>/2024/02/22/life-hero-success/</url>
    <content><![CDATA[<p><img src="https://imgur.com/JcWtUFs.jpg" alt="hero"></p>
<p>在去年七月中時報名了 <a href="https://afftck.com/track/clicks/6826/c627c2bf900920d9fa8fec35dc2e9753743940ce71e8e0f1113ff408610c5de8">Voicetube Hero 零元挑戰</a>，只能說這需要非常有恆心，<br>就算出去玩也要帶著電腦(APP不支援家教課)，就怕回家來不及上英文課😆<br>就在整個半年都不缺席的情況下，我挑戰成功啦～好感動🎉🎉🎉<br>成功了然後呢? 當然是申請退費啦!!</p>
<a id="more"></a>
<br/>

<h1 id="申請退費"><a href="#申請退費" class="headerlink" title="申請退費"></a>申請退費</h1><p>挑戰成功後，申請退費有三個條件</p>
<ol>
<li>上傳要退費的存摺圖片、身分證圖片</li>
<li>在 FB 或 IG 寫下挑戰成功的心得，並 tag 三個人</li>
<li>幫 Hero 的 APP 評分五顆星</li>
</ol>
<p>並需在期限內完成~否則視同放棄唷!<br>附上我的心得，其實可以不用寫這麼多，我比較嘮叨一點😂<br>存摺、身分證、評分我就不放上來了😆</p>
<iframe src="https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Fpermalink.php%3Fstory_fbid%3Dpfbid0DFqBy8S5uge4qnXjQvWNhRA9ixfrWnSXjYUxRQEHP4F7ZrXjqTDdJJHkK8YyzSkel%26id%3D100000141668695&show_text=true&width=500" width="500" height="675" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowfullscreen="true" allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share"></iframe>
<br/>
<br/>

<h1 id="成功退費時間"><a href="#成功退費時間" class="headerlink" title="成功退費時間"></a>成功退費時間</h1><p>我從 01/22 申請成功後，到 02/16 就成功拿到退費了🥳<br>扣掉假日跟年假的話，大概是兩個禮拜的時間~<br><img src="https://imgur.com/NAhIhv7.jpg" alt="hero"><br><br/><br><br/></p>
<h1 id="會推薦-Hero-零元挑戰課程嗎"><a href="#會推薦-Hero-零元挑戰課程嗎" class="headerlink" title="會推薦 Hero 零元挑戰課程嗎"></a>會推薦 Hero 零元挑戰課程嗎</h1><p>首先，我先列出實際我在零元挑戰期間，體驗到哪些優缺點</p>
<h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ul>
<li>Hero 系統有分電腦版、APP 版，如出門不想帶電腦，也可以直接在手機上上課很方便</li>
<li>與外籍老師一對一對話，每次上課可自己選擇老師，家教老師普遍都很有耐心</li>
<li>養成常常接觸英文的好習慣</li>
</ul>
<h2 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h2><ul>
<li>APP 目前只有支援影片課程，家教課僅能用電腦上課</li>
<li>家教老師品質不一定，少數幾次有遇到很混的😅，但大部分是都還不錯</li>
<li>偶爾會遇到系統的 bug 問題，需發 mail 給 Hero 客服證明<br>以下為發生錯誤的內容格式<br>發生時間：<br>使用的裝置：<br>使用的界面：<br>使用的瀏覽器或App版本：<br>第幾課：<br>發生單元：<br>哪個部分發生：<br>使用課程的所在地：<br>發生狀況：</li>
</ul>
<p>整體上完課，我自己的感覺是有進步的，不管是閱讀或是聽力，且變得常接觸英文，絕對是利大於弊！<br>推薦給想學習英文，但卻又有拖延症的人，因為是挑戰，會有不得不達成的壓力，養成學習英文的好習慣。</p>
<p>👉 只要輸入我的優惠碼【<span style='color: #fc6423'> <strong>v_vzyakn</strong> </span>】購買 <a href='https://afftck.com/track/clicks/6826/c627c2bf900920d9fa8fec35dc2e9753743940ce71e8e0f1113ff408610c5de8'>Hero 或 Vclass 課程</a>，都能享有 9 折優惠唷！</p>
<p><a href='https://affclkr.com/track/clicks/6826/ce2bc2bf9a0821deff9cbd2e8d2b891473624acd70ebe3e25826bf036f0659?subid_1=&subid_2=&subid_3=&subid_4=&subid_5=&t=https%3A%2F%2Fhero.voicetube.com'><img src='https://affclkr.com/track/imp/img/139116/ce2bc2bf9a0821deff9cbd2e8d2b891473624acd70ebe3e25826bf036f0659?subid_1=&subid_2=&subid_3=&subid_4=&subid_5=' border='0' width='100%'/></a><br><br/><br/></p>
<h1 id="本站相關文章"><a href="#本站相關文章" class="headerlink" title="本站相關文章"></a>本站相關文章</h1><p>👉 <a href="https://happy9990929.github.io/2023/08/02/life-hero/">Voicetube Hero 零元挑戰-勇敢踏上英文之路</a></p>
]]></content>
      <categories>
        <category>生活記事</category>
      </categories>
      <tags>
        <tag>hero</tag>
        <tag>學英文</tag>
        <tag>Voicetube</tag>
        <tag>零元挑戰</tag>
        <tag>Voicetube Hero</tag>
        <tag>Voicetube Hero 零元挑戰</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE的生命週期</title>
    <url>/2021/03/05/lifecycle-hooks/</url>
    <content><![CDATA[<h1 id="VUE-的生命週期-Lifecycle-Hooks"><a href="#VUE-的生命週期-Lifecycle-Hooks" class="headerlink" title="VUE 的生命週期(Lifecycle Hooks)"></a>VUE 的生命週期(Lifecycle Hooks)</h1><p><strong>setup</strong> =&gt; vue 掛載到 app 上面後執行<br><strong>onBeforeMount</strong> =&gt; DOM 渲染前執行<br><strong>onMounted</strong> =&gt; DOM 渲染完成後執行<br><strong>onBeforeUpdate</strong> =&gt; 資料更新 DOM 更改前執行<br><strong>onUpdated</strong> =&gt; 資料更新 DOM 更改後執行</p>
<a id="more"></a>

<p><strong>onBeforeUnmount</strong> =&gt; 組件銷毀前執行<br><strong>onUnmounted</strong> =&gt; 組件銷毀後執行<br><strong>onErrorCaptured</strong> =&gt; 當組件發出錯誤時後調用<br><strong>onRenderTracked</strong> =&gt; 監控 virtual DOM 重新選染時調用 ( 此事件告訴你操作什麼監聽了組件以及該操作的物件)<br><strong>onRenderTriggered</strong> =&gt; 監控 virtual DOM 重新選染時調用 ( 此事件告訴你操作什麼觸發了重新渲染，以及該操作的物件)</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>生命週期</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB常用工具-Compass GUI 資料庫，Atlas 雲端資料庫</title>
    <url>/2023/12/17/nodeJS-compass-atlas/</url>
    <content><![CDATA[<p><img src="https://imgur.com/uiQYtLf.jpg" alt="nodeJS"></p>
<p>MongoDB 擁有兩個實用工具分別為 Compass 和 Atlas。<br>Compass 提供直觀、有效的數據分析工具，使我們能夠深入了解數據結構並輕鬆進行查詢。Atlas 作為 MongoDB 的托管服務，讓開發人員能夠輕鬆地部署、運營和擴展MongoDB資料庫。本文將介紹這兩者在數據管理中的功能和價值，探討它們如何協助我們更有效地處理和應用數據。</p>
<a id="more"></a>
<br />

<h1 id="Compass-MongoDB-GUI-資料庫可視化軟體"><a href="#Compass-MongoDB-GUI-資料庫可視化軟體" class="headerlink" title="Compass - MongoDB GUI 資料庫可視化軟體"></a>Compass - MongoDB GUI 資料庫可視化軟體</h1><p>MongoDB Compass 是一個用於 MongoDB 資料庫的官方圖形用戶界面(GUI)工具，它可以幫助用戶更輕鬆地管理和操作 MongoDB 資料庫。MongoDB Compass 提供了一個直觀的方式來查詢、編輯、可視化和分析 MongoDB 中的數據。以下是 MongoDB Compass 的主要特點和功能：</p>
<ul>
<li><p><strong>數據瀏覽和查詢：</strong> 允許用戶瀏覽他們的數據集，查詢文檔，並使用一個直觀的用戶界面來構建和執行查詢。用戶可以使用 MongoDB 的查詢語言來檢索需要的數據。</p>
</li>
<li><p><strong>實時數據庫監控：</strong> 提供了一個實時監控面板，用戶可以在其中查看 MongoDB 服務器的運行狀況和性能指標。這有助於識別潛在的性能問題並進行調優。</p>
</li>
<li><p><strong>地理空間數據支持：</strong> 具有對地理空間數據的強大支持，用戶可以查詢和可視化地理信息，這對於需要處理地理空間數據的應用程序非常有用。</p>
</li>
<li><p><strong>集合和文檔管理：</strong> 用戶可以創建、修改和刪除集合和文檔，而無需進入 MongoDB 的命令行界面。</p>
</li>
<li><p><strong>視覺化查詢計劃：</strong> 可以生成查詢的執行計劃，並以可視化的方式顯示。這有助於用戶理解查詢如何在 MongoDB 中執行，並優化其性能。</p>
</li>
<li><p><strong>索引管理：</strong> 允許用戶管理數據庫中的索引，並為查詢性能進行優化</p>
</li>
<li><p><strong>自動完成和代碼生成：</strong> 在查詢編輯器中，提供了自動完成和代碼生成功能，幫助用戶更輕鬆地構建查詢。</p>
</li>
<li><p><strong>文檔驗證和模式探索：</strong> 用戶可以驗證文檔是否符合特定的模式，這在數據質量控制方面很有用。同時，它還可以幫助用戶探索數據集中的模式。</p>
</li>
<li><p><strong>安全性：</strong> 支援 MongoDB 的安全功能，例如訪問控制、用戶驗證等，以確保數據的安全性。</p>
<br />

</li>
</ul>
<h2 id="下載-Compass"><a href="#下載-Compass" class="headerlink" title="下載 Compass"></a><a href="https://www.mongodb.com/">下載 Compass</a></h2><p>在<a href="https://www.mongodb.com/">官網</a>可以點選 Products ⇒ Tools ⇒ Compass 找到，並下載</p>
<p><img src="https://imgur.com/InBZXNp.jpg" alt="nodeJS"></p>
<br />

<p>安裝完後從桌面打開 Compass，<br>輸入你的 DB URI，如沒輸入 URI 預設會是 27017 的 port 號</p>
<p><img src="https://imgur.com/OXzTyHc.jpg" alt="nodeJS"></p>
<br />

<p>接著點擊 Connect 就會開始連接囉!</p>
<p><img src="https://imgur.com/yqOV9Ke.jpg" alt="nodeJS"><br><br /><br /></p>
<h1 id="Altlas-雲端資料庫"><a href="#Altlas-雲端資料庫" class="headerlink" title="Altlas 雲端資料庫"></a>Altlas 雲端資料庫</h1><p>Atlas 是 MongoDB 提供的一個全托管的雲端資料庫服務，旨在讓開發人員能夠輕鬆地部署、運營和擴展 MongoDB 資料庫，無需擔心基礎架構的管理和維護。Atlas 提供了一個方便且易於使用的平台，讓用戶可以專注於應用程序的開發，而不必擔心資料庫的管理和運維。以下是 MongoDB Atlas 的主要特點和功能：</p>
<ul>
<li><p><strong>全托管服務：</strong> Atlas 是一個全托管的資料庫服務，MongoDB 團隊會負責管理硬體、軟體和基礎架構。這樣的設計使得用戶不需要擔心伺服器的設置、配置、升級和維護。</p>
</li>
<li><p><strong>自動擴展和調優：</strong> 可以自動擴展以應對數據量的增加，並且能夠自動調優以提供最佳的性能。這消除了擴展和性能優化方面的煩惱。</p>
</li>
<li><p><strong>高可用性和容錯性：</strong> 提供了高可用性的配置，包括數據複製和自動故障轉移，確保您的應用程序在發生故障時能夠繼續運行。</p>
</li>
<li><p><strong>安全性：</strong> 提供多層次的安全性功能，包括數據加密、身份驗證、訪問控制等，以確保您的數據得到保護。</p>
</li>
<li><p><strong>地理分佈：</strong> 支持多個地區的部署，這意味著您可以將數據部署在不同的地理位置以滿足地區性要求。</p>
</li>
<li><p><strong>備份和恢復：</strong> 提供定期的自動備份和恢復功能，您可以輕鬆地回復到以前的數據狀態。</p>
</li>
<li><p><strong>監控和警報：</strong> 提供了監控和警報功能，您可以實時監控數據庫的性能和狀態，並在需要時接收警報。</p>
</li>
<li><p><strong>可視化管理界面：</strong> 提供了一個直觀的管理界面，用於設置、配置和監控資料庫。<br><br /><br /></p>
</li>
</ul>
<h2 id="註冊-Altlas"><a href="#註冊-Altlas" class="headerlink" title="註冊 Altlas"></a>註冊 <a href="https://www.mongodb.com/cloud/atlas/register">Altlas</a></h2><h2 id="1-本站註冊或是第三方登入註冊，並同意隱私權政策及服務條款"><a href="#1-本站註冊或是第三方登入註冊，並同意隱私權政策及服務條款" class="headerlink" title="1. 本站註冊或是第三方登入註冊，並同意隱私權政策及服務條款"></a>1. 本站註冊或是第三方登入註冊，並同意隱私權政策及服務條款</h2><p><img src="https://imgur.com/wGAvPG8.jpg" alt="Altlas"><br><br /></p>
<h2 id="2-填寫使用目的"><a href="#2-填寫使用目的" class="headerlink" title="2. 填寫使用目的"></a>2. 填寫使用目的</h2><p><img src="https://imgur.com/EKHTIs2.jpg" alt="Altlas"><br><br /></p>
<h2 id="3-選用推薦的地區"><a href="#3-選用推薦的地區" class="headerlink" title="3. 選用推薦的地區"></a>3. 選用推薦的地區</h2><p>可直接選擇系統建議的主機位置，接著 Create<br><img src="https://imgur.com/YZxGYos.jpg" alt="Altlas"><br><br /></p>
<h2 id="4-建立-DB-的-username、password"><a href="#4-建立-DB-的-username、password" class="headerlink" title="4. 建立 DB 的 username、password"></a>4. 建立 DB 的 username、password</h2><p><img src="https://imgur.com/0NoUk34.jpg" alt="Altlas"><br>接著 Create User<br><br /></p>
<h2 id="5-註冊完成"><a href="#5-註冊完成" class="headerlink" title="5. 註冊完成"></a>5. 註冊完成</h2><p>點擊 Database 後可以看到你已經有一個 Cluster0 的 Database 了</p>
<p><img src="https://imgur.com/IM14xnW.jpg" alt="Altlas"></p>
<hr>
<h1 id="Altas-整合-compass-流程"><a href="#Altas-整合-compass-流程" class="headerlink" title="Altas 整合 compass 流程"></a>Altas 整合 compass 流程</h1><h2 id="1-設定-IP-位置"><a href="#1-設定-IP-位置" class="headerlink" title="1. 設定 IP 位置"></a>1. 設定 IP 位置</h2><p><img src="https://imgur.com/koVEqEw.jpg" alt="Altlas"><br><br /></p>
<h2 id="2-選擇連線方法"><a href="#2-選擇連線方法" class="headerlink" title="2. 選擇連線方法"></a>2. 選擇連線方法</h2><p>點 Database =&gt; connect</p>
<p><img src="https://imgur.com/OuxwV9S.jpg" alt="Altlas"><br><br /></p>
<p>選擇連接 Compass</p>
<p><img src="https://imgur.com/pYauiwo.jpg" alt="Altlas"><br><br /></p>
<p>複製 mongodb 路徑</p>
<p><img src="https://imgur.com/qDlrHWj.jpg" alt="Altlas"><br><br /></p>
<h2 id="3-到-Compass-將路徑貼上"><a href="#3-到-Compass-將路徑貼上" class="headerlink" title="3. 到 Compass 將路徑貼上"></a>3. 到 Compass 將路徑貼上</h2><p>並將下面的&lt;password&gt;改成自己設定的密碼</p>
<p><img src="https://imgur.com/7jmKPhv.jpg" alt="Compass"><br><br /></p>
<p>點擊 Connect 後，Compass 就會成功連接 DB 囉!<br><img src="https://imgur.com/S88ABw4.jpg" alt="Compass"></p>
<p><br/><br/></p>
<h1 id="本站相關文章"><a href="#本站相關文章" class="headerlink" title="本站相關文章"></a>本站相關文章</h1><p>👉 <a href="https://happy9990929.github.io/2023/11/22/nodeJS-mongodb-install/">MongoDB 安裝與介紹，什麼是 MongoDB</a><br>👉 <a href="https://happy9990929.github.io/2023/09/18/nodeJS-initial/">用 Node.js 執行 JavaScript 環境，Node.js 後端開發第一步</a><br>👉 <a href="https://happy9990929.github.io/2023/09/20/nodeJS-module/">三分鐘了解 Node.js 模組原理：import 與 export 的運作</a><br>👉 <a href="https://happy9990929.github.io/2023/09/22/nodeJS-module-http/">Node.js HTTP 模組 | 建立強大的伺服器端應用程式</a><br><br/><br/></p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>Compass</tag>
        <tag>Atlas</tag>
        <tag>MongoDB Compass教學</tag>
        <tag>MongoDB Atlas教學</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Node.js 執行 JavaScript 環境，Node.js 後端開發第一步</title>
    <url>/2023/09/18/nodeJS-initial/</url>
    <content><![CDATA[<p><img src="https://imgur.com/UsPSA1J.jpg" alt="nodeJS"></p>
<p>Node.js 是一個開源且跨平台的運行時環境，讓我們能夠在伺服器端運行 JavaScript 應用程式。<br>這讓前端工程師不僅能在瀏覽器中運行 JavaScript，還可以在伺服器上運行相同的語言，實現全端開發的夢想。<br>我們將介紹如何在 Node.js 環境中執行 JavaScript 檔案，之後會再深入了解 node 命令以及常見的檔案路徑操作。</p>
<a id="more"></a>
<br />

<h1 id="Node-js-執行-JavaScript-起手式"><a href="#Node-js-執行-JavaScript-起手式" class="headerlink" title="Node.js 執行 JavaScript 起手式"></a>Node.js 執行 JavaScript 起手式</h1><h2 id="1-撰寫-JavaScript-檔案"><a href="#1-撰寫-JavaScript-檔案" class="headerlink" title="1. 撰寫 JavaScript 檔案"></a>1. 撰寫 JavaScript 檔案</h2><p>用 VS Code 開啟一個新專案，並新增檔案 app.js<br>app.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;good!&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br />

<h2 id="2-開啟-Terminal-輸入指令"><a href="#2-開啟-Terminal-輸入指令" class="headerlink" title="2. 開啟 Terminal 輸入指令"></a>2. 開啟 Terminal 輸入指令</h2><p>每次修改都需執行該指令</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<br />

<p>在 Terminal 出現 good! 字串就代表成功了！<br /></p>
<p><img src="https://imgur.com/NqB8809.jpg" alt="nodeJS"></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>後端開發跟前端明顯不一樣的地方是，前端可以看到畫面，但後端結果會是在 Terminal 中顯示，<br>在後端我們會常常使用 Terminal、postman 來操作，<br>不過因為 Node.js 是在 JavaScript 環境中運行，所以前端工程師也可以很容易上手！</p>
<h1 id="本站相關文章"><a href="#本站相關文章" class="headerlink" title="本站相關文章"></a>本站相關文章</h1><p>👉 <a href="https://happy9990929.github.io/2023/09/20/nodeJS-module/">三分鐘了解 Node.js 模組原理：import 與 export 的運作</a><br>👉 <a href="https://happy9990929.github.io/2023/09/22/nodeJS-module-http/">Node.js HTTP 模組 | 建立強大的伺服器端應用程式</a><br>👉 <a href="https://happy9990929.github.io/2021/02/08/nodeJS-update/">Node.js 與 npm 更新的方式</a></p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>node.js執行</tag>
      </tags>
  </entry>
  <entry>
    <title>LINE LIFF 功能介紹教學，綁定用戶資料，傳送分享訊息</title>
    <url>/2022/12/06/line-liff/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PG4oeoN.jpg" alt="Imgur"></p>
<h1 id="什麼是LINE-LIFF？"><a href="#什麼是LINE-LIFF？" class="headerlink" title="什麼是LINE LIFF？"></a><strong>什麼是LINE LIFF？</strong></h1><p>LIFF 是一種可以在 Line 中直接操作網頁的平台，全名為 LINE Front-end Framework，是 LINE 的前端框架。能取得用戶的唯一辨識碼 UserId、公開資料，這讓用戶可以不必手動輸入資料，就可以直接綁定用戶在 LINE 的個人資料，除此之外，還有傳送訊息、分享訊息給好友的功能，下面將會一一介紹</p>
<a id="more"></a>

<p>使用 LIFF 前請先在 <a href="https://developers.line.biz/console">LINE LIFF 後台</a> 建立 LINE Login<br><br><br><br></p>
<h1 id="安裝-LIFF-SDK"><a href="#安裝-LIFF-SDK" class="headerlink" title="安裝 LIFF SDK"></a>安裝 LIFF SDK</h1><p>依自己喜好引入 LIFF SDK</p>
<p>CDN</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://static.line-scdn.net/liff/edge/2/sdk.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>NPM</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm i @line/liff</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="LIFF-初始化"><a href="#LIFF-初始化" class="headerlink" title="LIFF 初始化"></a><strong><strong>LIFF 初始化</strong></strong></h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a><strong><strong>init</strong></strong></h2><p>開始寫 LIFF 的程式時，第一步要先 init 初始化，需要帶入 LIFF ID，LIFF ID 預設為 null</p>
<p>在 LIFF 後台的地方會顯示 LIFF ID</p>
<p><img src="https://imgur.com/6tTy5Ce.jpg" alt="liffID.jpg"></p>
<p>init 後才可以開始使用 LIFF 的各項函式</p>
<p>由於需要 init 後才能執行其他動作，所以是使用 Promise，之後要執行的程式再寫在 then 裡面</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> liff <span class="keyword">from</span> <span class="string">&#x27;@line/liff&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> liffId = <span class="string">&#x27;1657706202-XXXXXXXX&#x27;</span>;</span><br><span class="line"></span><br><span class="line">liff.init(&#123;</span><br><span class="line">  liffId: liffId</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;LIFF init&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 這邊開始寫使用其他功能</span></span><br><span class="line"></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<p>或是也可使用 <code>ready</code> 來執行接下來的動作，liff.ready 為 LIFF SDK 提供的屬性，也是一個 Promise 物件，會在 liff.init 完成後執行</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.init(&#123;</span><br><span class="line">  liffId: liffId</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">liff.ready.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 這邊開始寫使用其他功能</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br>

<p>當然，你也可以使用 <code>async</code> <code>await</code> 的方式，並用 <code>try catch</code> 除錯</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> liffInit = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> liffId = <span class="string">&#x27;1657706202-XXXXXXXX&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> liff.init(&#123; <span class="attr">liffId</span>: liffId &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這邊開始寫使用其他功能</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    alert(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="LIFF-取得環境資訊"><a href="#LIFF-取得環境資訊" class="headerlink" title="LIFF 取得環境資訊"></a><strong><strong>LIFF 取得環境資訊</strong></strong></h1><h2 id="liff-getOS"><a href="#liff-getOS" class="headerlink" title="liff.getOS()"></a>liff.getOS()</h2><p>取得使用者作業系統：ios (iOS 或 iPadOS)、android、web(非 ios、android 的作業系統)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> OS = liff.getOS();</span><br><span class="line"><span class="comment">// ios || android || web</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-getLanguage"><a href="#liff-getLanguage" class="headerlink" title="liff.getLanguage()"></a>liff.getLanguage()</h2><p>頁面中的語系（lang）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> language = liff.getLanguage();</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-getVersion"><a href="#liff-getVersion" class="headerlink" title="liff.getVersion()"></a>liff.getVersion()</h2><p>LIFF SDK 的版本</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> version = liff.getVersion();</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-getLineVersion"><a href="#liff-getLineVersion" class="headerlink" title="liff.getLineVersion()"></a>liff.getLineVersion()</h2><p>使用者的 LINE 版本</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lineVersion = liff.getLineVersion();</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-getContext"><a href="#liff-getContext" class="headerlink" title="liff.getContext()"></a>liff.getContext()</h2><p>使用者功能相關資訊、liffId</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> context = liff.getContext();</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-isInClient"><a href="#liff-isInClient" class="headerlink" title="liff.isInClient()"></a>liff.isInClient()</h2><p>目前 LIFF 是否在 LINE App 中開啟</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isInClient = liff.isInClient();</span><br><span class="line"><span class="comment">// true || false</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-isLoggedIn"><a href="#liff-isLoggedIn" class="headerlink" title="liff.isLoggedIn()"></a>liff.isLoggedIn()</h2><p>使用者是否登入 LINE 帳號</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoggedIn = liff.isLoggedIn();</span><br><span class="line"><span class="comment">// true || false</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-isApiAvailable"><a href="#liff-isApiAvailable" class="headerlink" title="liff.isApiAvailable()"></a><strong><strong>liff.isApiAvailable()</strong></strong></h2><p>確認目前環境是否可以使用 API</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (liff.isApiAvailable(<span class="string">&#x27;shareTargetPicker&#x27;</span>)) &#123;</span><br><span class="line">  liff.shareTargetPicker([</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      text: <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">    .then(</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;ShareTargetPicker was launched&quot;</span>)</span><br><span class="line">    ).catch(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Failed to launch ShareTargetPicker&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="LIFF-驗證"><a href="#LIFF-驗證" class="headerlink" title="LIFF 驗證"></a>LIFF 驗證</h1><h2 id="liff-login"><a href="#liff-login" class="headerlink" title="liff.login()"></a><strong><strong>liff.login()</strong></strong></h2><p>登入 LIFF</p>
<p>登入、登出 LINE 的功能只能在外部瀏覽器時有作用，</p>
<p>在 LIFF 瀏覽器中，liff.init 後會自動登入</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.login();</span><br></pre></td></tr></table></figure>
<p>登入成功後會導向 LIFF 後台的 Endpoint URL</p>
<p><img src="https://imgur.com/AhCHgoH.jpg" alt="endpoint.jpg"><br><br></p>
<h2 id="liff-logout"><a href="#liff-logout" class="headerlink" title="liff.logout()"></a><strong><strong>liff.logout()</strong></strong></h2><p>登出 LIFF</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.logout();</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-getAccessToken"><a href="#liff-getAccessToken" class="headerlink" title="liff.getAccessToken()"></a><strong><strong>liff.getAccessToken()</strong></strong></h2><p>取得 access token</p>
<p>access token 在發出後 12 小時內有效。 當用戶關閉應用程序時，access token 將被撤銷。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> accessToken = liff.getAccessToken();</span><br><span class="line"><span class="keyword">if</span> (accessToken) &#123;</span><br><span class="line">  fetch(<span class="string">&quot;https://api...&quot;</span>, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">      Authorization: <span class="string">`Bearer <span class="subst">$&#123;accessToken&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-getIDToken"><a href="#liff-getIDToken" class="headerlink" title="liff.getIDToken()"></a><strong><strong>liff.getIDToken()</strong></strong></h2><p>取得 LIFF ID token</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.init(&#123;</span><br><span class="line">  liffId: <span class="string">&quot;123456-abcedfg&quot;</span>, <span class="comment">// Use own liffId</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> idToken = liff.getIDToken();</span><br><span class="line">  <span class="built_in">console</span>.log(idToken); <span class="comment">// print raw idToken object</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-getDecodedIDToken"><a href="#liff-getDecodedIDToken" class="headerlink" title="liff.getDecodedIDToken()"></a><strong><strong>liff.getDecodedIDToken()</strong></strong></h2><p>解碼 ID token 的資料</p>
<p>可取得使用者的 email、token 到期日、暱稱、頭像</p>
<p>後台 Basic settings 的 Email address permission 需 Applied</p>
<p>LIFF 的設定，Scopes 的「email*」要打勾</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff</span><br><span class="line">  .init(&#123;</span><br><span class="line">    liffId: <span class="string">&quot;123456-abcedfg&quot;</span>, <span class="comment">// Use own liffId</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> idToken = liff.getDecodedIDToken();</span><br><span class="line">    <span class="built_in">console</span>.log(idToken); <span class="comment">// print decoded idToken object</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-permission-query"><a href="#liff-permission-query" class="headerlink" title="liff.permission.query()"></a><strong><strong>liff.permission.query()</strong></strong></h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.permission.query(<span class="string">&quot;profile&quot;</span>).then(<span class="function">(<span class="params">permissionStatus</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// permissionStatus = &#123; state: &#x27;granted&#x27; &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-permission-requestAll"><a href="#liff-permission-requestAll" class="headerlink" title="liff.permission.requestAll()"></a><strong><strong>liff.permission.requestAll()</strong></strong></h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.permission.query(<span class="string">&quot;profile&quot;</span>).then(<span class="function">(<span class="params">permissionStatus</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (permissionStatus.state === <span class="string">&quot;prompt&quot;</span>) &#123;</span><br><span class="line">    liff.permission.requestAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="LIFF-取得使用者公開資料"><a href="#LIFF-取得使用者公開資料" class="headerlink" title="LIFF 取得使用者公開資料"></a><strong><strong>LIFF 取得使用者公開資料</strong></strong></h1><h2 id="liff-getProfile"><a href="#liff-getProfile" class="headerlink" title="liff.getProfile()"></a>liff.getProfile()</h2><p>可取得 userId、暱稱、頭像路徑、狀態消息。</p>
<p>LIFF 後台的「Scopes」要設定開啟 profile, openid</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> profile = liff.getProfile()</span><br></pre></td></tr></table></figure>
<p>回應的值有以下：</p>
<ul>
<li><code>userId</code>: “123456789…”</li>
<li><code>displayName</code>: “Lala”</li>
<li><code>pictureUrl</code>: “<a href="https://profile.line-scdn.net/abcdefghijklmn">https://</a>xxxx.com”</li>
<li><code>statusMessage</code>: “LIFF is great！”</li>
</ul>
<br>

<h2 id="liff-getFriendship"><a href="#liff-getFriendship" class="headerlink" title="liff.getFriendship()"></a><strong><strong>liff.getFriendship()</strong></strong></h2><p>獲取用戶與 LINE 官方帳號是否為好友狀態</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.getFriendship().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (data.friendFlag) &#123;</span><br><span class="line">    <span class="comment">// something you want to do</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="開啟、關閉-LIFF-視窗"><a href="#開啟、關閉-LIFF-視窗" class="headerlink" title="開啟、關閉 LIFF 視窗"></a><strong><strong>開啟、關閉 LIFF 視窗</strong></strong></h1><h2 id="liff-openWindow"><a href="#liff-openWindow" class="headerlink" title="liff.openWindow()"></a><strong><strong>liff.openWindow()</strong></strong></h2><p>開啟 LIFF 視窗</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.openWindow(&#123;</span><br><span class="line">  url: <span class="string">&quot;https://line.me&quot;</span>,</span><br><span class="line">  external: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>url</code>：網址連結，必填</li>
<li><code>external</code>：是否允許外部瀏覽器開啟，預設 <code>false</code></li>
</ul>
<br>

<h2 id="liff-closeWindow"><a href="#liff-closeWindow" class="headerlink" title="liff.closeWindow()"></a><strong><strong>liff.closeWindow()</strong></strong></h2><p>關閉 LIFF 視窗</p>
<p>關閉 LIFF 的功能只能在 LINE App 開啟 LIFF 的狀況下才有作用。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.closeWindow();</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="LIFF-傳送訊息"><a href="#LIFF-傳送訊息" class="headerlink" title="LIFF 傳送訊息"></a><strong><strong>LIFF 傳送訊息</strong></strong></h1><h2 id="liff-sendMessages"><a href="#liff-sendMessages" class="headerlink" title="liff.sendMessages()"></a><strong><strong>liff.sendMessages()</strong></strong></h2><p>傳給打開這個 LIFF 的當下群組、好友、機器人、LINE@</p>
<p>這個傳訊息功能，後台的「chat_message.write」必須要打勾才能使用。</p>
<p>在外部瀏覽器無法使用此功能，要用 LINE App 內開啟 LIFF 才能用。</p>
<p>使用者在登入 LINE 帳號時，「傳送訊息至聊天室」這項必須要是「許可」的才能使用。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.sendMessages([</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">    text: <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-shareTargetPicker"><a href="#liff-shareTargetPicker" class="headerlink" title="liff.shareTargetPicker()"></a><strong><strong>liff.shareTargetPicker()</strong></strong></h2><p>傳給指定好友、群組</p>
<p>這個傳訊息功能，後台的「shareTargetPicker」必須要打勾才能使用。</p>
<p>使用者在登入 LINE 帳號時，「傳送訊息至聊天室」這項必須要是「許可」的才能使用。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.shareTargetPicker(</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      text: <span class="string">&quot;Hello, World!&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  &#123;</span><br><span class="line">    isMultiple: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 發送成功後要做的事</span></span><br><span class="line"></span><br><span class="line">	&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">	  <span class="built_in">console</span>.log(<span class="string">&#x27;something wrong happen&#x27;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>isMultiple</code>：是否可以多選</li>
</ul>
<p>不管是 sendMessages 或 shareTargetPicker 訊息的表現都支援多種方式</p>
<ul>
<li>文字訊息 (Text message)</li>
<li>貼圖訊息 (Sticker message)</li>
<li>圖片訊息 (Image message)</li>
<li>影片訊息 (Video message)</li>
<li>音檔訊息 (Audio message)</li>
<li>位置訊息 (Location message)</li>
<li>模板訊息 (Template message)</li>
<li>Flex 訊息 (Flex Message)</li>
</ul>
<h3 id="文字訊息-Text-message"><a href="#文字訊息-Text-message" class="headerlink" title="文字訊息 (Text message)"></a>文字訊息 (Text message)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;Hello, world&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;$ LINE emoji $&quot;</span>,</span><br><span class="line">  <span class="string">&quot;emojis&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">&quot;productId&quot;</span>: <span class="string">&quot;5ac1bfd5040ab15980c9b435&quot;</span>,</span><br><span class="line">      <span class="string">&quot;emojiId&quot;</span>: <span class="string">&quot;001&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;index&quot;</span>: <span class="number">13</span>,</span><br><span class="line">      <span class="string">&quot;productId&quot;</span>: <span class="string">&quot;5ac1bfd5040ab15980c9b435&quot;</span>,</span><br><span class="line">      <span class="string">&quot;emojiId&quot;</span>: <span class="string">&quot;002&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>type</code>(String) ：類型 (必填)</li>
<li><code>text</code>(String) ：文字  (必填)，最多5000字<strong>，</strong>可包含 emojis</li>
<li><code>emojis</code> ：最多 20 個<ul>
<li><code>index</code>：位置索引</li>
<li><code>productId</code>(String)：Product ID</li>
<li><code>emojiId</code>(String)：Emoji ID</li>
</ul>
</li>
</ul>
<p><code>productId</code>、<code>emojiId</code> 可參考<a href="https://developers.line.biz/en/docs/messaging-api/emoji-list/">List of available LINE emojis</a></p>
<br>

<h3 id="貼圖訊息-Sticker-message"><a href="#貼圖訊息-Sticker-message" class="headerlink" title="貼圖訊息 (Sticker message)"></a>貼圖訊息 (Sticker message)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;sticker&quot;</span>,</span><br><span class="line">  <span class="string">&quot;packageId&quot;</span>: <span class="string">&quot;446&quot;</span>,</span><br><span class="line">  <span class="string">&quot;stickerId&quot;</span>: <span class="string">&quot;1988&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>type</code> (String)：類型 (必填)</li>
<li><code>packageId</code>(String) ：Package ID  (必填)</li>
<li><code>stickerId</code> (String)：Sticker ID  (必填)</li>
</ul>
<p><code>packageId</code>、<code>stickerId</code> 可參考 <strong><a href="https://developers.line.biz/en/docs/messaging-api/sticker-list/">List of available stickers</a></strong></p>
<br>

<h3 id="圖片訊息-Image-message"><a href="#圖片訊息-Image-message" class="headerlink" title="圖片訊息 (Image message)"></a>圖片訊息 (Image message)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image&quot;</span>,</span><br><span class="line">  <span class="string">&quot;originalContentUrl&quot;</span>: <span class="string">&quot;https://example.com/original.jpg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;previewImageUrl&quot;</span>: <span class="string">&quot;https://example.com/preview.jpg&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>type</code>(String)：類型 (必填)</li>
<li><code>originalContentUrl</code>(String) ：圖片路徑 JPG、JPEG、PNG，文件最大 10 MB (必填)</li>
<li><code>previewImageUrl</code>(String)：縮圖路徑 JPG、JPEG、PNG，文件最大 1 MB (必填)</li>
</ul>
<br>

<h3 id="影片訊息-Video-message"><a href="#影片訊息-Video-message" class="headerlink" title="影片訊息 (Video message)"></a>影片訊息 (Video message)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;video&quot;</span>,</span><br><span class="line">  <span class="string">&quot;originalContentUrl&quot;</span>: <span class="string">&quot;https://example.com/original.mp4&quot;</span>,</span><br><span class="line">  <span class="string">&quot;previewImageUrl&quot;</span>: <span class="string">&quot;https://example.com/preview.jpg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;trackingId&quot;</span>: <span class="string">&quot;track-id&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>type</code>(String)：類型 (必填)</li>
<li><code>originalContentUrl</code>(String)：影片路徑 mp4，文件最大 200 MB (必填)</li>
<li><code>previewImageUrl</code>(String)：縮圖路徑 JPG、JPEG、PNG，文件最大 1 MB (必填)</li>
<li><code>trackingId</code>(String)：用戶播完影片後，用於識別影片的 ID</li>
</ul>
<br>

<h3 id="音檔訊息-Audio-message"><a href="#音檔訊息-Audio-message" class="headerlink" title="音檔訊息 (Audio message)"></a>音檔訊息 (Audio message)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;audio&quot;</span>,</span><br><span class="line">  <span class="string">&quot;originalContentUrl&quot;</span>: <span class="string">&quot;https://example.com/original.m4a&quot;</span>,</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: <span class="number">60000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>type</code>(String)：類型 (必填)</li>
<li><code>originalContentUrl</code>(String)：音檔路徑 m4a，文件最大 200 MB (必填)</li>
<li><code>duration</code>：音檔長度毫秒(必填)</li>
</ul>
<br>

<h3 id="位置訊息-Location-message"><a href="#位置訊息-Location-message" class="headerlink" title="位置訊息 (Location message)"></a>位置訊息 (Location message)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;location&quot;</span>,</span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;my location&quot;</span>,</span><br><span class="line">  <span class="string">&quot;address&quot;</span>: <span class="string">&quot;1-6-1 Yotsuya, Shinjuku-ku, Tokyo, 160-0004, Japan&quot;</span>,</span><br><span class="line">  <span class="string">&quot;latitude&quot;</span>: <span class="number">35.687574</span>,</span><br><span class="line">  <span class="string">&quot;longitude&quot;</span>: <span class="number">139.72922</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>type</code>(String)：類型 (必填)</li>
<li><code>title</code>(String)：標題，最多 100 字元</li>
<li><code>address</code>(String)：地址，最多 100 字元</li>
<li><code>latitude</code>(Decimal**)**：緯度</li>
<li><code>longitude</code>(Decimal**)**：經度</li>
</ul>
<br>

<h3 id="模板訊息-Template-message"><a href="#模板訊息-Template-message" class="headerlink" title="模板訊息 (Template message)"></a>模板訊息 (Template message)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;template&quot;</span>,</span><br><span class="line">  <span class="string">&quot;altText&quot;</span>: <span class="string">&quot;This is a buttons template&quot;</span>,</span><br><span class="line">  <span class="string">&quot;template&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;buttons&quot;</span>,</span><br><span class="line">    <span class="string">&quot;thumbnailImageUrl&quot;</span>: <span class="string">&quot;https://example.com/bot/images/image.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;imageAspectRatio&quot;</span>: <span class="string">&quot;rectangle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;imageSize&quot;</span>: <span class="string">&quot;cover&quot;</span>,</span><br><span class="line">    <span class="string">&quot;imageBackgroundColor&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Menu&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;Please select&quot;</span>,</span><br><span class="line">    <span class="string">&quot;defaultAction&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uri&quot;</span>,</span><br><span class="line">      <span class="string">&quot;label&quot;</span>: <span class="string">&quot;View detail&quot;</span>,</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;http://example.com/page/123&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;actions&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;uri&quot;</span>,</span><br><span class="line">        <span class="string">&quot;label&quot;</span>: <span class="string">&quot;View detail&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;http://example.com/page/123&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>type</code>(String)：類型 (必填)</li>
<li><code>altText</code>：通知推播文字，最多 400 字元 (必填)</li>
<li><code>template</code>：可選擇 <a href="https://developers.line.biz/en/reference/messaging-api/#buttons">Buttons</a>, <a href="https://developers.line.biz/en/reference/messaging-api/#confirm">Confirm</a>, <a href="https://developers.line.biz/en/reference/messaging-api/#carousel">Carousel</a>, or <a href="https://developers.line.biz/en/reference/messaging-api/#image-carousel">Image Carousel</a> 物件 (必填)</li>
</ul>
<p>actions 僅能使用 uri 類型</p>
<br>

<h3 id="Flex-訊息-Flex-Message"><a href="#Flex-訊息-Flex-Message" class="headerlink" title="Flex 訊息 (Flex Message)"></a>Flex 訊息 (Flex Message)</h3><p>可自行客製版型</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;flex&quot;</span>,</span><br><span class="line">  <span class="string">&quot;altText&quot;</span>: <span class="string">&quot;this is a flex message&quot;</span>,</span><br><span class="line">  <span class="string">&quot;contents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;bubble&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;box&quot;</span>,</span><br><span class="line">      <span class="string">&quot;layout&quot;</span>: <span class="string">&quot;vertical&quot;</span>,</span><br><span class="line">      <span class="string">&quot;contents&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;text&quot;</span>: <span class="string">&quot;world&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>type</code>(String)：類型 (必填)</li>
<li><code>altText</code>：通知推播文字，最多 400 字元 (必填)</li>
<li><code>contents</code>：Flex Message <a href="https://developers.line.biz/en/reference/messaging-api/#container">container</a></li>
</ul>
<p>可於 <a href="https://developers.line.biz/flex-simulator/">FLEX MESSAGE SIMULATOR</a> 製作</p>
<hr>
<h1 id="LIFF-連結"><a href="#LIFF-連結" class="headerlink" title="LIFF 連結"></a><strong><strong>LIFF 連結</strong></strong></h1><h2 id="liff-permanentLink-createUrlBy"><a href="#liff-permanentLink-createUrlBy" class="headerlink" title="liff.permanentLink.createUrlBy()"></a><strong><strong>liff.permanentLink.createUrlBy()</strong></strong></h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// For example, if the endpoint URL of the LIFF app</span></span><br><span class="line"><span class="comment">// is https://example.com/path1?q1=v1</span></span><br><span class="line"><span class="comment">// and its LIFF ID is 1234567890-AbcdEfgh</span></span><br><span class="line">liff.permanentLink</span><br><span class="line">  .createUrlBy(<span class="string">&quot;https://example.com/path1?q1=v1&quot;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">permanentLink</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://liff.line.me/1234567890-AbcdEfgh</span></span><br><span class="line">    <span class="built_in">console</span>.log(permanentLink);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">liff.permanentLink</span><br><span class="line">  .createUrlBy(<span class="string">&quot;https://example.com/path1/path2?q1=v1&amp;q2=v2&quot;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">permanentLink</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// https://liff.line.me/1234567890-AbcdEfgh/path2?q=2=v2</span></span><br><span class="line">    <span class="built_in">console</span>.log(permanentLink);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">liff.permanentLink</span><br><span class="line">  .createUrlBy(<span class="string">&quot;https://example.com/&quot;</span>)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Error: currentPageUrl must start with endpoint URL of LIFF App.</span></span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-permanentLink-createUrl"><a href="#liff-permanentLink-createUrl" class="headerlink" title="liff.permanentLink.createUrl()"></a><strong><strong>liff.permanentLink.createUrl()</strong></strong></h2><p>取得當下的網址</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myLink = liff.permanentLink.createUrl();</span><br></pre></td></tr></table></figure>
<br>

<h2 id="liff-permanentLink-setExtraQueryParam"><a href="#liff-permanentLink-setExtraQueryParam" class="headerlink" title="liff.permanentLink.setExtraQueryParam()"></a><strong><strong>liff.permanentLink.setExtraQueryParam()</strong></strong></h2><p>網址上要加入其他參數</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.permanentLink.setExtraQueryParam(<span class="string">&quot;user_tracking_id=8888&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> myLink = liff.permanentLink.createUrl();</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="LIFF-打開-QR-Code-掃描器"><a href="#LIFF-打開-QR-Code-掃描器" class="headerlink" title="LIFF 打開 QR Code 掃描器"></a><strong><strong>LIFF 打開 QR Code 掃描器</strong></strong></h1><h2 id="liff-scanCodeV2"><a href="#liff-scanCodeV2" class="headerlink" title="liff.scanCodeV2()"></a><strong><strong>liff.scanCodeV2()</strong></strong></h2><p>打開掃描器</p>
<p>後台的 Scan QR 要開啟才能使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">liff.scanCodeV2().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// result = &#123; value: &quot;&quot; &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>常常在生活中會開啟 LINE 的瀏覽器，原來很多都是用 LIFF 做到的，玩起來滿有趣的！<br>LINE 還有好多其他功能，改天有機會再來研究看看😀</p>
<hr>
<h1 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h1><p><a href="https://developers.line.biz/en/reference/liff/">LIFF v2 API reference</a><br><a href="https://www.letswrite.tw/liff-init/">LIFF v2 基本使用筆記及範例</a></p>
]]></content>
      <categories>
        <category>LINE</category>
      </categories>
      <tags>
        <tag>LINE</tag>
        <tag>LIFF</tag>
        <tag>LINE LIFF</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js HTTP 模組 | 建立強大的伺服器端應用程式</title>
    <url>/2023/09/21/nodeJS-module-http/</url>
    <content><![CDATA[<p><img src="https://imgur.com/UsPSA1J.jpg" alt="nodeJS"></p>
<p>HTTP 模組用於建立 HTTP 伺服器和處理 HTTP 請求和回應。它提供了處理網路通訊的功能，使得 Node.js 能夠用於建立強大的伺服器端應用程式，本文將會介紹如何使用 Node.js 建立 HTTP 伺服器。</p>
<a id="more"></a>
<br />

<h1 id="HTTP-模組"><a href="#HTTP-模組" class="headerlink" title="HTTP 模組"></a>HTTP 模組</h1><h2 id="1-引用-HTTP-模組"><a href="#1-引用-HTTP-模組" class="headerlink" title="1. 引用 HTTP 模組"></a>1. 引用 HTTP 模組</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;http&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>http 模組為 Node.js 內建功能，無需額外安裝<br />
<br />

</li>
</ul>
<h2 id="2-建立一個-HTTP-伺服器"><a href="#2-建立一個-HTTP-伺服器" class="headerlink" title="2. 建立一個 HTTP 伺服器"></a>2. 建立一個 HTTP 伺服器</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">  res.end(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>用 createServer 建立一個 server</p>
</li>
<li><p>req (request)：來自客戶端的 HTTP 請求。當使用者訪問網站時，瀏覽器會發送 HTTP 請求至伺服器，請求取得某個網頁或資源，伺服器會接收這個請求並解析它，然後將相關的資訊存儲在 req 物件中。這個物件包含了請求的 URL、HTTP 方法（GET、POST、等等）、標頭、查詢字串、請求內容等等。在伺服器端處理請求時，您可以使用 req 物件來取得客戶端發送的資料，進行處理並做出回應。</p>
</li>
<li><p>res (response)：伺服器發送回給客戶端的 HTTP 回應。當伺服器收到客戶端的請求並處理完相關的邏輯後，它需要回應一些資料給瀏覽器或其他 HTTP 客戶端。這時候伺服器會創建一個 res 物件，並將回應的資料設置在這個物件中。這包括設置回應的狀態碼（例如 200 表示成功）、回應的標頭（Content-Type、Cookie 等等）以及回應的內容。最後，伺服器會將這個 res 物件送回給瀏覽器，瀏覽器根據這個回應物件來顯示相應的資料。</p>
</li>
<li><p>將回應的 HTTP 狀態碼設置為 200（表示成功）</p>
</li>
<li><p>設置回應的內容類型為純文字 “text/plain”，並結束回應。也可設置 “text/html” 將會回傳 HTML 格式<br><br /><br /></p>
</li>
</ul>
<h2 id="3-監聽-port-號"><a href="#3-監聽-port-號" class="headerlink" title="3. 監聽 port 號"></a>3. 監聽 port 號</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">server.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>讓伺服器開始監聽特定的 port 號，以接收來自客戶端的請求，當伺服器開始監聽時，回呼函式會被觸發，並在 console 中輸出 “Server is running on port 3000”<br><br /><br /></li>
</ul>
<h2 id="完整的程式碼"><a href="#完整的程式碼" class="headerlink" title="完整的程式碼"></a>完整的程式碼</h2><p>app.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">  res.end(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>當伺服器接收到請求時，在 console 中會正確地顯示 “Server is running on port 3000”<br>在本地端開啟瀏覽器 <a href="http://127.0.0.1:3000/">http://127.0.0.1:3000</a>  (127.0.0.1 為本地主機內部的 IP，等於 <a href="http://localhost:3000/">http://localhost:3000</a>)<br>在瀏覽器即可看到 Hello, World! 的純文字內容囉！</p>
<div style="color: #000; padding: 3px" >Hello, World!</div>

<br />

<h1 id="本站相關文章"><a href="#本站相關文章" class="headerlink" title="本站相關文章"></a>本站相關文章</h1><p>👉 <a href="https://happy9990929.github.io/2023/09/20/nodeJS-module/">三分鐘了解 Node.js 模組原理：import 與 export 的運作</a><br>👉 <a href="https://happy9990929.github.io/2023/09/18/nodeJS-initial/">用 Node.js 執行 JavaScript 環境，Node.js 後端開發第一步</a><br>👉 <a href="https://happy9990929.github.io/2021/02/08/nodeJS-update/">Node.js 與 npm 更新的方式</a></p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>node module</tag>
        <tag>node http</tag>
        <tag>node模組</tag>
      </tags>
  </entry>
  <entry>
    <title>三分鐘了解 Node.js 模組原理：import 與 export 的運作</title>
    <url>/2023/09/20/nodeJS-module/</url>
    <content><![CDATA[<p><img src="https://imgur.com/UsPSA1J.jpg" alt="nodeJS"></p>
<p>Node.js 中兩個重要的核心模組：單一檔案模組和 http 模組。這些模組是 Node.js 中內建的，無需額外安裝，而且在開發中扮演著重要的角色，本篇文章將帶您了解單一檔案模組，http 模組會於下篇介紹</p>
<a id="more"></a>
<br />

<h1 id="單一檔案模組"><a href="#單一檔案模組" class="headerlink" title="單一檔案模組"></a>單一檔案模組</h1><p>在 Node.js 中，模組（Module）是一種組織和重用程式碼的方式。每個 Node.js 檔案都被視為一個模組，且在檔案中可以載入其他模組，以便在程式中重用和擴展功能。</p>
<p>Node.js 模組原理的核心概念有兩個：</p>
<ul>
<li><strong>封裝（Encapsulation）：</strong> 每個 Node.js 檔案都是一個獨立的封裝單位，稱為模組。模組內的變數、函式、類別等，預設情況下都是私有的，不會影響到其他模組。這樣做可以防止模組之間的衝突，並保持程式碼的可靠性和穩定性。</li>
<li><strong>導出（Export）：</strong> 為了讓其他模組可以使用一個模組內的內容，該模組需要將這些內容導出。導出的內容可以是任何 JavaScript 資料類型，如函式、物件、數值、陣列等。<br><br /><br /></li>
</ul>
<h2 id="如何使用封裝、導出"><a href="#如何使用封裝、導出" class="headerlink" title="如何使用封裝、導出"></a>如何使用封裝、導出</h2><p>從 Node.js v12.20.0 開始，Node.js 支援了部分的 ES6 模組語法，ES6 的 import 和 export 讓程式碼更模組化和可維護，已經逐漸取代了舊有的 CommonJS 的 <strong>require</strong> 和 <strong>module.exports</strong> 語法，成為主要的模組系統，所以筆者接下來都會以 import 、 export 來做導入和導出，不過 Node.js 仍然支援 require 和 module.exports 語法喔!<br><br /></p>
<h3 id="1-初始化專案"><a href="#1-初始化專案" class="headerlink" title="1. 初始化專案"></a>1. 初始化專案</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
<p>在終端機執行初始化專案時，它會引導您完成一系列問題，並根據您的回答來建立 package.json 檔案，這是一個描述專案資訊、依賴項和其他設定的檔案。<br><br /></p>
<h3 id="2-設定-module"><a href="#2-設定-module" class="headerlink" title="2. 設定 module"></a>2. 設定 module</h3><p>在 package.json 加入 “type”: “module”，以指示 Node.js 這是一個 ES6 模組</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br />

<h3 id="3-import、export-檔案"><a href="#3-import、export-檔案" class="headerlink" title="3. import、export 檔案"></a>3. import、export 檔案</h3><p>新增一個 data.js、app.js 檔案<br>data.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> data = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure>
<br />

<p>app.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; data &#125; <span class="keyword">from</span> <span class="string">&quot;./data.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure>
<p>在 ESM 中，使用 import 語句導入模組時，對應的檔案副檔名（如 .js）是需要明確指定的，不能省略<br><br /></p>
<h3 id="4-執行結果"><a href="#4-執行結果" class="headerlink" title="4. 執行結果"></a>4. 執行結果</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>在終端機執行後便會印出字串 hello 囉！</p>
<div style="background-color: #000; width: 100%; color: #F1F1F1; padding: 3px" >>hello</div>

<br />

<h1 id="本站相關文章"><a href="#本站相關文章" class="headerlink" title="本站相關文章"></a>本站相關文章</h1><p>👉 <a href="https://happy9990929.github.io/2023/09/22/nodeJS-module-http/">Node.js HTTP 模組 | 建立強大的伺服器端應用程式</a><br>👉 <a href="https://happy9990929.github.io/2023/09/18/nodeJS-initial/">用 Node.js 執行 JavaScript 環境，Node.js 後端開發第一步</a><br>👉 <a href="https://happy9990929.github.io/2021/02/08/nodeJS-update/">Node.js 與 npm 更新的方式</a></p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>node module</tag>
        <tag>node http</tag>
        <tag>node模組</tag>
        <tag>node import</tag>
        <tag>node export</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 安裝與介紹，什麼是 MongoDB</title>
    <url>/2023/11/22/nodeJS-mongodb-install/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/gvWrt7o.jpg" alt="Imgur"></p>
<p>MongoDB 是一種開源的、高性能的 NoSQL（非關聯型資料庫）資料庫系統，它以文件形式儲存資料，適合處理大量非結構化或半結構化的資料。MongoDB 使用 BSON 格式的文件來儲存資料，與 JSON 格式幾乎一樣，這使得資料存取相當靈活，並且非常適合在 Web 開發中應用。<br><br/></p>
<a id="more"></a>

<p>MongoDB 與 Node.js 是一對很好的組合。由於 Node.js 是一個非阻塞的、事件驅動的伺服器端運行環境，而 MongoDB 也是一個非阻塞的資料庫系統，這使得它們能夠非常高效地協同工作。<br><br/><br/></p>
<h1 id="使用-MongoDB-與-Node-js-的好處"><a href="#使用-MongoDB-與-Node-js-的好處" class="headerlink" title="使用 MongoDB 與 Node.js 的好處"></a>使用 MongoDB 與 Node.js 的好處</h1><ul>
<li><p><strong>非阻塞和高效</strong>：MongoDB 和 Node.js 都是非阻塞的，這意味著它們在處理多個請求時能夠高效地並行運行，提供快速的回應時間。</p>
</li>
<li><p><strong>彈性和靈活性</strong>：MongoDB 的文件型資料儲存格式非常靈活，不需要嚴格的結構定義，這讓您能夠輕鬆地修改和擴充資料模型。</p>
</li>
<li><p><strong>BSON 格式</strong>：MongoDB 使用 BSON 格式來儲存資料，這與 JSON 格式幾乎一樣，使得在 Node.js 中處理資料非常自然和方便。</p>
</li>
<li><p><strong>簡化資料庫操作</strong>：使用 Mongoose 套件，您可以在 Node.js 中使用面向物件的方式來操作 MongoDB 資料庫，這使得資料庫操作變得簡單且易於維護。<br><br/><br/></p>
</li>
</ul>
<h1 id="建立資料流程"><a href="#建立資料流程" class="headerlink" title="建立資料流程"></a>建立資料流程</h1><p>建立 <span style="color: #fc6423">Database</span> 資料庫 ⇒ 建立 <span style="color: #fc6423">Collections</span> 集合 ⇒ 建立 <span style="color: #fc6423">Documents</span> 文件(BSON)</p>
<ul>
<li><p><strong>Database</strong>：資料庫，Database 是一個資料庫系統中的最上層容器，用於分隔不同的資料集合。</p>
</li>
<li><p><strong>Collections</strong>：資料表，Collections 是 MongoDB 中的文件集合，一個 databse 中通常會有數個 collection。</p>
</li>
<li><p><strong>Documents</strong>：資料，Document 是 MongoDB 中的基本單位，用於存放資料。通常一個 collection 中會有數筆 document，也因此我們稱 MongoDB 是 document database。</p>
<br/>

</li>
</ul>
<p><a href="https://affclkr.online/track/clicks/4305/c627c2bf900222dffa8aec35dc2e9753743940ce71e8e0f1113ff40863075feb"><img src="https://imgur.com/aDoUpCz.jpg" alt="資料流程"></a><a href="https://affclkr.online/track/clicks/4305/c627c2bf900222dffa8aec35dc2e9753743940ce71e8e0f1113ff40863075feb" target="_blank" style="font-size: 16px">*圖片來自六角學院</a><br><br/><br/></p>
<h1 id="Mongo-DB-安裝"><a href="#Mongo-DB-安裝" class="headerlink" title="Mongo DB 安裝"></a><a href="https://www.mongodb.com/zh-cn">Mongo DB 安裝</a></h1><p>用 Community Edition 安裝，點擊 Enterprise Server</p>
<p><img src="https://i.imgur.com/h5BmWfo.jpg" alt="Mongo DB"><br><br/><br/></p>
<p>網站會自動對應 user 的系統，點擊 Download</p>
<p><img src="https://i.imgur.com/gO7GsPW.jpg" alt="Mongo DB"><br><br/><br/></p>
<h1 id="mongosh-安裝"><a href="#mongosh-安裝" class="headerlink" title="mongosh 安裝"></a><a href="https://www.mongodb.com/try/download/shell">mongosh 安裝</a></h1><p>MongoDB 6.0 以後，已經不再預設安裝 shell 工具，如果要使用 MongoDB Shell，需安裝 mongosh 來執行命令<br><br/><br/></p>
<h1 id="本站相關文章"><a href="#本站相關文章" class="headerlink" title="本站相關文章"></a>本站相關文章</h1><p>👉 <a href="https://happy9990929.github.io/2023/09/20/nodeJS-module/">三分鐘了解 Node.js 模組原理：import 與 export 的運作</a><br>👉 <a href="https://happy9990929.github.io/2023/09/22/nodeJS-module-http/">Node.js HTTP 模組 | 建立強大的伺服器端應用程式</a><br>👉 <a href="https://happy9990929.github.io/2021/02/08/nodeJS-update/">Node.js 與 npm 更新的方式</a><br>👉 <a href="https://happy9990929.github.io/2023/09/18/nodeJS-initial/">用 Node.js 執行 JavaScript 環境，Node.js 後端開發第一步</a><br><br/><br/></p>
<h1 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h1><p><a href="https://chalk-freedom-ec6.notion.site/Mongo-DB-6-0-Windows-96f7d1ab284c478cb7346072a796777b">Mongo DB 6.0 安裝與設定流程｜作業系統：Windows（更新版）</a><br><a href="https://ithelp.ithome.com.tw/articles/10311067">使用 Node.js 串接 MongoDB (含CRUD)</a></p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>MongoDB安裝</tag>
        <tag>mongodb download教學</tag>
        <tag>MongoDB Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB Shell command 常用指令</title>
    <url>/2023/12/19/nodeJS-mongodb-shell/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/gvWrt7o.jpg" alt="Imgur"></p>
<p>在先前我們有安裝了 <a href="https://happy9990929.github.io/2023/11/22/nodeJS-mongodb-install/">mongosh</a>，在 bin 資料夾裡面有一個 mongosh.exe，點開來就可以下指令，指令方便查詢、新增、刪除、修改 Database 資料，此篇將列出常見的 MongoDB 指令。</p>
<a id="more"></a>
<br />

<h1 id="資料庫顯示"><a href="#資料庫顯示" class="headerlink" title="資料庫顯示"></a>資料庫顯示</h1><h2 id="顯示各個資料庫"><a href="#顯示各個資料庫" class="headerlink" title="顯示各個資料庫"></a>顯示各個資料庫</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>
<br />

<h2 id="切換資料庫"><a href="#切換資料庫" class="headerlink" title="切換資料庫"></a>切換資料庫</h2><p>切換到要操作的資料庫，如沒有此資料庫，會自動新增<br>use 資料庫名稱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use rooms</span><br></pre></td></tr></table></figure>
<br />

<h2 id="顯示所有集合"><a href="#顯示所有集合" class="headerlink" title="顯示所有集合"></a>顯示所有集合</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure>
<br />

<h1 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h1><h2 id="insertOne"><a href="#insertOne" class="headerlink" title="insertOne()"></a>insertOne()</h2><p>新增一筆資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.insertOne(&#123; &quot;rating&quot;: 4.5, &quot;name&quot;: &quot;標準雙人房&quot;, &quot;price&quot;:2500&#125;)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="insertMany"><a href="#insertMany" class="headerlink" title="insertMany()"></a>insertMany()</h2><p>新增多筆資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.insertMany([</span><br><span class="line">  &#123; &quot;rating&quot;: 4.5, &quot;name&quot;: &quot;標準三人房&quot;, &quot;price&quot;:3500&#125;,</span><br><span class="line">  &#123; &quot;rating&quot;: 5, &quot;name&quot;: &quot;豪華雙人房&quot;, &quot;price&quot;:5500&#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<br />

<h1 id="更新資料"><a href="#更新資料" class="headerlink" title="更新資料"></a>更新資料</h1><h2 id="updateOne"><a href="#updateOne" class="headerlink" title="updateOne()"></a>updateOne()</h2><p>更新一筆資料<br>符合此 id 的會進行修改，可針對欄位進行修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.updateOne(</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_id&quot;: ObjectId(&quot;63ff6df3ee1d24244d41577b&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;$set&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;標準雙人房 升級版&quot;,</span><br><span class="line">      &quot;rating&quot;: 4.8</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="updateMany"><a href="#updateMany" class="headerlink" title="updateMany()"></a>updateMany()</h2><p>更新多筆資料<br>針對 rating 為 4.8 的資料，針對欄位 rating 修改為 0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.updateMany(</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;rating&quot;: 4.8</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;$set&quot;: &#123;</span><br><span class="line">      &quot;rating&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h1 id="替換資料"><a href="#替換資料" class="headerlink" title="替換資料"></a>替換資料</h1><h2 id="replaceOne"><a href="#replaceOne" class="headerlink" title="replaceOne()"></a>replaceOne()</h2><p>replaceOne 只能替換整個文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.replaceOne(</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;rating&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;總統套房&quot;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="replaceMany"><a href="#replaceMany" class="headerlink" title="replaceMany()"></a>replaceMany()</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.replaceMany(</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;rating&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;總統套房&quot;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h1 id="刪除資料"><a href="#刪除資料" class="headerlink" title="刪除資料"></a>刪除資料</h1><h2 id="deleteOne"><a href="#deleteOne" class="headerlink" title="deleteOne()"></a>deleteOne()</h2><p>刪除一筆資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.deleteOne(</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_id&quot;: ObjectId(&quot;63ff6df3ee1d24244d41577b&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="deleteMany"><a href="#deleteMany" class="headerlink" title="deleteMany()"></a>deleteMany()</h2><p>刪除多筆資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.deleteMany(</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;rating&quot;: 4.5</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="deleteMany-1"><a href="#deleteMany-1" class="headerlink" title="deleteMany()"></a>deleteMany()</h2><p>刪除全部資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.deleteMany(&#123;&#125;)</span><br></pre></td></tr></table></figure>
<br />

<h1 id="尋找資料"><a href="#尋找資料" class="headerlink" title="尋找資料"></a>尋找資料</h1><h2 id="findOne"><a href="#findOne" class="headerlink" title="findOne()"></a>findOne()</h2><p>找到第一筆符合的資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.findOne(</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;rating&quot;: 5</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><p>找全部符合的資料<br>.pretty() 會將資料排版</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.find(</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;rating&quot;: 5</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db.rooms.find().pretty()</span><br></pre></td></tr></table></figure>
<br />

<h2 id="搜尋數值區間"><a href="#搜尋數值區間" class="headerlink" title="搜尋數值區間"></a>搜尋數值區間</h2><ul>
<li>$eq：等於</li>
<li>$ne：不等於</li>
<li>$gt：大於</li>
<li>$lt：小於</li>
<li>$gte：大於等於</li>
<li>$lte：小於等於</li>
<li>$in：存在某個值</li>
<li>$nin：不存在某個值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.find(</span><br><span class="line">  &#123;</span><br><span class="line">    rating:&#123;</span><br><span class="line">      $lte: 4</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="搜尋複合條件"><a href="#搜尋複合條件" class="headerlink" title="搜尋複合條件"></a>搜尋複合條件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.find(</span><br><span class="line">  &#123;</span><br><span class="line">    rating: &#123;</span><br><span class="line">      $gte: 4</span><br><span class="line">    &#125;,</span><br><span class="line">    price: &#123;</span><br><span class="line">      $gte: 2000</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="關鍵字搜尋"><a href="#關鍵字搜尋" class="headerlink" title="關鍵字搜尋"></a>關鍵字搜尋</h2><p>利用正規表達式搜尋關鍵字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.find(</span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x2F;豪華&#x2F;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><p>保護欄位，不顯示出的欄位<br>0 不顯示，1 顯示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.find(</span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x2F;豪華&#x2F;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    _id: 0</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="尋找陣列裡的值"><a href="#尋找陣列裡的值" class="headerlink" title="尋找陣列裡的值"></a>尋找陣列裡的值</h2><p>顯示 payment 包含信用卡的資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.rooms.find(</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;payment&quot;:&#123;$in:[&quot;信用卡&quot;]&#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h2><p>查看數量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find().count()</span><br></pre></td></tr></table></figure>
<br />

<h1 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h1><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><p>設定資料排序<br>查詢 name 為 Lala 的 document 列表，排序為由新到舊</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123; &quot;name&quot;: &quot;Lala&quot; &#125;).sort(&#123; &quot;createdAt&quot;: -1 &#125;)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="limit"><a href="#limit" class="headerlink" title="limit()"></a>limit()</h2><p>設定顯示幾筆數量<br>查詢 name 為 Lala 的 document 列表，顯示前 30 筆資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123; &quot;name&quot;: &quot;Lala&quot; &#125;).limit(30)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="skip"><a href="#skip" class="headerlink" title="skip()"></a>skip()</h2><p>跳過資料<br>查詢 comments 超過 100 的 document 列表，跳過前 30 筆資料，再顯示 30 筆資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123; &quot;comments&quot;: &#123; &quot;$gt&quot;: 100 &#125; &#125;).skip(30).limit(30)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="or"><a href="#or" class="headerlink" title="$or"></a>$or</h2><p>或者<br>尋找普通熱門貼文，請查詢 likes 或 (or) comments，1,000(含) 以上 的 document 列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(</span><br><span class="line">  &#123; &quot;$or&quot;:</span><br><span class="line">      [</span><br><span class="line">        &#123; &quot;likes&quot;: &#123; &quot;$gte&quot;: 1000 &#125; &#125;,</span><br><span class="line">        &#123; &quot;comments&quot;: &#123; &quot;$gte&quot;: 1000 &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>新增陣列項目<br>隨意找一筆 document 資料，將 tags 欄位裡的陣列，新增一個新 tags 為 遊記</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.updateOne(</span><br><span class="line">  &#123; &quot;_id&quot;: ObjectId(&quot;64265e27811aaae6d7a2da71&quot;) &#125;,</span><br><span class="line">  &#123; &quot;$push&quot;: &#123; &quot;tags&quot;: &quot;遊記&quot; &#125; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p>移除陣列項目<br>將所有 tags 陣列裡的 感情 都移除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.updateMany(</span><br><span class="line">  &#123; &quot;tags&quot;: &quot;感情&quot; &#125;,</span><br><span class="line">  &#123; &quot;$pull&quot;: &#123; &quot;tags&quot;: &quot;感情&quot; &#125; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><br /><br /></p>
<h1 id="本站相關文章"><a href="#本站相關文章" class="headerlink" title="本站相關文章"></a>本站相關文章</h1><p>👉 <a href="https://happy9990929.github.io/2023/11/22/nodeJS-mongodb-install/">MongoDB 安裝與介紹，什麼是 MongoDB</a><br>👉 <a href="https://happy9990929.github.io/2023/12/17/nodeJS-compass-atlas/">MongoDB常用工具-Compass GUI 資料庫，Atlas 雲端資料庫</a><br>👉 <a href="https://happy9990929.github.io/2023/09/18/nodeJS-initial/">用 Node.js 執行 JavaScript 環境，Node.js 後端開發第一步</a><br>👉 <a href="https://happy9990929.github.io/2023/09/20/nodeJS-module/">三分鐘了解 Node.js 模組原理：import 與 export 的運作</a><br>👉 <a href="https://happy9990929.github.io/2023/09/22/nodeJS-module-http/">Node.js HTTP 模組 | 建立強大的伺服器端應用程式</a><br><br/><br/></p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>MongoDB Shell</tag>
        <tag>MongoDB Shell command</tag>
        <tag>MongoDB Shell update</tag>
        <tag>MongoDB Shell delete</tag>
        <tag>MongoDB Shell create</tag>
      </tags>
  </entry>
  <entry>
    <title>提升開發效率：nodemon 的自動監控和重啟</title>
    <url>/2023/09/23/nodeJS-nodemon/</url>
    <content><![CDATA[<p><img src="https://imgur.com/5xB6ly9.jpg" alt="nodemon"></p>
<p>每次修改 Node.js 程式都得重新執行應用程式，太麻煩了吧?<br>是的！我們需要工具來幫助我們節省開發時間！</p>
<a id="more"></a>
<br />

<h1 id="nodemon-是什麼"><a href="#nodemon-是什麼" class="headerlink" title="nodemon 是什麼?"></a>nodemon 是什麼?</h1><p><code>nodemon</code> 全名為 <strong>Node Monitor</strong>，用於監控 Node.js 應用程式的變化並自動重新啟動應用程式。這樣在開發時，當您對程式碼進行更改並保存時，<code>nodemon</code> 會自動偵測到變化並重新啟動應用程式，不必手動重啟應用程式，節省開發時間和提高效率。<br><br /></p>
<h2 id="nodemon-的優點"><a href="#nodemon-的優點" class="headerlink" title="nodemon 的優點"></a>nodemon 的優點</h2><ul>
<li><strong>自動重新啟動：</strong> <code>nodemon</code> 可以自動監測程式碼變化，並在您進行修改後自動重新啟動應用程式，使您的更改立即生效，節省了手動重啟的時間。</li>
<li><strong>開發效率提升：</strong> 借助 <code>nodemon</code>，您可以專注於開發，無需擔心應用程式的重新啟動，大大提升了開發效率。</li>
<li><strong>避免手動操作：</strong> <code>nodemon</code> 可以代替手動重啟應用程式的步驟，讓您專注於程式碼編寫，減少手動操作的瑣碎工作。</li>
<li><strong>版本控制：</strong> <code>nodemon</code> 的安裝通常是專案的開發相依，因此可以確保在不同專案中使用不同版本的 <code>nodemon</code>，避免版本衝突問題。</li>
<li><strong>專案獨立性：</strong> 使用 <code>nodemon</code> 的本地安裝方式，每個專案都可以獨立使用自己的 <code>nodemon</code> 版本，不會影響其他專案的開發環境。</li>
<li><strong>即時調試：</strong> <code>nodemon</code> 提供即時的開發調試，您可以立即查看應用程式在修改後的效果，快速排除錯誤。<br />
<br />
<br />

</li>
</ul>
<h1 id="安裝-nodemon"><a href="#安裝-nodemon" class="headerlink" title="安裝 nodemon"></a>安裝 nodemon</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm install nodemon --save-dev</span><br></pre></td></tr></table></figure>
<p>因為 nodemon 只會在開發時使用，所以將被安裝到 devDependencies 中<br><br /><br><br /></p>
<h1 id="執行指令"><a href="#執行指令" class="headerlink" title="執行指令"></a>執行指令</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure>
<p>當您進行程式碼調整時，nodemon 會自動監測這些變化並更新</p>
<p><img src="https://imgur.com/323raU8.jpg" alt="nodemon"></p>
<p><br /><br /></p>
<h1 id="本站相關文章"><a href="#本站相關文章" class="headerlink" title="本站相關文章"></a>本站相關文章</h1><p>👉 <a href="https://happy9990929.github.io/2023/09/22/nodeJS-module-http/">Node.js HTTP 模組 | 建立強大的伺服器端應用程式</a><br>👉 <a href="https://happy9990929.github.io/2023/09/20/nodeJS-module/">三分鐘了解 Node.js 模組原理：import 與 export 的運作</a><br>👉 <a href="https://happy9990929.github.io/2023/09/18/nodeJS-initial/">用 Node.js 執行 JavaScript 環境，Node.js 後端開發第一步</a></p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>nodemon</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Node.js 打造 CRUD RESTful API</title>
    <url>/2023/10/12/nodeJS-restful-api/</url>
    <content><![CDATA[<p><img src="https://imgur.com/UsPSA1J.jpg" alt="nodeJS"></p>
<p>我們將使用 Node.js 建立一個 CRUD（新增、讀取、更新、刪除）的 RESTful API。RESTful API 是現代軟體開發中非常重要的一部分，它提供了一種標準化的方式來訪問和操作資料，並支援各種前端和移動應用。</p>
<a id="more"></a>
<br />

<h1 id="開發流程"><a href="#開發流程" class="headerlink" title="開發流程"></a>開發流程</h1><ol>
<li>建立 Server</li>
<li>設置 cors 表頭資訊</li>
<li>設置 OPTIONS API</li>
<li>404 無對應路由</li>
<li>設置 RESTful API (GET、POST、DELETE、PATCH)<br><br /><br /></li>
</ol>
<h1 id="1-建立-Server"><a href="#1-建立-Server" class="headerlink" title="1. 建立 Server"></a>1. 建立 Server</h1><p>新增一個 app.js，透過 createServer 開啟伺服器<br>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// TODO...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><br /><br /></p>
<h1 id="2-設置-cors-表頭資訊"><a href="#2-設置-cors-表頭資訊" class="headerlink" title="2. 設置 cors 表頭資訊"></a>2. 設置 cors 表頭資訊</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>: <span class="string">&#x27;Content-Type, Authorization, Content-Length, X-Requested-With&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>: <span class="string">&#x27;PATCH, POST, GET, OPTIONS, DELETE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> <span class="comment">// json 格式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>Access-Control-Allow-Headers：允許在實際請求中使用特定的請求標頭</li>
<li>Access-Control-Allow-Origin：允許跨來源的來源，*表示任何來源</li>
<li>Access-Control-Allow-Methods：允許使用 HTTP Methods</li>
<li>Content-Type：回傳的內容格式<br><br /><br /></li>
</ul>
<h1 id="3-設置-OPTIONS-API"><a href="#3-設置-OPTIONS-API" class="headerlink" title="3. 設置 OPTIONS API"></a>3. 設置 OPTIONS API</h1><h2 id="Preflight-預檢-機制"><a href="#Preflight-預檢-機制" class="headerlink" title="Preflight(預檢)機制"></a>Preflight(預檢)機制</h2><p>由於網頁與主機的 domain 不同，在某些時機點，call API 時會傳送兩次 request</p>
<p>第一次造訪雲端，Request Method 會是 OPTIONS，確認主機可以造訪</p>
<p>第二次才會是使用者發出的請求(Delete)</p>
<p><img src="https://imgur.com/OjQir0O.jpg" alt="Preflight"><a href="https://affclkr.online/track/clicks/4305/c627c2bf900222dffa8aec35dc2e9753743940ce71e8e0f1113ff40863075feb" target="_blank" style="font-size: 16px">*圖片來自六角學院</a></p>
<p>如果滿足以下<strong>任一項條件</strong>時會發出預檢請求</p>
<ul>
<li>PUT</li>
<li>DELETE</li>
<li>CONNECT</li>
<li>OPTIONS</li>
<li>TRACE</li>
<li>PATCH</li>
</ul>
<h2 id="設定-OPTIONS-條件"><a href="#設定-OPTIONS-條件" class="headerlink" title="設定 OPTIONS 條件"></a>設定 OPTIONS 條件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>: <span class="string">&#x27;Content-Type, Authorization, Content-Length, X-Requested-With&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>: <span class="string">&#x27;PATCH, POST, GET, OPTIONS, DELETE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> <span class="comment">// json 格式</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(req.method === <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, headers);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><br /><br /></p>
<h1 id="4-404-無對應路由"><a href="#4-404-無對應路由" class="headerlink" title="4. 404 無對應路由"></a>4. 404 無對應路由</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...OPTIONS</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  res.writeHead(<span class="number">404</span>, headers);</span><br><span class="line">  res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;無此頁面&quot;</span></span><br><span class="line">  &#125;));</span><br><span class="line">  res.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br /><br /></p>
<h1 id="5-設置-RESTful-API"><a href="#5-設置-RESTful-API" class="headerlink" title="5. 設置 RESTful API"></a>5. 設置 RESTful API</h1><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>設置路由與 http method 後，進行回傳</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;http&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> todos = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> headers = ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(req.url === <span class="string">&#x27;/todos&#x27;</span> &amp;&amp; req.method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, headers);</span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: todos</span><br><span class="line">    &#125;));</span><br><span class="line">    res.end();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.method === <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>確認請求的路由如果為 ‘/todos’ 且為 GET 時，將會回傳 status code 200，並回傳 JSON 資訊</p>
<p>todos 會是所有資料的集合，目前為空陣列</p>
<p>在 Postman 測試看一下，就會出現我們設定的資訊</p>
<p><img src="https://imgur.com/mu0CCj0.jpg" alt="node get"><br><br/></p>
<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>在 Node.js 中，當進行 HTTP POST 請求時，資料通常是以 TCP 封包的形式進行傳輸的。當使用者在前端透過瀏覽器提交表單或發送 POST 請求時，資料會被分割成多個小塊（chunks），並以 TCP 封包的方式傳送到伺服器。</p>
<p>當伺服器接收到這些封包時，它並不會立即得到完整的資料。相反，它會持續累加這些封包，直到收到所有封包並組合成完整的資料。這是因為 TCP 封包的傳輸順序不一定與原始資料的順序完全一致，有可能先收到後面的封包再收到前面的封包，因此伺服器需要等待所有封包到達，然後根據每個封包的順序來組合資料，才能得到最終的完整資料。<br><br/><br><img src="https://imgur.com/crrhhTE.jpg" alt="node post"><br><a href="https://affclkr.online/track/clicks/4305/c627c2bf900222dffa8aec35dc2e9753743940ce71e8e0f1113ff40863075feb" target="_blank" style="font-size: 16px">*圖片來自六角學院</a><br><br/><br>在資料尚未完整組合之前，伺服器通常會將每個封包的內容暫時儲存起來，這種暫存區域稱為緩衝區（buffer）。當所有封包都到達並組合完成後，伺服器會將緩衝區中的資料取出並進行處理，以獲得最終的完整資料。</p>
<p>所以我們會用一個 body 來將 chunk 組起來</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">  body += chunk;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(body).title);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在註冊資料時，用戶提交的表單或 POST 請求中的資料可能會非常龐大，可能會被分割成數個小塊封包。伺服器在接收到這些封包後，會持續累加這些封包，直到收到所有封包並組合成完整的註冊資料。當伺服器確定資料已完整收到時，它就會將這些資料進行處理，例如儲存到資料庫中或進行其他相關處理。<br><br/></p>
<p>這種方式可以確保資料在傳輸過程中不會丟失或損毀，同時也讓伺服器能夠在收到完整資料後再進行相應的處理，以確保資料的完整性和正確性。</p>
<p>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; v4 <span class="keyword">as</span> uuidv4 &#125; <span class="keyword">from</span> <span class="string">&#x27;uuid&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; errHandle &#125; <span class="keyword">from</span> <span class="string">&quot;./errorHandle.js&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> todos = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// headers...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">    body += chunk;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(req.url === <span class="string">&#x27;/todos&#x27;</span> &amp;&amp; req.method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// GET...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">&#x27;/todos&#x27;</span> &amp;&amp; req.method === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> title = <span class="built_in">JSON</span>.parse(body).title;</span><br><span class="line">        <span class="keyword">if</span>(title !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> todo = &#123;</span><br><span class="line">            title: title,</span><br><span class="line">            id: uuidv4()</span><br><span class="line">          &#125;;</span><br><span class="line">          todos.push(todo);</span><br><span class="line">          res.writeHead(<span class="number">200</span>, headers);</span><br><span class="line">          res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            <span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: todos</span><br><span class="line">          &#125;));</span><br><span class="line">          res.end();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          errHandle(res);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        errHandle(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> &#123;</span><br><span class="line">		<span class="comment">//...</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//...</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>當使用者傳入 title，如果 title 為有效值，將會回傳成功訊息，並回傳唯一性的 id，如錯誤將會執行錯誤處理<br><br/></p>
<p>為了檔案整潔，另外抽了一支 errorHandle.js 專門處理錯誤訊息<br><br/></p>
<p>errorHandle.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> errHandle= <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>: <span class="string">&#x27;Content-Type, Authorization, Content-Length, X-Requested-With&#x27;</span>, <span class="comment">// 允與資訊</span></span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>, <span class="comment">// 允許跨域</span></span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>: <span class="string">&#x27;PATCH, POST, GET,OPTIONS,DELETE&#x27;</span>, <span class="comment">// 允許使用Methods</span></span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> <span class="comment">// json 格式</span></span><br><span class="line">  &#125;</span><br><span class="line">  res.writeHead(<span class="number">400</span>, headers);</span><br><span class="line">  res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;欄位未填寫正確，或無此 to id&quot;</span></span><br><span class="line">  &#125;));</span><br><span class="line">  res.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 Postman 測試，成功將會出現回傳資訊</p>
<p><img src="https://imgur.com/HbfQDvm.jpg" alt="node post"><br><br/></p>
<p>輸入無效值，將會出現 400 錯誤訊息</p>
<p><img src="https://imgur.com/0Zwd86K.jpg" alt="node post"><br><br/></p>
<h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><h3 id="全部清空"><a href="#全部清空" class="headerlink" title="全部清空"></a>全部清空</h3><p>目前 GET /todos 有一筆我們剛剛新增的資料，我們現在要把資料全部清空，作法也很簡單<br/><br><img src="https://imgur.com/Cij2Z5J.jpg" alt="node get"><br><br/></p>
<p>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">&#x27;/todos&#x27;</span> &amp;&amp; req.method === <span class="string">&#x27;DELETE&#x27;</span>) &#123;</span><br><span class="line">  todos.length = <span class="number">0</span>;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, headers);</span><br><span class="line">  res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: todos</span><br><span class="line">  &#125;));</span><br><span class="line">  res.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將 todos 集合全部清空，並回傳成功訊息</p>
<p><img src="https://imgur.com/zdKfgzv.jpg" alt="node delete"><br><br/></p>
<h3 id="清空單筆"><a href="#清空單筆" class="headerlink" title="清空單筆"></a>清空單筆</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(req.url.startsWith(<span class="string">&#x27;/todos/&#x27;</span>) &amp;&amp; req.method === <span class="string">&#x27;DELETE&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.url.split(<span class="string">&#x27;/&#x27;</span>).pop(); <span class="comment">// 取得最後一筆資料</span></span><br><span class="line">  <span class="keyword">const</span> index = todos.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.id === id);</span><br><span class="line">  <span class="keyword">if</span>(index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    todos.splice(index, <span class="number">1</span>);</span><br><span class="line">    res.writeHead(<span class="number">200</span>, headers);</span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: todos,</span><br><span class="line">    &#125;));</span><br><span class="line">    res.end();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    errHandle(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>startsWith() 用於檢查一個字串是否以指定的字串開頭。這個方法會回傳一個布林值，表示該字串是否以指定的字串開頭</li>
<li>找到符合路由的 id 並將該筆資料刪除</li>
</ul>
<p>將會移除符合 <code>f061bfb2-64da-4949-8230-cd07c3e7137d</code> 此組 id 的資料</p>
<p><img src="https://imgur.com/mKiVOyL.jpg" alt="node delete"><br><br/></p>
<h2 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(req.url.startsWith(<span class="string">&#x27;/todos/&#x27;</span>) &amp;&amp; req.method === <span class="string">&#x27;PATCH&#x27;</span>) &#123;</span><br><span class="line">  req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> title = <span class="built_in">JSON</span>.parse(body).title;</span><br><span class="line">      <span class="keyword">const</span> id = req.url.split(<span class="string">&#x27;/&#x27;</span>).pop();</span><br><span class="line">      <span class="keyword">const</span> index = todos.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.id === id);</span><br><span class="line">      <span class="keyword">if</span>(title !== <span class="literal">undefined</span> &amp;&amp; index !== -<span class="number">1</span>) &#123;</span><br><span class="line">        todos[index].title = title;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, headers);</span><br><span class="line">        res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">          <span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">          <span class="string">&quot;data&quot;</span>: todos,</span><br><span class="line">        &#125;));</span><br><span class="line">        res.end();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        errHandle(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      errHandle(res);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>找到符合路由的 id</li>
<li>如有符合 id 的資料且 title 的資料為有效就進行修改</li>
</ul>
<p><img src="https://imgur.com/XjIoXSa.jpg" alt="node patch"></p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>node restful</tag>
        <tag>node request</tag>
        <tag>node createServer</tag>
        <tag>node cors</tag>
        <tag>node Preflight</tag>
        <tag>node OPTIONS API</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 與 npm 更新的方式</title>
    <url>/2021/02/08/nodeJS-update/</url>
    <content><![CDATA[<h2 id="Node-js-更新"><a href="#Node-js-更新" class="headerlink" title="Node.js 更新"></a>Node.js 更新</h2><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm cache clean -f</span><br><span class="line">npm install -g n</span><br><span class="line"><span class="comment">// 若要更新到最後一個版本</span></span><br><span class="line">n latest</span><br><span class="line"><span class="comment">// 若要更新到穩定版本</span></span><br><span class="line">n stable</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>上面的方法用在 windows 是行不通的，由於 n 模塊不支援 windows，需在瀏覽器中打開 node 官網下載 LTS 版本的 node 安裝包，安裝後覆蓋同路徑即可。<br><br>查看 node 安裝路徑<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">where</span> node</span><br></pre></td></tr></table></figure>
<h2 id="檢查-Node-js-版本"><a href="#檢查-Node-js-版本" class="headerlink" title="檢查 Node.js 版本"></a>檢查 Node.js 版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<h2 id="NPM-更新"><a href="#NPM-更新" class="headerlink" title="NPM 更新"></a>NPM 更新</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure>
<h2 id="檢查-NPM-版本"><a href="#檢查-NPM-版本" class="headerlink" title="檢查 NPM 版本"></a>檢查 NPM 版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>uuid產生-通用的唯一識別碼</title>
    <url>/2023/09/25/nodeJS-uuid/</url>
    <content><![CDATA[<p><img src="https://imgur.com/a3FpCXE.jpg" alt="uuid"></p>
<p>UUID 是 Universally Unique Identifier（通用唯一識別碼）的縮寫，它是一種用來唯一標識資源的識別碼，就像我們人一樣，會有身分證字號，是獨一無二的。而 UUID 是由一組 128 位元的數字所組成，通常以十六進位的方式表示。這個識別碼在理論上是唯一的，因此在各種應用中被廣泛使用。</p>
<a id="more"></a>
<br />

<p>UUID 的生成遵循特定的算法，以確保每個產生的 UUID 在宇宙中是唯一的。一個常見的 UUID 格式是這樣的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123e4567-e89b-12d3-a456-426655440000</span><br></pre></td></tr></table></figure>
<p>其中包含了五組由連字號（hyphen）分隔的 32 位元數字。<br><br /></p>
<p>UUID 的唯一性和無序性使其在分散式系統中非常有用，特別是在各種數據庫、網路通訊和分布式系統中用作唯一標識。在許多情況下，UUID 可以替代傳統的自增數字 ID（例如自動遞增的主鍵），避免了 ID 衝突和依賴中央編號生成器的問題。</p>
<p>我們可以用 NPM 直接來生成唯一性的 UUID<br><br /><br /></p>
<h1 id="安裝-UUID"><a href="#安裝-UUID" class="headerlink" title="安裝 UUID"></a>安裝 <a href="https://www.npmjs.com/package/uuid">UUID</a></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install uuid</span><br></pre></td></tr></table></figure>
<p><br /><br /></p>
<h1 id="引用執行-UUID"><a href="#引用執行-UUID" class="headerlink" title="引用執行 UUID"></a>引用執行 UUID</h1><p>app.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; v4 <span class="keyword">as</span> uuidv4 &#125; <span class="keyword">from</span> <span class="string">&#x27;uuid&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> uuid = uuidv4();</span><br><span class="line"><span class="built_in">console</span>.log(uuid);  <span class="comment">// ⇨ &#x27;9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d&#x27;</span></span><br></pre></td></tr></table></figure>
<p><br /><br /></p>
<h1 id="UUID-版本，為什麼是-v4"><a href="#UUID-版本，為什麼是-v4" class="headerlink" title="UUID 版本，為什麼是 v4 ?"></a>UUID 版本，為什麼是 v4 ?</h1><p>不同的 UUID 版本有不同的特點，因此在不同的情況下可能會使用不同的版本</p>
<ul>
<li>v1：日期時間和MAC位址</li>
<li>v2：日期時間和MAC位址，DCE安全版本</li>
<li>v3、v5：基於命名空間名稱</li>
<li>v4：完全基於隨機數字生成的</li>
</ul>
<p>v4 是一個很常用且通用的 UUID 版本，它確保了高度的唯一性。在大多數情況下，v4 的 UUID 是足夠隨機的，因此非常適合用於一般的唯一標識。</p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>uuid</tag>
        <tag>uuid產生</tag>
        <tag>uuid npm</tag>
        <tag>uuid v4</tag>
        <tag>uuid js</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 npm ci 不更新 package-lock.json</title>
    <url>/2022/01/01/npm-ci/</url>
    <content><![CDATA[<p><img src="https://imgur.com/95xxPeT.png" alt="npm"></p>
<p>最近在 clone 新專案時，下了 npm install，發現 package-lock.json 裡的套件版本被更新了，但又怕推上去會有版本上的問題😓<br>爬了一下文才知道，原來 npm install 會自動幫你更新套件😨 可是瑞凡~~~我沒有要更新啊!!<br>不過意外也發現了另一個好東西<code>npm ci</code>，可以解決這個問題。</p>
<a id="more"></a>

<h1 id="什麼是-npm-ci"><a href="#什麼是-npm-ci" class="headerlink" title="什麼是 npm ci ?"></a>什麼是 npm ci ?</h1><p>npm ci 跟 npm i 一樣，都可以安裝依賴，npm ci 的 ci 是「Continuous Integration」，中文是持續集成的意思，這個指令在 npm 5.7.1 的版本才能使用。</p>
<h1 id="npm-install-與-npm-ci-有什麼差別"><a href="#npm-install-與-npm-ci-有什麼差別" class="headerlink" title="npm install 與 npm ci 有什麼差別?"></a>npm install 與 npm ci 有什麼差別?</h1><p>npm install 針對 package.json 的版本來安裝套件，執行後會出現 node_modules、package-lock.json，會自動還原專案並更新套件</p>
<p>npm ci 針對 package-lock.json 的版本來安裝套件，專案需有 package-lock.json 或 npm-shrinkwrap.json 文件存在，因為是參照package-lock.json 的版本，所以不會有版本自動更新的問題<br>另外還有一些 npm ci 需注意的地方<br>🔸 當 package-lock.json 中的依賴於 package.json 不一致時，npm ci 退出但不會修改 package-lock.json<br>🔸 npm ci 只可以一次性的安裝整個專案依賴，但無法新增單個依賴項<br>🔸 如果 node_modules 已經存在，它會先刪除 node_modules 之後再安裝，以確保乾淨的狀態</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://hsiangfeng.github.io/nodejs/20211027/1827968017/">npm ci 與 npm install 差異</a></p>
<hr>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm ci</tag>
        <tag>npm install</tag>
        <tag>package-lock被更新</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+CKEditor5 教程：如何處理圖片上傳和顯示</title>
    <url>/2023/09/17/plugins-CKEditor5-image/</url>
    <content><![CDATA[<p><img src="https://imgur.com/2gz5lLS.jpg" alt="CKEditor5"></p>
<p>在上次做完 CKEditor5 文本編輯器後，會發現「咦~奇怪!為什麼點了圖片後，圖片不會顯示出來!?」<br>這是因為圖片的上傳需要再另外設定，才會顯示在編輯器，<br>有圖片網址後才能再存進 server，在網頁顯示出來，<br>這篇將會來介紹「<strong>如何處理 CKEditor5 的圖片上傳和顯示</strong>」<br>如果還未安裝 CKEditor5 設定操作可以先看這篇 =&gt; <a href="https://happy9990929.github.io/2023/07/31/plugins-CKEditor5/">簡單易懂的 Vue + CKEditor5 教程：打造自訂化文本編輯器</a></p>
<a id="more"></a>

<br/>

<h1 id="新增-UploadAdapter"><a href="#新增-UploadAdapter" class="headerlink" title="新增 UploadAdapter"></a>新增 UploadAdapter</h1><p>新增一個 useUploadAdapter.js 檔案，裡面會處理關於上傳 Adapter 的程式</p>
<p>/composables/useUploadAdapter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUploadAdapter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// According to the document we need a constructor first</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">loader</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loader = loader;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">upload</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 使用 FileReader() 物件讀取檔案</span></span><br><span class="line">      <span class="keyword">const</span> reader = (<span class="built_in">this</span>.reader = <span class="keyword">new</span> <span class="built_in">window</span>.FileReader());</span><br><span class="line">      <span class="comment">// 觸發 load 事件後，resolve 丟回物件完成 Promise</span></span><br><span class="line">      reader.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 上傳到 server 使用以下程式</span></span><br><span class="line">        <span class="comment">//this.loader.file.then( (file: Blob) =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 此處忽略請求 server 接口程式</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 接口上傳圖片成功後返回圖片地址後使用以下程式將圖片url地址返回</span></span><br><span class="line">        <span class="comment">// resolve( &#123; default: url &#125; );</span></span><br><span class="line">        <span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上傳base64使用以下程式</span></span><br><span class="line">        resolve(&#123; <span class="attr">default</span>: reader.result &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 觸發錯誤事件</span></span><br><span class="line">      reader.addEventListener(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 觸發abort事件</span></span><br><span class="line">      reader.addEventListener(<span class="string">&quot;abort&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        reject();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 告訴 FileReader 物件用 url 格式讀取，用於設定 img.src 性質</span></span><br><span class="line">      <span class="built_in">this</span>.loader.file.then(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">        reader.readAsDataURL(file);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// start abort()</span></span><br><span class="line">  <span class="function"><span class="title">abort</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//  觸發 FileReader abort 事件</span></span><br><span class="line">    <span class="built_in">this</span>.reader.abort();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useMyAdapterPlugin</span>(<span class="params">editor</span>) </span>&#123;</span><br><span class="line">  editor.plugins.get(<span class="string">&quot;FileRepository&quot;</span>).createUploadAdapter = <span class="function">(<span class="params">loader</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyUploadAdapter(loader);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="引用-useUploadAdapter"><a href="#引用-useUploadAdapter" class="headerlink" title="引用 useUploadAdapter"></a>引用 useUploadAdapter</h1><p>並在需要編輯器的檔案中引用</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> CKEditor <span class="keyword">from</span> <span class="string">&quot;@ckeditor/ckeditor5-vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Editor <span class="keyword">as</span> ClassicEditor &#125; <span class="keyword">from</span> <span class="string">&quot;ckeditor5-custom-build/build/ckeditor&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> ckeditor = CKEditor.component;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useMyAdapterPlugin &#125; <span class="keyword">from</span> <span class="string">&quot;@/composables/useUploadAdapter.js&quot;</span>; <span class="comment">// 加入這段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> content = ref(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ckeditorState = reactive(&#123;</span><br><span class="line">  editor: ClassicEditor,</span><br><span class="line">  editorConfig: &#123;</span><br><span class="line">    toolbar: &#123;</span><br><span class="line">      items: [</span><br><span class="line">        <span class="string">&quot;undo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;redo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;findAndReplace&quot;</span>,</span><br><span class="line">        <span class="string">&quot;selectAll&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;heading&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;removeFormat&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">        <span class="string">&quot;italic&quot;</span>,</span><br><span class="line">        <span class="string">&quot;strikethrough&quot;</span>,</span><br><span class="line">        <span class="string">&quot;underline&quot;</span>,</span><br><span class="line">        <span class="string">&quot;code&quot;</span>,</span><br><span class="line">        <span class="string">&quot;subscript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;superscript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;specialCharacters&quot;</span>,</span><br><span class="line">        <span class="string">&quot;horizontalLine&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pageBreak&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-&quot;</span>,</span><br><span class="line">        <span class="string">&quot;highlight&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fontSize&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fontFamily&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fontColor&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fontBackgroundColor&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;link&quot;</span>,</span><br><span class="line">        <span class="string">&quot;blockQuote&quot;</span>,</span><br><span class="line">        <span class="string">&quot;insertTable&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uploadImage&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bulletedList&quot;</span>,</span><br><span class="line">        <span class="string">&quot;numberedList&quot;</span>,</span><br><span class="line">        <span class="string">&quot;todoList&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;outdent&quot;</span>,</span><br><span class="line">        <span class="string">&quot;indent&quot;</span>,</span><br><span class="line">        <span class="string">&quot;alignment&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sourceEditing&quot;</span>,</span><br><span class="line">      ],</span><br><span class="line">      shouldNotGroupWhenFull: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: <span class="string">&quot;請輸入內容...&quot;</span>,</span><br><span class="line">    htmlSupport: &#123;</span><br><span class="line">      allow: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="regexp">/.*/</span>,</span><br><span class="line">          attributes: <span class="literal">true</span>,</span><br><span class="line">          classes: <span class="literal">true</span>,</span><br><span class="line">          styles: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    removePlugins: [</span><br><span class="line">      <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;Markdown&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    poweredBy: &#123;</span><br><span class="line">        position: <span class="string">&#x27;inside&#x27;</span>,</span><br><span class="line">        side: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">        label: <span class="string">&#x27;This is&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extraPlugins: [useMyAdapterPlugin], <span class="comment">// 加入 AdapterPlugin</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;main style=<span class="string">&quot;max-width: 800px;&quot;</span>&gt;</span><br><span class="line">    &lt;ckeditor</span><br><span class="line">      :editor=<span class="string">&quot;ckeditorState.editor&quot;</span></span><br><span class="line">      v-model=<span class="string">&quot;content&quot;</span></span><br><span class="line">      :config=<span class="string">&quot;ckeditorState.editorConfig&quot;</span></span><br><span class="line">    &gt;&lt;/ckeditor&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="設定-CSS，避免樣式衝突"><a href="#設定-CSS，避免樣式衝突" class="headerlink" title="設定 CSS，避免樣式衝突"></a>設定 CSS，避免樣式衝突</h1><p>在網站會設定一些預設的樣式，有可能會出現樣式衝突，<br>在顯示編輯器圖片的頁面，可以再加入 CKEditor5 提供的 CSS 樣式</p>
<p>assets/scss/plugin/ckeditor5.scss</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * CKEditor 5 (v39.0.0) content styles.</span></span><br><span class="line"><span class="comment"> * Generated on Tue, 08 Aug 2023 09:06:13 GMT.</span></span><br><span class="line"><span class="comment"> * For more information, check out https://ckeditor.com/docs/ckeditor5/latest/installation/advanced/content-styles.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--ck-color-image-caption-background</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">97%</span>);</span><br><span class="line">  <span class="attribute">--ck-color-image-caption-text</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">20%</span>);</span><br><span class="line">  <span class="attribute">--ck-color-mention-background</span>: <span class="built_in">hsla</span>(<span class="number">341</span>, <span class="number">100%</span>, <span class="number">30%</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">--ck-color-mention-text</span>: <span class="built_in">hsl</span>(<span class="number">341</span>, <span class="number">100%</span>, <span class="number">30%</span>);</span><br><span class="line">  <span class="attribute">--ck-color-selector-caption-background</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">97%</span>);</span><br><span class="line">  <span class="attribute">--ck-color-selector-caption-text</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">20%</span>);</span><br><span class="line">  <span class="attribute">--ck-highlight-marker-blue</span>: <span class="built_in">hsl</span>(<span class="number">201</span>, <span class="number">97%</span>, <span class="number">72%</span>);</span><br><span class="line">  <span class="attribute">--ck-highlight-marker-green</span>: <span class="built_in">hsl</span>(<span class="number">120</span>, <span class="number">93%</span>, <span class="number">68%</span>);</span><br><span class="line">  <span class="attribute">--ck-highlight-marker-pink</span>: <span class="built_in">hsl</span>(<span class="number">345</span>, <span class="number">96%</span>, <span class="number">73%</span>);</span><br><span class="line">  <span class="attribute">--ck-highlight-marker-yellow</span>: <span class="built_in">hsl</span>(<span class="number">60</span>, <span class="number">97%</span>, <span class="number">73%</span>);</span><br><span class="line">  <span class="attribute">--ck-highlight-pen-green</span>: <span class="built_in">hsl</span>(<span class="number">112</span>, <span class="number">100%</span>, <span class="number">27%</span>);</span><br><span class="line">  <span class="attribute">--ck-highlight-pen-red</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">85%</span>, <span class="number">49%</span>);</span><br><span class="line">  <span class="attribute">--ck-image-style-spacing</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">--ck-inline-image-style-spacing</span>: <span class="built_in">calc</span>(var(--ck-image-style-spacing) / <span class="number">2</span>);</span><br><span class="line">  <span class="attribute">--ck-todo-list-checkmark-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-table/theme/tablecaption.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.table</span> &gt; <span class="selector-tag">figcaption</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-caption;</span><br><span class="line">  <span class="attribute">caption-side</span>: top;</span><br><span class="line">  <span class="attribute">word-break</span>: break-word;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--ck-color-selector-caption-text);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--ck-color-selector-caption-background);</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">6em</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">75em</span>;</span><br><span class="line">  <span class="attribute">outline-offset</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-table/theme/tablecolumnresize.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.table</span> <span class="selector-class">.ck-table-resized</span> &#123;</span><br><span class="line">  <span class="attribute">table-layout</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-table/theme/tablecolumnresize.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.table</span> <span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-table/theme/tablecolumnresize.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.table</span> <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-wrap</span>: break-word;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-table/theme/table.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.table</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.9em</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-table/theme/table.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.table</span> <span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> double <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">70%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-table/theme/table.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.table</span> <span class="selector-tag">table</span> <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.table</span> <span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">4em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">75%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-table/theme/table.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.table</span> <span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">0%</span>, <span class="number">5%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-table/theme/table.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span><span class="selector-attr">[dir=<span class="string">&quot;rtl&quot;</span>]</span> <span class="selector-class">.table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-table/theme/table.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span><span class="selector-attr">[dir=<span class="string">&quot;ltr&quot;</span>]</span> <span class="selector-class">.table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-page-break/theme/pagebreak.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.page-break</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-page-break/theme/pagebreak.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.page-break</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span> dashed <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">77%</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-page-break/theme/pagebreak.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.page-break__label</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">3em</span> .<span class="number">6em</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">77%</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, Arial, Tahoma, Verdana, Sans-Serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.75em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">20%</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">1px</span> <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">0%</span>, <span class="number">0.15</span>);</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">  <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/todolist.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.todo-list</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/todolist.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/todolist.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-class">.todo-list</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/todolist.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.todo-list</span> <span class="selector-class">.todo-list__label</span> &gt; <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">var</span>(--ck-todo-list-checkmark-size);</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">var</span>(--ck-todo-list-checkmark-size);</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/todolist.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.todo-list</span> <span class="selector-class">.todo-list__label</span> &gt; <span class="selector-tag">input</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">20%</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">250ms</span> ease-in-out box-shadow, <span class="number">250ms</span> ease-in-out background, <span class="number">250ms</span> ease-in-out border;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/todolist.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.todo-list</span> <span class="selector-class">.todo-list__label</span> &gt; <span class="selector-tag">input</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>( var(--ck-todo-list-checkmark-size) / <span class="number">3</span> );</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>( var(--ck-todo-list-checkmark-size) / <span class="number">5.3</span> );</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>( var(--ck-todo-list-checkmark-size) / <span class="number">5.3</span> );</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>( var(--ck-todo-list-checkmark-size) / <span class="number">2.6</span> );</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="built_in">calc</span>( var(--ck-todo-list-checkmark-size) / <span class="number">8</span> ) <span class="built_in">calc</span>( var(--ck-todo-list-checkmark-size) / <span class="number">8</span> ) <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/todolist.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.todo-list</span> <span class="selector-class">.todo-list__label</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[checked]</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">126</span>, <span class="number">64%</span>, <span class="number">41%</span>);</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">hsl</span>(<span class="number">126</span>, <span class="number">64%</span>, <span class="number">41%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/todolist.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.todo-list</span> <span class="selector-class">.todo-list__label</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[checked]</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/todolist.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.todo-list</span> <span class="selector-class">.todo-list__label</span> <span class="selector-class">.todo-list__label__description</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-media-embed/theme/mediaembed.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.media</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.9em</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">15em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imageresize.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image</span><span class="selector-class">.image_resized</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imageresize.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image</span><span class="selector-class">.image_resized</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imageresize.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image</span><span class="selector-class">.image_resized</span> &gt; <span class="selector-tag">figcaption</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagecaption.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image</span> &gt; <span class="selector-tag">figcaption</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-caption;</span><br><span class="line">  <span class="attribute">caption-side</span>: bottom;</span><br><span class="line">  <span class="attribute">word-break</span>: break-word;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--ck-color-image-caption-text);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--ck-color-image-caption-background);</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">6em</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">75em</span>;</span><br><span class="line">  <span class="attribute">outline-offset</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/image.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.9em</span> auto;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/image.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/image.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-inline</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Normally, the .image-inline would have &quot;display: inline-block&quot; and &quot;img &#123; width: 100% &#125;&quot; (to follow the wrapper while resizing).;</span></span><br><span class="line"><span class="comment">   * Unfortunately, together with &quot;srcset&quot;, it gets automatically stretched up to the width of the editing root.</span></span><br><span class="line"><span class="comment">   * This strange behavior does not happen with inline-flex.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/image.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-inline</span> <span class="selector-tag">picture</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/image.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-inline</span> <span class="selector-tag">picture</span>,</span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-inline</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-highlight/theme/highlight.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.marker-yellow</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--ck-highlight-marker-yellow);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-highlight/theme/highlight.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.marker-green</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--ck-highlight-marker-green);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-highlight/theme/highlight.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.marker-pink</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--ck-highlight-marker-pink);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-highlight/theme/highlight.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.marker-blue</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--ck-highlight-marker-blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-highlight/theme/highlight.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.pen-red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--ck-highlight-pen-red);</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-highlight/theme/highlight.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.pen-green</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--ck-highlight-pen-green);</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/list.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: decimal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/list.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: lower-latin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/list.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: lower-roman;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/list.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: upper-latin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/list.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: upper-roman;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/list.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: disc;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/list.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">ul</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: circle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/list.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">ul</span> <span class="selector-tag">ul</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: square;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-list/theme/list.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">ul</span> <span class="selector-tag">ul</span> <span class="selector-tag">ul</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: square;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-style-block-align-left</span>,</span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-style-block-align-right</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - var(--ck-image-style-spacing));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-style-align-left</span>,</span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-style-align-right</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-style-side</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="built_in">var</span>(--ck-image-style-spacing);</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-style-align-left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="built_in">var</span>(--ck-image-style-spacing);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-style-align-center</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-style-align-right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="built_in">var</span>(--ck-image-style-spacing);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-style-block-align-right</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-style-block-align-left</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">p</span> + <span class="selector-class">.image-style-align-left</span>,</span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">p</span> + <span class="selector-class">.image-style-align-right</span>,</span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">p</span> + <span class="selector-class">.image-style-side</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-inline</span><span class="selector-class">.image-style-align-left</span>,</span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-inline</span><span class="selector-class">.image-style-align-right</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="built_in">var</span>(--ck-inline-image-style-spacing);</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="built_in">var</span>(--ck-inline-image-style-spacing);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-inline</span><span class="selector-class">.image-style-align-left</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="built_in">var</span>(--ck-inline-image-style-spacing);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-image/theme/imagestyle.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.image-inline</span><span class="selector-class">.image-style-align-right</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="built_in">var</span>(--ck-inline-image-style-spacing);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-basic-styles/theme/code.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">78%</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">15em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-block-quote/theme/blockquote.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">border-left</span>: solid <span class="number">5px</span> <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">80%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-block-quote/theme/blockquote.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span><span class="selector-attr">[dir=<span class="string">&quot;rtl&quot;</span>]</span> <span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: solid <span class="number">5px</span> <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">80%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-font/theme/fontsize.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.text-tiny</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">7em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-font/theme/fontsize.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.text-small</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">85em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-font/theme/fontsize.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.text-big</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-font/theme/fontsize.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.text-huge</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.8em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-mention/theme/mention.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-class">.mention</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--ck-color-mention-background);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--ck-color-mention-text);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-horizontal-line/theme/horizontalline.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">hr</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">87%</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-code-block/theme/codeblock.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">20.8%</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">78%</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">77%</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">direction</span>: ltr;</span><br><span class="line">  <span class="attribute">tab-size</span>: <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: pre-wrap;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @ckeditor/ckeditor5-code-block/theme/codeblock.css */</span></span><br><span class="line"><span class="selector-class">.ck-content</span> <span class="selector-tag">pre</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: unset;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="comment">/* @ckeditor/ckeditor5-page-break/theme/pagebreak.css */</span></span><br><span class="line">  <span class="selector-class">.ck-content</span> <span class="selector-class">.page-break</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* @ckeditor/ckeditor5-page-break/theme/pagebreak.css */</span></span><br><span class="line">  <span class="selector-class">.ck-content</span> <span class="selector-class">.page-break</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在顯示編輯器結果文章的地方加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-html&#x3D;&quot;newsState.content&quot; class&#x3D;&quot;leading-6 ck-content&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">@import &quot;@&#x2F;assets&#x2F;scss&#x2F;plugin&#x2F;ckeditor5.scss&quot;;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>現在可以輕鬆地上傳圖片、顯示圖片囉！<br>設定好 Adapter，就可以更輕鬆地讓你的 Vue 和 CKEditor 5 一起工作，輕鬆處理圖片🥳</p>
<br />

<h1 id="本站相關文章"><a href="#本站相關文章" class="headerlink" title="本站相關文章"></a>本站相關文章</h1><p><a href="https://happy9990929.github.io/2023/07/31/plugins-CKEditor5/">簡單易懂的 Vue + CKEditor5 教程：打造自訂化文本編輯器</a></p>
<br/>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://www.edbiji.com/doccenter/showdoc/3566/nav/92721.html">Vue3中ckeditor5增加上传图片功能</a><br><a href="https://ckeditor.com/docs/ckeditor5/latest/installation/advanced/content-styles.html">ckeditor5 官方 styles</a></p>
]]></content>
      <categories>
        <category>Plugins</category>
      </categories>
      <tags>
        <tag>CKEditor5</tag>
        <tag>CKEditor5教學</tag>
        <tag>ckeditor5-vue</tag>
        <tag>ckeditor5 image</tag>
        <tag>ckeditor5圖片</tag>
      </tags>
  </entry>
  <entry>
    <title>簡單易懂的 Vue + CKEditor5 教程：打造自訂化文本編輯器</title>
    <url>/2023/07/31/plugins-CKEditor5/</url>
    <content><![CDATA[<p><img src="https://imgur.com/2gz5lLS.jpg" alt="CKEditor5"></p>
<p>不論是網站內容管理系統、網誌、論壇、電子郵件，通常會有讓使用者填寫文字內容的編輯器，使用者可以使用這簡易的編輯器來達到想要呈現的畫面，編輯完成後就可以渲染出 Html 在前台，本篇就要來介紹這強大的 CKEditor5 文本編輯器！</p>
<a id="more"></a>
<br/>

<p>這邊會先分為兩個部分來操作：</p>
<ul>
<li>在線設定編譯 CKEditor 插件</li>
<li>在 Vue 專案加入 CKEditor</li>
</ul>
<br />
<br />

<h1 id="在線設定編譯-CKEditor-插件"><a href="#在線設定編譯-CKEditor-插件" class="headerlink" title="在線設定編譯 CKEditor 插件"></a>在線設定編譯 CKEditor 插件</h1><p>首先，先進入 <a href="https://ckeditor.com/ckeditor-5/online-builder">CKEditor5 官網</a>，並依下列步驟進行操作<br><br /><br><br /></p>
<h2 id="1-Type-選擇類型"><a href="#1-Type-選擇類型" class="headerlink" title="1. Type-選擇類型"></a>1. Type-選擇類型</h2><p>CKEditor5 提供多種類型，這邊選擇最常用的 Classic 經典模式</p>
<p><img src="https://imgur.com/YgqmNNW.jpg" alt="CKEditor5-type"></p>
<br />
<br />

<h2 id="2-Plugin-選擇插件"><a href="#2-Plugin-選擇插件" class="headerlink" title="2. Plugin-選擇插件"></a>2. Plugin-選擇插件</h2><p>根據要使用的插件加入，注意裡面有 <strong>PREMIUM</strong> 標籤是要收費的，這邊先把所有免費的插件都全 Add</p>
<p><img src="https://imgur.com/jZbFUlO.jpg" alt="CKEditor5-Plugin"></p>
<br />
<br />

<h2 id="3-Toolbar-選擇工具列、排序"><a href="#3-Toolbar-選擇工具列、排序" class="headerlink" title="3. Toolbar-選擇工具列、排序"></a>3. Toolbar-選擇工具列、排序</h2><p>根據想預設顯示的工具列去做顯示與排序</p>
<p><img src="https://imgur.com/7iRaQT5.jpg" alt="CKEditor5-Toolbar"><br><br /><br><br /></p>
<h2 id="4-Language-選擇語言"><a href="#4-Language-選擇語言" class="headerlink" title="4. Language-選擇語言"></a>4. Language-選擇語言</h2><p>依專案想要顯示的語言去做選擇，我這邊選擇英語 English</p>
<p><img src="https://imgur.com/BfjDxdg.jpg" alt="CKEditor5-Language"><br><br /><br><br /></p>
<h2 id="5-Download-編譯"><a href="#5-Download-編譯" class="headerlink" title="5. Download-編譯"></a>5. Download-編譯</h2><p>都設定好後，點擊 Start 開始進行 build 編譯</p>
<p><img src="https://imgur.com/qAhUwXb.jpg" alt="CKEditor5-Download"><br><br /></p>
<p>差不多過一分鐘後就會出現 <strong>Download your custom CKEditor 5 build</strong> 的按鈕</p>
<p><img src="https://imgur.com/vnPuCLJ.jpg" alt="CKEditor5-Download"><br><br /></p>
<p>點擊後會得到一個壓縮檔，解壓縮後放到 Vue 專案，接下來就是進行專案的部分</p>
<p><img src="https://imgur.com/3gF9mGa.jpg" alt="CKEditor5-build"><br><br /><br><br /></p>
<h1 id="在-Vue-專案加入-CKEditor"><a href="#在-Vue-專案加入-CKEditor" class="headerlink" title="在 Vue 專案加入 CKEditor"></a>在 Vue 專案加入 CKEditor</h1><h2 id="1-安裝-ckeditor5-vue"><a href="#1-安裝-ckeditor5-vue" class="headerlink" title="1. 安裝 ckeditor5-vue"></a>1. 安裝 ckeditor5-vue</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># npm</span><br><span class="line">npm i @ckeditor/ckeditor5-vue</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn add @ckeditor/ckeditor5-vue</span><br></pre></td></tr></table></figure>
<br />
<br />

<h2 id="2-安裝剛剛自定義的-ckeditor"><a href="#2-安裝剛剛自定義的-ckeditor" class="headerlink" title="2. 安裝剛剛自定義的 ckeditor"></a>2. 安裝剛剛自定義的 ckeditor</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># npm</span><br><span class="line">npm i file:./ckeditor5-<span class="number">38.1</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn add file:./ckeditor5-<span class="number">38.1</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>安裝好後可以在 package.json 看到</p>
<p><img src="https://imgur.com/zkC7qI8.jpg" alt="package.json"></p>
<br />
<br />

<h2 id="3-引入組件，全域引入或組件引入"><a href="#3-引入組件，全域引入或組件引入" class="headerlink" title="3. 引入組件，全域引入或組件引入"></a>3. 引入組件，全域引入或組件引入</h2><p>依專案使用程度來選擇全域或組件引入，請擇一使用<br>如多頁面都會使用到可使用<strong>全域引入</strong><br>少數頁面會使用可使用<strong>組件引入</strong></p>
<h3 id="全域引入"><a href="#全域引入" class="headerlink" title="全域引入"></a>全域引入</h3><p>main.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> CKEditor <span class="keyword">from</span> <span class="string">&quot;@ckeditor/ckeditor5-vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App).use(CKEditor).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="組件引入"><a href="#組件引入" class="headerlink" title="組件引入"></a>組件引入</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CKEditor <span class="keyword">from</span> <span class="string">&quot;@ckeditor/ckeditor5-vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Editor <span class="keyword">as</span> ClassicEditor &#125; <span class="keyword">from</span> <span class="string">&quot;ckeditor5-custom-build/build/ckeditor&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> ckeditor = CKEditor.component;</span><br></pre></td></tr></table></figure>
<br />
<br />

<h2 id="4-加入-ckeditor-在頁面中"><a href="#4-加入-ckeditor-在頁面中" class="headerlink" title="4. 加入 ckeditor 在頁面中"></a>4. 加入 ckeditor 在頁面中</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> CKEditor <span class="keyword">from</span> <span class="string">&quot;@ckeditor/ckeditor5-vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Editor <span class="keyword">as</span> ClassicEditor &#125; <span class="keyword">from</span> <span class="string">&quot;ckeditor5-custom-build/build/ckeditor&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> ckeditor = CKEditor.component;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> content = ref(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ckeditorState = reactive(&#123;</span><br><span class="line">  editor: ClassicEditor,</span><br><span class="line">  editorConfig: &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;ckeditor</span><br><span class="line">      :editor=<span class="string">&quot;ckeditorState.editor&quot;</span></span><br><span class="line">      v-model=<span class="string">&quot;content&quot;</span></span><br><span class="line">      :config=<span class="string">&quot;ckeditorState.editorConfig&quot;</span></span><br><span class="line">    &gt;&lt;/ckeditor&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>開啟畫面看，就會出現編輯器了！</p>
<p><img src="https://imgur.com/qLBBfel.jpg" alt="ckeditor"></p>
<br />
<br />

<h2 id="5-config-設定"><a href="#5-config-設定" class="headerlink" title="5. config 設定"></a>5. config 設定</h2><p>我們可以對 CKEditor5 再做一些設定，像是 placeholder、工具列等等<br>當然，如果你想使用預設，可以跳過這一步</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ckeditorState = reactive(&#123;</span><br><span class="line">  editor: ClassicEditor,</span><br><span class="line">  editorConfig: &#123;</span><br><span class="line">    toolbar: &#123;</span><br><span class="line">      items: [</span><br><span class="line">        <span class="string">&quot;undo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;redo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;findAndReplace&quot;</span>,</span><br><span class="line">        <span class="string">&quot;selectAll&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;heading&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;removeFormat&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">        <span class="string">&quot;italic&quot;</span>,</span><br><span class="line">        <span class="string">&quot;strikethrough&quot;</span>,</span><br><span class="line">        <span class="string">&quot;underline&quot;</span>,</span><br><span class="line">        <span class="string">&quot;code&quot;</span>,</span><br><span class="line">        <span class="string">&quot;subscript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;superscript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;specialCharacters&quot;</span>,</span><br><span class="line">        <span class="string">&quot;horizontalLine&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pageBreak&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-&quot;</span>,</span><br><span class="line">        <span class="string">&quot;highlight&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fontSize&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fontFamily&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fontColor&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fontBackgroundColor&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;link&quot;</span>,</span><br><span class="line">        <span class="string">&quot;blockQuote&quot;</span>,</span><br><span class="line">        <span class="string">&quot;insertTable&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uploadImage&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bulletedList&quot;</span>,</span><br><span class="line">        <span class="string">&quot;numberedList&quot;</span>,</span><br><span class="line">        <span class="string">&quot;todoList&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;outdent&quot;</span>,</span><br><span class="line">        <span class="string">&quot;indent&quot;</span>,</span><br><span class="line">        <span class="string">&quot;alignment&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sourceEditing&quot;</span>,</span><br><span class="line">      ],</span><br><span class="line">      shouldNotGroupWhenFull: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: <span class="string">&quot;請輸入內容...&quot;</span>,</span><br><span class="line">    htmlSupport: &#123;</span><br><span class="line">      allow: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="regexp">/.*/</span>,</span><br><span class="line">          attributes: <span class="literal">true</span>,</span><br><span class="line">          classes: <span class="literal">true</span>,</span><br><span class="line">          styles: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    removePlugins: [</span><br><span class="line">      <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;Markdown&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    poweredBy: &#123;</span><br><span class="line">        position: <span class="string">&#x27;inside&#x27;</span>,</span><br><span class="line">        side: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">        label: <span class="string">&#x27;This is&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>toolbar：工具列的顯示與排序</li>
<li>htmlSupport：html 支援</li>
<li>removePlugins：不使用的插件</li>
<li>poweredBy：免費版的 CKEditor 預設會出現版權的標誌在右下角，可在 poweredBy 設定位置</li>
</ul>
<p>更多的設定可參考 <a href="https://ckeditor.com/docs/ckeditor5/latest/installation/getting-started/configuration.html">CKEditor5 文件</a></p>
<br />
<br />

<p>最後就大功告成囉！！🎉<br><img src="https://imgur.com/iDx1pnO.jpg" alt="CKEditor"><br><br /><br><br /></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>之前也有用過 Quill 來做編輯器，但在渲染 HTML 時看起來有些落差，因為 Quill 使用自己的 Delta 格式來表示文字樣式，而不是使用傳統的 HTML 標籤，不曉得這部分有沒有解，不過之後改用 CKEditor5 就解決了這個問題，以後應該會直接選擇 CKEditor5 來做編輯器了！少走一點冤枉路 😄<br><br /><br><br /></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://ckeditor.com/ckeditor-5/online-builder/">CKEditor</a><br><a href="http://www.edbiji.com/doccenter/showdoc/3566/nav/92720.html">vue3安装在线构建ckeditor5教程</a><br><a href="https://blog.csdn.net/weixin_43485503/article/details/128559820">CKEditor5+vue3使用以及如何添加新工具栏，自定义设置字体fontFamily</a></p>
]]></content>
      <categories>
        <category>Plugins</category>
      </categories>
      <tags>
        <tag>CKEditor5</tag>
        <tag>CKEditor5教學</tag>
        <tag>ckeditor5-vue</tag>
        <tag>ckeditor5 toolbar</tag>
      </tags>
  </entry>
  <entry>
    <title>用 VUE 來做 recaptcha v2 / recaptcha v3 非機器人驗證</title>
    <url>/2022/06/12/plugins-recaptcha/</url>
    <content><![CDATA[<p><img src="https://imgur.com/zFD6djt.jpg" alt="reCAPTCHA"></p>
<p>Google reCAPTCHA 是一個智慧驗證工具，可以幫助網站阻擋機器人，或任何形式的自動攻擊，既簡單又安全，不用再輸入難以辨識的驗證英文數字圖了😆</p>
<a id="more"></a>
<br/>

<h1 id="reCAPTCHA-介紹"><a href="#reCAPTCHA-介紹" class="headerlink" title="reCAPTCHA 介紹"></a>reCAPTCHA 介紹</h1><p><strong>reCAPTCHA 有三種版本，分別為 reCAPTCHA v2、reCAPTCHA v3、Enterprise</strong><br><br/></p>
<p><strong>reCAPTCHA v2 以問題驗證要求</strong><br>「追蹤在網站登入單一頁面」<br>v2 會依用戶點擊驗證框「我不是機器人」之前、當時和之後的行為，從而來判斷是否是人為操作，如果你被誤判為機器人，網站會要求人機驗證，如從九宮格圖片中選出指定的圖案</p>
<p><img src="https://imgur.com/vj4lIaa.jpg" alt="reCAPTCHA v2"><br><br/></p>
<p><strong>reCAPTCHA v3 以分數驗證要求</strong><br>「所有的頁面都會有 reCaptcha 的追蹤功能」<br>不需做任何事，v3會針對使用者行為，判定安全性分數，1.0 代表操作自然很像真人，0.0 意味極有可能是機器人，如安全性太低，網站才會要求人機驗證。<br>如使用 v3，右下角會出現 reCAPTCHA 的圖示，可用 css 隱藏<br><img src="https://imgur.com/gzCvEID.jpg" alt="reCAPTCHA v3"></p>
<br/>

<p><strong>Enterprise 企業版</strong><br>多了更多進階功能，v2/v3 有每個月一百萬次的使用上限，若用量大於一百萬，可選擇 Enterprise</p>
<br/>

<p>接下來會使用 VUE 來做 reCAPTCHA v2、reCAPTCHA v3 的前端操作<br>在這之前先來輕鬆一下～你找得出哪些是蝴蝶犬嗎😆</p>
<p><img src="https://imgur.com/Eb8xmSQ.jpg" alt="九宮格"></p>
<br/>

<p>回到正題～</p>
<h1 id="reCAPTCHA-使用流程"><a href="#reCAPTCHA-使用流程" class="headerlink" title="reCAPTCHA 使用流程"></a>reCAPTCHA 使用流程</h1><p>註冊 reCAPTCHA ➝ 拿到網站金鑰🔑 ➝ 金鑰放進 reCAPTCHA 程式碼 ➝ 取得驗證 token 回傳給後端</p>
<p><br/><br/></p>
<h1 id="📝reCAPTCHA-註冊"><a href="#📝reCAPTCHA-註冊" class="headerlink" title="📝reCAPTCHA 註冊"></a>📝reCAPTCHA 註冊</h1><p>註冊 reCAPTCHA 很簡單又快速<br>先登入 Google 帳號，接著進到 <a href="https://www.google.com/recaptcha/about/">reCAPTCHA</a> 的頁面，點選 v3 Admin Console</p>
<p><img src="https://imgur.com/PApULbC.jpg" alt="v3 Admin Console"></p>
<p>會進入下面的表單<br><br/></p>
<p><img src="https://imgur.com/W8feu1g.jpg" alt="reCAPTCHA form"></p>
<p><strong>標籤</strong><br>取一個可以輕鬆分辨哪個網站使用的標籤</p>
<p><strong>reCAPTCHA 類型</strong><br>依需求選擇 reCAPTCHA v3 或 reCAPTCHA v2，其中 reCAPTCHA v2 會多三個選項<br>🔸「我不是機器人」核取方塊: 勾選「我不是機器人」核取方塊來驗證要求<br>🔸隱形 reCAPTCHA 標記: 在背景中驗證要求，提交即驗證<br>🔸reCAPTCHA Android: 驗證 Android 應用程式中的要求</p>
<p><strong>網域</strong><br>白名單的意思，輸入要應用的網址(方便本機測試可加 localhost)</p>
<p><strong>接受服務條款</strong><br>同意遵守 reCAPTCHA 服務條款</p>
<br/>

<p>提交後將會出現傳說中兩把鑰匙🔑</p>
<p><img src="https://imgur.com/6UuxNOf.jpg" alt="key"></p>
<p><strong>🔑金鑰是給前端頁面使用的，🔑密鑰是後端在 server 使用的</strong><br>不用擔心 key 忘記，reCAPTCHA 後台都可以看到</p>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="8536485431"></ins></p>
<h1 id="reCAPTCHA-v2"><a href="#reCAPTCHA-v2" class="headerlink" title="reCAPTCHA v2"></a>reCAPTCHA v2</h1><p>使用 <a href="https://www.npmjs.com/package/vue3-recaptcha2">vue3-recaptcha2</a> 套件，可以快速使用 v2</p>
<p><strong>安裝 vue3-recaptcha2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue3-recaptcha2</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>程式碼</strong><br>recaptcha-v2.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;vue-recaptcha</span><br><span class="line">  :sitekey=&quot;v2Sitekey&quot;</span><br><span class="line">  size=&quot;normal&quot;</span><br><span class="line">  theme=&quot;light&quot;</span><br><span class="line">  hl=&quot;zh-TW&quot;</span><br><span class="line">  @verify=&quot;recaptchaVerified&quot;</span><br><span class="line">  @expire=&quot;recaptchaExpired&quot;</span><br><span class="line">  @fail=&quot;recaptchaFailed&quot;</span><br><span class="line">  ref=&quot;vueRecaptcha&quot;&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">vue-recaptcha</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vueRecaptcha <span class="keyword">from</span> <span class="string">&#x27;vue3-recaptcha2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   components: &#123;</span><br><span class="line">	  vueRecaptcha</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 帶入你的 siteKey</span></span><br><span class="line">    <span class="keyword">const</span> v2Sitekey = <span class="string">&#x27;6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回傳一組 token，並把 token 傳給後端驗證</span></span><br><span class="line">    <span class="keyword">const</span> recaptchaVerified = <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> recaptchaExpired = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 過期後執行動作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> recaptchaFailed = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 失敗執行動作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      v2Sitekey, recaptchaVerified, recaptchaExpired, recaptchaFailed</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/><br/></p>
<h1 id="reCAPTCHA-v3"><a href="#reCAPTCHA-v3" class="headerlink" title="reCAPTCHA v3"></a>reCAPTCHA v3</h1><p>使用 <a href="https://www.npmjs.com/package/vue-recaptcha-v3">vue-recaptcha-v3</a> 套件，可以快速使用 v3</p>
<p><strong>安裝 vue-recaptcha-v3</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-recaptcha-v3</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>程式碼</strong><br>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; VueReCaptcha &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-recaptcha-v3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"> <span class="comment">// 帶入你的 siteKey</span></span><br><span class="line">app.use(VueReCaptcha, &#123; <span class="attr">siteKey</span>: <span class="string">&#x27;6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI&#x27;</span> &#125;);</span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br/>

<p>recaptcha-v3.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;row g-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 position-relative&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>帳號<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 position-relative&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>密碼<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;recaptcha&quot;</span>&gt;</span>Submit form<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReCaptcha &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-recaptcha-v3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; executeRecaptcha, recaptchaLoaded &#125; = useReCaptcha()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// submit 回傳一組 token，並把 token 傳給後端驗證</span></span><br><span class="line">    <span class="keyword">const</span> recaptcha = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> recaptchaLoaded()</span><br><span class="line">      <span class="keyword">const</span> token = <span class="keyword">await</span> executeRecaptcha(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(token)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      recaptcha</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>不管使用 recaptcha v2 或 recaptcha v3，都是多了一層保護機制，設定上也不困難，一起讓網站更安全吧👊🏽👊🏽👊🏽</p>
]]></content>
      <categories>
        <category>Plugins</category>
      </categories>
      <tags>
        <tag>recaptcha v2</tag>
        <tag>recaptcha v3</tag>
        <tag>recaptcha驗證</tag>
        <tag>我不是機器人 驗證</tag>
      </tags>
  </entry>
  <entry>
    <title>React基本入門</title>
    <url>/2022/06/28/react-basic/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"><br>React 是一個陳述式、高效且具有彈性的 JavaScript 函式庫，用以建立使用者介面，這篇介紹基本的 React 入門</p>
<a id="more"></a>

<h1 id="安裝React"><a href="#安裝React" class="headerlink" title="安裝React"></a>安裝React</h1><p>安裝最新版本 + 專案名稱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx create-react-app@latest myapp</span><br></pre></td></tr></table></figure>
<p>啟動</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="JSX語法-用-JS-寫-HTML-語法"><a href="#JSX語法-用-JS-寫-HTML-語法" class="headerlink" title="JSX語法: 用 JS 寫 HTML 語法"></a>JSX語法: 用 JS 寫 HTML 語法</h1><p>React 定義的 HTML 模板，跟 HTML 幾乎相同，只有幾個點不太一樣</p>
<p><strong>must close 每個標籤需close</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>每個標籤都可以 self close</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className /&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>className / htmlFor</strong><br>class、for 因與 JS 語法撞名<br>css 的 class 需叫 className<br>html 的 for 需叫 htmlFor</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&#x27;red&#x27;</span> /&gt;</span><br><span class="line">&lt;label htmlFor=<span class="string">&#x27;check&#x27;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&#x27;checkbox&#x27;</span> id=<span class="string">&#x27;check&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>需用駝峰式命名</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div onChange=<span class="string">&#x27;change&#x27;</span>&gt;</span><br><span class="line">&lt;div onClick=<span class="string">&#x27;click&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>可以用 { } 括號塞值或表達式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div onClick=&#123; <span class="built_in">this</span>.onClick &#125;&gt;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="建立組件"><a href="#建立組件" class="headerlink" title="建立組件"></a>建立組件</h1><p>src/Item.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Item</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;<span class="number">123</span>&lt;/li&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Item;</span><br></pre></td></tr></table></figure>
<p>src/List.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">List</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &lt;Item/&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="渲染組件到畫面"><a href="#渲染組件到畫面" class="headerlink" title="渲染組件到畫面"></a>渲染組件到畫面</h1><p>React18 使用 createRoot<br>src/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = createRoot(container);</span><br><span class="line">root.render(<span class="xml"><span class="tag">&lt;<span class="name">List</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>
<br/>

<p>React17 使用 ReactDom</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">ReactDom.render(<span class="xml"><span class="tag">&lt;<span class="name">List</span>/&gt;</span></span>, container);</span><br></pre></td></tr></table></figure>
<p>如果在 React18 用 ReactDom，雖然會成功渲染，但會出現改使用 createRoot 的警告，用 createRoot 才能使用新的 API<br>Warning: ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it’s running React 17. Learn more: <a href="https://reactjs.org/link/switch-to-createroot">https://reactjs.org/link/switch-to-createroot</a><br><br/><br/></p>
<h1 id="React-Developer-Tools"><a href="#React-Developer-Tools" class="headerlink" title="React Developer Tools"></a>React Developer Tools</h1><p>安裝瀏覽器擴充 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React Developer Tools</a>，幫助開發人員開發</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>JSX</tag>
        <tag>ReactDom</tag>
        <tag>createRoot</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 2】 React 的特性與思維，我該先學哪個框架呢?</title>
    <url>/2022/09/17/react-characteristic/</url>
    <content><![CDATA[<p><img src="https://imgur.com/fW87q9S.jpg" alt="https://imgur.com/fW87q9S"></p>
<p>React 的特性與思維，我該先學哪個框架呢?</p>
<a id="more"></a>

<p><strong>[ 情境劇場 ]</strong></p>
<p>解師傅：開一間餐廳，一定要先了解餐廳大致的方向，跟開店要注意的地方～</p>
<p>小當家：不就是熱炒店嗎？還有這麼多眉角阿．．．</p>
<p>解師傅：多的是你不知道的事，我們一起來研究吧～～</p>
<hr>
<p>React 是聲明式、單向資料流，將資料化為視覺，操作使用者事件來變更資料</p>
<p>以下四點為 React 的特點</p>
<p><br/><br/></p>
<h2 id="開發以-Component-組件-為單位"><a href="#開發以-Component-組件-為單位" class="headerlink" title="開發以 Component (組件)為單位"></a>開發以 Component (組件)為單位</h2><p>Component 是頁面的一部份，可以是一個區塊、一個 button 等</p>
<p><img src="https://imgur.com/WBpZXYp.png" alt="https://imgur.com/WBpZXYp.png"></p>
<p>透過組件的組合與重複使用，建構出一個更好維護的應用程式</p>
<p><br/><br/></p>
<h2 id="不是-MVC-框架"><a href="#不是-MVC-框架" class="headerlink" title="不是 MVC 框架"></a>不是 MVC 框架</h2><p>MVC 包含了 <strong>Model模型-邏輯層、View視圖-表現層、Controller控制器-事件層</strong></p>
<p><img src="https://imgur.com/rrroXSc.png" alt="https://imgur.com/rrroXSc.png"></p>
<p>而 React 精神專注在 View 表現層上面，用組件化的方式，讓開發者建構各式的使用者介面，可以重複使用、呈現資料、反應資料的改變</p>
<p><br/><br/></p>
<h2 id="不使用-template"><a href="#不使用-template" class="headerlink" title="不使用 template"></a>不使用 template</h2><p>Angular 或 Vue 都有自己的 template</p>
<p>而 React 使用原生 Javascript，不用另外學習語法，只要用 Javascript、JSX 規範 就可以寫出 View，更增加了可維護性</p>
<p><br/><br/></p>
<h2 id="不做資料綁定"><a href="#不做資料綁定" class="headerlink" title="不做資料綁定"></a>不做資料綁定</h2><p>Angular 或 Vue 都會將資料跟對應的視覺元素同步更新</p>
<p>而 React 採用單向資料流，不會直接修改 DOM 元素，使用 Virtual DOM 做比對更新。</p>
<p>Virtual DOM 顧名思義為虛擬 DOM，不是真正的 DOM，利用 JavaScrip 物件的資料結構來儲存在 memory 當中</p>
<p>當資料變更時，會先建立一個新的 virtual DOM，計算出新舊 virtual DOM 之間的差別，最後才會操作真正的 DOM，可保證每次只變更有變動的元素，藉此避免不必要的重製以提升效能</p>
<p><img src="https://imgur.com/VGbcTAi.jpg" alt="https://imgur.com/VGbcTAi.jpg"></p>
<p><br/><br/></p>
<h1 id="我該先學哪個框架呢"><a href="#我該先學哪個框架呢" class="headerlink" title="我該先學哪個框架呢?"></a>我該先學哪個框架呢?</h1><p>又到了前端工程師的萬年考古題，想當初我也是猶豫了大半天</p>
<p>前端三大巨頭 Angular、React、Vue</p>
<ul>
<li><p>Angular - 學習曲線較高，在時間成本上會花比較多的時間，使用 TypeScript</p>
</li>
<li><p>React - 技術上來說 React 並不是框架，而是一個用來渲染 UI 組件的函式庫，如果你已經非常熟悉 Javascript，那你一定很快學會，React 絕大部分都是在用 JavaScript</p>
</li>
<li><p>Vue - Vue 的模板提供了很多語法糖，簡單完成複雜的功能</p>
</li>
</ul>
<p>要先學哪個其實都可以，如果公司有需求當然是先看團隊<br>如果是考慮時間成本，個人的建議是 - 熟 Javascript 學 React ，不熟練可以學 Vue<br>但學框架前，一定要先會基本的 Javascript 才可以哦！</p>
<p>我自己的經驗是先學 Vue，因為 Vue 跟 React 其實有很多相似之處，之後在學 React 也變快了！</p>
<p>在 <a href="https://npmtrends.com/angular-vs-react-vs-vue">npm trends</a> 下載量，這幾年來 React 也是越來越高，可供大家參考</p>
<p><img src="https://imgur.com/GJixncf.jpg" alt="https://imgur.com/GJixncf.jpg"></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 6】建立一個可重複利用的 Component 吧！</title>
    <url>/2022/10/21/react-component-rerender/</url>
    <content><![CDATA[<p><img src="https://imgur.com/oMWPYPc.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>[ 情境任務 ]</strong></p>
<p>小當家：我開發了第一道料理「蘆筍沙拉」，可以幫我放在菜單上嗎？價格就由老闆來訂吧！</p>
<hr>
<p>設計一個 UI 畫面時，可以將頁面看做是由小元件與區塊堆疊起來的一個大元件，就好比一台相機都是用一堆小零件組成的，而這些小元件都是可以重複再利用的，並且專注於各別程式碼的思考，提高<strong>程式的重用性、開發效率</strong><br><br/></p>
<p><img src="https://imgur.com/bVgZIMN.jpg" alt="web"><br>以這個網站為例，吉他的卡片會依資料的筆數去呈現畫面會有幾張卡片，而卡片除了內容(圖片、品名、價格)不一樣，其他樣式框架很明顯都是一樣的，這時候就可以把卡片抽成 Component，每當長資料時，就複用卡片的 Component，如果需要做調整時，只需要修改一個 Component，<strong>不只提升維護性，也提高了易讀性</strong>。<br/><br><br/><br><br/></p>
<p>事不宜遲，我們來用 component 建立一個菜單吧！!😎<br><br/><br><br/></p>
<h1 id="建立-Component"><a href="#建立-Component" class="headerlink" title="建立 Component"></a>建立 Component</h1><p>先在 <code>/src</code> 底下新增 components 資料夾，並新增一個 <code>List.js</code>，如圖</p>
<p><img src="https://imgur.com/ejgt8N3.jpg" alt="components"></p>
<blockquote>
<p>⭕ Tips：檔名通常會用首字大寫來命名 component</p>
</blockquote>
<p>components/List.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> List = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// props</span></span><br><span class="line">  <span class="comment">// hooks</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;span&gt;蘆筍沙拉&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;$<span class="number">100</span>&lt;/span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<p>一個組件裡可以包含 <code>props</code>、 <code>hooks</code>、跟至少一個 <code>return</code> 資料，最後會<strong>把資料轉成視覺畫面</strong>，你可以稱之為 Function Component，<code>return</code> 出來可以是一個 jsx 元素、array、number、boolean、string、null、portal<br><br/><br><br/><br>在 App.js 引入 List.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;h1&gt;React 熱炒店&lt;/h1&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;List /&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>在父層引用 List component，並放入其中<br/><br><br/><br><br/></p>
<h1 id="渲染組件到畫面"><a href="#渲染組件到畫面" class="headerlink" title="渲染組件到畫面"></a><strong><strong>渲染組件到畫面</strong></strong></h1><p>src/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&#x27;./reportWebVitals&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/React.StrictMode&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">reportWebVitals();</span><br></pre></td></tr></table></figure>
<p>在進入點 index.js 引入 App.js，一開始建立專案時預設就有引入了<br>React18 使用 createRoot 渲染 App 到 root<br>root 就是在 <code>public/index.html</code> 裡的 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code></p>
<p>如此一來，組件就會在頁面上出現了</p>
<iframe src="https://codesandbox.io/embed/create-component-wscf18?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="create-component"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>

<h1 id="StrictMode"><a href="#StrictMode" class="headerlink" title="StrictMode"></a>StrictMode</h1><p>你可能會疑惑，index.js 裡的 <code>React.StrictMode</code> 有什麼作用呢</p>
<p><code>StrictMode</code> 為<strong>嚴格模式</strong>，可以幫助：</p>
<ul>
<li>發現擁有不安全生命週期的 component</li>
<li>警告使用了 legacy string ref API</li>
<li>警告使用到了被棄用的 findDOMNode</li>
<li>偵測意想不到的副作用</li>
<li>偵測 legacy context API</li>
<li>確保可重用的 state</li>
</ul>
<p>你可以在應用程式的任何地方打開嚴格模式，嚴格模式檢查只會在開發模式中執行，嚴格模式不會影響正式環境。<br><br/><br><br/></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><p><a href="https://zh-hant.reactjs.org/docs/strict-mode.html">React 嚴格模式</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>Component</tag>
      </tags>
  </entry>
  <entry>
    <title>React Context API跨組件溝通傳遞資料</title>
    <url>/2022/07/04/react-context-api/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<p>context api 可以跨組件溝通傳遞資料，讓組件可以省去組件層層傳遞的麻煩</p>
<a id="more"></a>

<p>以下範例情境: 點擊按鈕，讓 header 的總數量增加</p>
<p>App 為最外層、Header 顯示訂單數量、ProductList 訂單、Product 每個品項增加按鈕</p>
<p><img src="https://imgur.com/nvRnhNa.jpg" alt="context-api"></p>
<p><br/><br/></p>
<h1 id="設定-Context"><a href="#設定-Context" class="headerlink" title="設定 Context"></a>設定 Context</h1><p>import createContext，並設定 createContext 的預設值，<br>範例預設為: 訂單陣列 orders、增加訂單函式 addOrder</p>
<p><strong>Provider（提供者）是用來提供 context 值</strong></p>
<p><strong>Consumer（消費者）是用來使用 context 值</strong></p>
<p>/src/context/order.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; Provider, Consumer &#125; = createContext(&#123;</span><br><span class="line">  orders: [],</span><br><span class="line">  addOrder: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="設定-Provider，contextValue-傳入-context"><a href="#設定-Provider，contextValue-傳入-context" class="headerlink" title="設定 Provider，contextValue 傳入 context"></a>設定 Provider，contextValue 傳入 context</h1><p>在外層設定值與函式，傳入 context</p>
<p>在需使用到的組件外，包一層 Provider，傳入需要的 value，使底下的組件都可以使用 value 裡的值</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ProductList <span class="keyword">from</span> <span class="string">&quot;./ProductList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    orders: []</span><br><span class="line">  &#125;</span><br><span class="line">  addOrder = <span class="function"><span class="params">order</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      orders: [...this.state.orders, order]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; orders &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> contextValue = &#123;</span><br><span class="line">      orders,</span><br><span class="line">      addOrder: <span class="built_in">this</span>.addOrder</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Provider value=&#123;contextValue&#125;&gt;</span><br><span class="line">          &lt;Header /&gt;</span><br><span class="line">          &lt;ProductList /&gt;</span><br><span class="line">        &lt;/Provider&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="Consumer-使用-context"><a href="#Consumer-使用-context" class="headerlink" title="Consumer 使用 context"></a>Consumer 使用 context</h1><p>在需要使用 context value 的地方包一層 Consumer，需注意 <strong>value 必須用函式傳入</strong></p>
<p>這麼一來就可以取到 context 的值囉！</p>
<p>Header.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Consumer &#125; <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">       &#123; <span class="function"><span class="params">value</span> =&gt;</span> (<span class="string">`購物車(<span class="subst">$&#123;value.orders.length&#125;</span>)`</span>)&#125;</span><br><span class="line">      &lt;/Consumer&gt;</span><br><span class="line">      &lt;hr/&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure>
<br/>

<p>ProductList.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">&quot;./Product&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> menu = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;雞肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;豬肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;牛肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;海鮮鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;泡菜鍋&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProductList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;menu.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Product</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> &#123;<span class="attr">...item</span>&#125; /&gt;</span></span>)&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProductList;</span><br></pre></td></tr></table></figure>
<br/>

<p>Product.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Consumer &#125; <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Product = <span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;label&gt;&#123;name&#125;&lt;/label&gt;</span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          value =&gt; (</span><br><span class="line">            &lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123;value.addOrder(id)&#125;&#125;&gt;+&lt;/button&gt;</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/Consumer&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Product;</span><br></pre></td></tr></table></figure>
<p><br/><br/><br>React Hooks 的 useContext 可以不使用 Consumer，可參考 <a href="https://happy9990929.github.io/2022/07/05/react-hooks">React 常用 Hooks</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Context</tag>
        <tag>Context API</tag>
        <tag>React Provider</tag>
        <tag>React Consumer</tag>
      </tags>
  </entry>
  <entry>
    <title>AOS捲動動畫-三分鐘教學快速上手(Animate On Scroll )</title>
    <url>/2023/11/22/plugins-aos/</url>
    <content><![CDATA[<p><img src="https://imgur.com/J47pckz.jpg" alt="AOS"></p>
<p>當我們做好一個靜態網站後，可以幫網站內容做一點動畫效果，讓網站看起來更活潑，吸引使用者的眼球，<br>今天要來介紹一個好用的動畫套件 <a href="https://michalsnik.github.io/aos/">AOS（Animate On Scroll）</a>，只要幾行程式碼就能輕鬆在網頁捲動時添加動畫效果，這邊會用 VUE 專案來做示範</p>
<a id="more"></a>

<br/>

<h1 id="安裝-AOS"><a href="#安裝-AOS" class="headerlink" title="安裝 AOS"></a>安裝 AOS</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install aos --save</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="引用-AOS"><a href="#引用-AOS" class="headerlink" title="引用 AOS"></a>引用 AOS</h1><p>直接在 App.vue 引入 AOS，使所有組件都可以使用<br>App.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AOS <span class="keyword">from</span> <span class="string">&quot;aos&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;aos/dist/aos.css&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="設定-AOS-初始化"><a href="#設定-AOS-初始化" class="headerlink" title="設定 AOS 初始化"></a>設定 AOS 初始化</h1><p>所有動畫如沒特別設定，都會依照 init 的參數出現<br>App.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AOS <span class="keyword">from</span> <span class="string">&quot;aos&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;aos/dist/aos.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line">onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  AOS.init(&#123;</span><br><span class="line">    offset: <span class="number">200</span>,</span><br><span class="line">    duration: <span class="number">600</span>,</span><br><span class="line">    easing: <span class="string">&#x27;ease-in-sine&#x27;</span>,</span><br><span class="line">    delay: <span class="number">100</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>offset: 偏移量，指定捲動多少距離後觸發動畫效果</li>
<li>duration: 動畫的持續時間</li>
<li>easing: 指定動畫的緩動函數，用於控制動畫的速度變化</li>
<li>delay: 動畫啟動之前的延遲時間，以毫秒為單位</li>
<li>once: 是否只執行一次</li>
</ul>
<p><br/><br/></p>
<h1 id="加上動畫屬性"><a href="#加上動畫屬性" class="headerlink" title="加上動畫屬性"></a>加上動畫屬性</h1><p>在指定的元素加上屬性，可設定動畫效果、動畫延遲、偏移量等等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div data-aos=<span class="string">&quot;fade-up&quot;</span>&gt;</span><br><span class="line">  Lala的前端大補帖</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div data-aos=<span class="string">&quot;fade-up&quot;</span> data-aos-delay=<span class="string">&quot;500&quot;</span>&gt;</span><br><span class="line">  歡迎一起鑽研前端技術</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Description</th>
<th>Example value</th>
<th>Default value</th>
</tr>
</thead>
<tbody><tr>
<td>data-aos-offset</td>
<td>偏移量</td>
<td>200</td>
<td>120</td>
</tr>
<tr>
<td>data-aos-duration</td>
<td>動畫的持續時間</td>
<td>600</td>
<td>400</td>
</tr>
<tr>
<td>data-aos-easing</td>
<td>控制動畫的速度變化</td>
<td>ease-in-sine</td>
<td>ease</td>
</tr>
<tr>
<td>data-aos-delay</td>
<td>動畫延遲時間</td>
<td>300</td>
<td>0</td>
</tr>
<tr>
<td>data-aos-anchor</td>
<td>指定動畫的錨點元素(參考點)</td>
<td>#selector</td>
<td>null</td>
</tr>
<tr>
<td>data-aos-anchor-placement</td>
<td>定義錨點元素的位置，這影響動畫的觸發</td>
<td>top-center</td>
<td>top-bottom</td>
</tr>
<tr>
<td>data-aos-once</td>
<td>動畫是否只觸發一次</td>
<td>true</td>
<td>false</td>
</tr>
</tbody></table>
<p><br/><br/></p>
<p>設定完後就大功告成啦！是不是很快速上手呢 😄，一起試試看吧！<br><br/><br/></p>
<h1 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h1><p><a href="https://michalsnik.github.io/aos/">AOS</a><br><a href="https://github.com/michalsnik/aos/tree/v2">AOS github</a></p>
]]></content>
      <categories>
        <category>Plugins</category>
      </categories>
      <tags>
        <tag>aos animate</tag>
        <tag>aos</tag>
        <tag>aos動畫</tag>
        <tag>aos.js</tag>
        <tag>aos套件</tag>
        <tag>Scroll Animate</tag>
      </tags>
  </entry>
  <entry>
    <title>React組件應用</title>
    <url>/2022/06/30/react-component/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<p>前一篇介紹了基本組件，今天來介紹 React 的組件應用吧!</p>
<a id="more"></a>

<h1 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h1><p><strong>props 除了傳值以外，還可以設定預設值、預設型別</strong><br>範例: 簡單的計數器功能<br>外層組件傳入 initCount，內層接 props，並設定 props 的預設值 <strong>defaultProps</strong>、預設型別 <strong>PropTypes</strong>，<br>如外層沒傳 initCount，將會顯示預設值<br>如外層傳入型別與預設型別不同，將會跳出錯誤警告</p>
<p>Index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">&quot;./Counter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = createRoot(container);</span><br><span class="line">root.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">initCount</span>=<span class="string">&#123;10&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>
<br/>

<p>Counter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    initCount: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    initCount: PropTypes.number</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      count: props.initCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure>
<br/>
你也可以將 defaultProps、propTypes 設定在 Component 外面，將會得到一樣的結果
<br/><br/>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      count: props.initCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br><span class="line"></span><br><span class="line">Counter.defaultProps = &#123;</span><br><span class="line">  initCount: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">Counter.propTypes = &#123;</span><br><span class="line">  initCount: PropTypes.number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h1><p><strong>setState 可傳入 function</strong><br><strong>setState 是非同步操作</strong>，不能期待連續的 setState 內容會立刻更新，<br>因此我們可以在 setState，將原本傳入的 obj 改成傳入一個函式<br>這個函式參數吃的是本來的 state，(state) =&gt; {} 裡面回傳 return{ } 一個新的物件<br>新的物件就是新的 state = 原來的 state.count+1</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;))</span><br><span class="line">    <span class="comment">// 等於</span></span><br><span class="line">    <span class="comment">// this.setState((state) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   return &#123;</span></span><br><span class="line">    <span class="comment">//     count: state.count + 1</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>setState 可傳入 callback</strong></p>
<p>因 setState 為非同步，為了確保在 state 變更後執行想要的動作，可在 setState 第二個參數傳入callback</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">setState(變更 state 的物件或函式, callback);</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    count: <span class="built_in">this</span>.state.count + <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="built_in">this</span>.sendCount();</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line">sendCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetch(<span class="string">`/api/count?value=<span class="subst">$&#123;<span class="built_in">this</span>.state.count&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="ref-屬性-指定-DOM-元素"><a href="#ref-屬性-指定-DOM-元素" class="headerlink" title="ref 屬性-指定 DOM 元素"></a>ref 屬性-指定 DOM 元素</h1><p>指定 ref 有三種方法，以下為三種範例，其中官方推薦 createRef</p>
<p>情境: 在 input 還沒點擊時就自動 focus</p>
<h2 id="回調模式"><a href="#回調模式" class="headerlink" title="回調模式"></a>回調模式</h2><p>傳入function</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ref</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  setRef = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    input.focus();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="built_in">this</span>.setRef&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="createRef"><a href="#createRef" class="headerlink" title="createRef"></a>createRef</h2><p>使用 react 提供的 createRef，綁定一個變數給 createRef()</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, createRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ref</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  myInput = createRef();</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.myInput.current.focus();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="built_in">this</span>.myInput&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ref;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="舊版-字符串引用"><a href="#舊版-字符串引用" class="headerlink" title="舊版-字符串引用"></a>舊版-<strong>字符串引用</strong></h2><p>使用字串引用，官方並不建議使用，因為字符串引用存在一些問題，被認為是遺留問題，並且<strong>可能會在未來的某個版本中被刪除</strong>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ref</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.refs.myInput.focus();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> ref=<span class="string">&quot;myInput&quot;</span>/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="組件的父子溝通"><a href="#組件的父子溝通" class="headerlink" title="組件的父子溝通"></a>組件的父子溝通</h1><p>兩種溝通方式</p>
<p><strong>父子雙向溝通</strong><br>父傳子透過 ref 抓到子層的方法，子傳父透過 props<br>Parent.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, createRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  childRef = createRef();</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  addChildCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.childRef.current.addCount();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Parent: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;+Parent&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addChildCount&#125;&gt;+Child&lt;/button&gt;</span><br><span class="line">        &lt;Child ref=&#123;<span class="built_in">this</span>.childRef&#125; addParentCount=&#123;<span class="built_in">this</span>.addCount&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure>
<br/>

<p>Child.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Child:&#123;<span class="built_in">this</span>.state.count&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.props.addParentCount&#125;&gt;+Parent&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;+Child&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><strong>父層傳給子層</strong><br>所有屬性都在父層宣告，再透過 props 傳給子層<br>Parent.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    childCount: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">  addParentCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  addChildCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      childCount: <span class="built_in">this</span>.state.childCount + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Parent: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addParentCount&#125;&gt;+Parent&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addChildCount&#125;&gt;+Child&lt;/button&gt;</span><br><span class="line">        &lt;Child</span><br><span class="line">          count = &#123;<span class="built_in">this</span>.state.childCount&#125;</span><br><span class="line">          addChildCount = &#123;<span class="built_in">this</span>.addChildCount&#125;</span><br><span class="line">          addParentCount=&#123;<span class="built_in">this</span>.addParentCount&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure>
<br/>

<p>Child.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count, addParentCount, addChildCount &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Child:&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;addParentCount&#125;&gt;+Parent&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;addChildCount&#125;&gt;+Child&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="樣式控制-style-amp-className"><a href="#樣式控制-style-amp-className" class="headerlink" title="樣式控制 style &amp; className"></a>樣式控制 style &amp; className</h1><p>情境: 點擊 toggle 按鈕控制圖片開關<br><br/></p>
<p><strong>直接判斷 DOM 元素是否顯示</strong><br>三元判斷式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      visible: !<span class="built_in">this</span>.state.visible</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.toggle&#125;&gt;toogle&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123; <span class="built_in">this</span>.state.visible ? <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;/logo512.png&#x27;</span> /&gt;</span></span> : <span class="literal">null</span>&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>
<br/>

<p>也可以寫成</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      visible: !<span class="built_in">this</span>.state.visible</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.toggle&#125;&gt;toogle&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123; <span class="built_in">this</span>.state.visible &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;/logo512.png&#x27;</span> /&gt;</span></span> &#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><strong>用 style 控制是否顯示</strong></p>
<p>在 JSX 裡 style 是一個物件，所以需要用物件的方式傳給 style，style 物件裡面有 display 屬性，可根據 state 裡面的值來控制 display 的值為 block 或是 none</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      visible: !<span class="built_in">this</span>.state.visible</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> showImg = &#123; <span class="attr">display</span>: <span class="built_in">this</span>.state.visible ? <span class="string">&#x27;block&#x27;</span> : <span class="string">&#x27;none&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.toggle&#125;&gt;toogle&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;img style=&#123;showImg&#125; src=<span class="string">&#x27;/logo512.png&#x27;</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>
<br/>
也可以直接在 style 判斷
<br/><br/>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      visible: !<span class="built_in">this</span>.state.visible</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.toggle&#125;&gt;toogle&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;img style=&#123;&#123; <span class="attr">display</span>: <span class="built_in">this</span>.state.visible ? <span class="string">&#x27;block&#x27;</span> : <span class="string">&#x27;none&#x27;</span>&#125;&#125; src=<span class="string">&#x27;/logo512.png&#x27;</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><strong>用 className 控制是否顯示</strong></p>
<p>新增一支 CSS 寫入 class，再判斷 className</p>
<p>style.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hide</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      visible: !<span class="built_in">this</span>.state.visible</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.toggle&#125;&gt;toogle&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;img className=&#123;<span class="built_in">this</span>.state.visible ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;hide&#x27;</span>&#125; src=<span class="string">&#x27;/logo512.png&#x27;</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="Component-三種組件"><a href="#Component-三種組件" class="headerlink" title="Component 三種組件"></a>Component 三種組件</h1><p>以計數器為範例，外層傳入 props 到內層<br>Progress.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ProgressBar <span class="keyword">from</span> <span class="string">&quot;./ProgressBar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Progress</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ProgressBar value=&#123;<span class="built_in">this</span>.state.count&#125;/&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;add&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Progress;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="Class-Component"><a href="#Class-Component" class="headerlink" title="Class Component"></a>Class Component</h2><p>ProgressBar.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProgressBar</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="built_in">console</span>.count(<span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;&#123;value&#125;%&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProgressBar;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="Functional-Component-Stateless-component"><a href="#Functional-Component-Stateless-component" class="headerlink" title="Functional Component (Stateless component)"></a>Functional Component (Stateless component)</h2><p>沒有自己的 state、沒有自訂 method，props 當作參數傳入<br>ProgressBar.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> ProgressBar = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = props;</span><br><span class="line">  <span class="built_in">console</span>.count(<span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;h1&gt;&#123;value&#125;%&lt;/h1&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProgressBar;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="Pure-Component"><a href="#Pure-Component" class="headerlink" title="Pure Component"></a>Pure Component</h2><p>和 class component 一樣，兩者差異主要在於『 效能 』<br>class component 和 functional component，即使你傳入同樣的值 (props 或 state) 還是會重新 render<br>Pure Component 的運作則是當你傳入同樣的值 (props 或 state) 或深層改變值時，它不會重新 render，<br>如果第一層的值有改變才會重新渲染，只比較第一層的方式稱為 Shallow Compare</p>
<p>ProgressBar.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProgressBar</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="built_in">console</span>.count(<span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;&#123;value&#125;%&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProgressBar;</span><br></pre></td></tr></table></figure>
<br/>
如將 addCount 改成 +0，Pure Component 不會重新 render

<p>Progress.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ProgressBar <span class="keyword">from</span> <span class="string">&quot;./ProgressBar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Progress</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ProgressBar value=&#123;<span class="built_in">this</span>.state.count&#125;/&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;add&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Progress;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="CSS-模組"><a href="#CSS-模組" class="headerlink" title="CSS 模組"></a>CSS 模組</h1><p>使用 CSS 或 SCSS 模組很簡單，只要在附檔名加 .module 就可以呼叫了，模組化可以避免不同檔案相同 className 的衝突<br>使用 SCSS 記得先安裝 sass</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm i sass</span><br></pre></td></tr></table></figure>
<br/>

<p>Style.module.scss</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p>Btn.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&quot;./Style.module.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Btn</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button className=&#123;style.btn&#125;&gt;<span class="number">132</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Btn;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h1><p>styled-components 可以將 CSS 直接放到組件處理</p>
<p>首先安裝</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm i styled-components</span><br></pre></td></tr></table></figure>
<p>命名後當成標籤來使用</p>
<p>Btn.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  width: 100px</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ButtonText = styled.span<span class="string">`</span></span><br><span class="line"><span class="string">  color: red</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Btn</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Button&gt;</span><br><span class="line">          &lt;ButtonText&gt;<span class="number">132</span>&lt;/ButtonText&gt;</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Btn;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="高階組件-HOC"><a href="#高階組件-HOC" class="headerlink" title="高階組件 HOC"></a>高階組件 HOC</h1><p>Hihger-Order Components<br>以 Components 為輸入的 Components<br>return 傳入的 WrapperComponent，帶入共用邏輯的 props、自身的 props</p>
<p><strong>不同組件套用相同邏輯</strong></p>
<p>src/hocs/withOpen.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> withOpen = <span class="function">(<span class="params">WrapperComponent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">      open: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        open: !<span class="built_in">this</span>.state.open</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;WrapperComponent</span><br><span class="line">          &#123;...this.props&#125;</span><br><span class="line">          open=&#123;<span class="built_in">this</span>.state.open&#125;</span><br><span class="line">          toggle=&#123;<span class="built_in">this</span>.toggle&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withOpen;</span><br></pre></td></tr></table></figure>
<br/>
Card1.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; open, toggle &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;toggle&#125;&gt;Card1&lt;/button&gt;</span><br><span class="line">        &#123; open ? <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Card1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> : <span class="literal">null</span>&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Card1;</span><br></pre></td></tr></table></figure>
<br/>
Card2.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; open, toggle &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;toggle&#125;&gt;Card2&lt;/button&gt;</span><br><span class="line">        &#123; open ? <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Card2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> : <span class="literal">null</span>&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Card2;</span><br></pre></td></tr></table></figure>
<br/>
App.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Card1 <span class="keyword">from</span> <span class="string">&quot;./Card1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Card2 <span class="keyword">from</span> <span class="string">&quot;./Card2&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> withOpen <span class="keyword">from</span> <span class="string">&quot;./hocs/withOpen&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Card1withOpen = withOpen(Card1);</span><br><span class="line"><span class="keyword">const</span> Card2withOpen = withOpen(Card2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Card1withOpen/&gt;</span><br><span class="line">      &lt;Card2withOpen/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>react Props</tag>
        <tag>setState</tag>
        <tag>react ref</tag>
        <tag>createRef</tag>
        <tag>react style</tag>
        <tag>react className</tag>
        <tag>Class Component</tag>
        <tag>Functional Component</tag>
        <tag>Pure Component</tag>
        <tag>styled-components</tag>
        <tag>react HOC</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 21】Custom Hook - 客製你自己的 Hook</title>
    <url>/2022/11/18/react-custom-hook/</url>
    <content><![CDATA[<p><img src="https://imgur.com/yX2jgzy.jpg" alt="cover"></p>
<a id="more"></a>

<h1 id="認識-Custom-Hook"><a href="#認識-Custom-Hook" class="headerlink" title="認識 Custom Hook"></a>認識 Custom Hook</h1><p>當有多個組件有相同的邏輯，但卻重複寫了好幾次，這時候可以將相同邏輯的地方，抽出來做成一個共用 function，方便我們使用。</p>
<blockquote>
<p>Custom Hook 會自然遵循 Hook 設計的規範，且所有內部的 state 和 effect 都是完全獨立的。</p>
</blockquote>
<br/>
<br/>
<br/>

<h1 id="Custom-Hook-規則"><a href="#Custom-Hook-規則" class="headerlink" title="Custom Hook 規則"></a>Custom Hook 規則</h1><p>必須以 <code>use</code> 做開頭，方便開發者一眼就知道這是可以使用的 Hook，Lint 工具也會自動檢查是否違反 Hook 規則，如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useDocumentTitle</span><br><span class="line">useCounter</span><br><span class="line">useInterval</span><br></pre></td></tr></table></figure>
<br/>
<br/>
<br/>

<h1 id="Custom-Hook-範例"><a href="#Custom-Hook-範例" class="headerlink" title="Custom Hook 範例"></a>Custom Hook 範例</h1><p>以下會有兩個範例來做解說</p>
<ul>
<li>useCounter</li>
<li>useInterval<br/>
<br/>
<br/>

</li>
</ul>
<h2 id="範例一：useCounter"><a href="#範例一：useCounter" class="headerlink" title="範例一：useCounter"></a>範例一：useCounter</h2><p>目前有兩個 Counter 的組件，分別是 Counter1.js、Counter2.js，裡面有增加、減少跟重置的按鈕</p>
<p>components/Counter1.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> decrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount - <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> reset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="number">0</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;Counter1：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;increment&#125;&gt;increment&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;decrement&#125;&gt;decrement&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;reset&#125;&gt;reset&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter1;</span><br></pre></td></tr></table></figure>
<br/>

<p>components/Counter2.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> decrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount - <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> reset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="number">0</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;Counter2：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;increment&#125;&gt;increment&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;decrement&#125;&gt;decrement&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;reset&#125;&gt;reset&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter2;</span><br></pre></td></tr></table></figure>
<br/>

<p>兩個組件載入到 App.js<br>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Counter1 <span class="keyword">from</span> <span class="string">&quot;./components/Counter1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Counter2 <span class="keyword">from</span> <span class="string">&quot;./components/Counter2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Counter1 /&gt;</span><br><span class="line">      &lt;Counter2 /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/PZgTZZY.jpg" alt="custom hook"></p>
<iframe src="https://codesandbox.io/embed/react-usecounter1-i24rtu?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useCounter1"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>

<p>可以看到兩個組件的功能相同，但卻寫了兩次，我們可以把相同邏輯的地方抽出來變 custom hook<br><br/><br><br/><br><br/></p>
<p>◆ <strong>調整成 Custom Hook</strong></p>
<p>在 hooks 資料夾新增 <code>useCounter.js</code></p>
<p>hooks/useCounter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> decrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount - <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="number">0</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [count, increment, decrement, reset];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>把 Counter1、Counter2 相同邏輯的地方抽出來，並 return 變數方法給 <code>useCounter</code><br><br/></p>
<p>components/Counter1.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCounter &#125; <span class="keyword">from</span> <span class="string">&quot;../hooks/useCounter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, increment, decrement, reset] = useCounter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;Counter1：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;increment&#125;&gt;increment&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;decrement&#125;&gt;decrement&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;reset&#125;&gt;reset&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter1;</span><br></pre></td></tr></table></figure>
<br/>

<p>components/Counter2.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCounter &#125; <span class="keyword">from</span> <span class="string">&quot;../hooks/useCounter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, increment, decrement, reset] = useCounter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;Counter2：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;increment&#125;&gt;increment&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;decrement&#125;&gt;decrement&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;reset&#125;&gt;reset&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter2;</span><br></pre></td></tr></table></figure>
<br/>

<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Counter1 <span class="keyword">from</span> <span class="string">&quot;./components/Counter1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Counter2 <span class="keyword">from</span> <span class="string">&quot;./components/Counter2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Counter1 /&gt;</span><br><span class="line">      &lt;Counter2 /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<iframe src="https://codesandbox.io/embed/react-usecounter2-tt87tk?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useCounter2"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>

<p>這樣就打造好 useCounter 囉！要修改邏輯部份時，不用再去買個組件，直接從 useCounter.js 一次修改完成<br><br/><br><br/><br><br/></p>
<h2 id="範例二：useInterval"><a href="#範例二：useInterval" class="headerlink" title="範例二：useInterval"></a>範例二：useInterval</h2><p>現在有兩個計數器，<code>Counter</code> 為正向計數，<code>BackCounter</code> 為反向計數，並載入在 App.js</p>
<p>components/Counter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        setCount(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counter1：&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter1;</span><br></pre></td></tr></table></figure>
<br/>

<p>components/BackCounter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BackCounter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        setCount(<span class="function">(<span class="params">count</span>) =&gt;</span> count - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>BackCounter：&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> BackCounter;</span><br></pre></td></tr></table></figure>
<br/>

<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">&quot;./components/Counter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> BackCounter <span class="keyword">from</span> <span class="string">&quot;./components/BackCounter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;Counter /&gt;</span><br><span class="line">      &lt;BackCounter /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>情境說明</p>
<ul>
<li>正向計數：從 0 開始每秒 +1，如數字到 100 將會停止</li>
<li>反向計數：從 100 開始每秒 -1，如數字到 0 將會停止</li>
</ul>
<p><img src="https://imgur.com/5DCYJcD.jpg" alt="custom hook"></p>
<iframe src="https://codesandbox.io/embed/react-setinterval-e61vbe?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-setInterval"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>

<p>我們可以看到，雖然兩個組件邏輯有點不太一樣，但都有使用到 setInterval 的部分，跟 useEffect 的清除函式，這時候可以把 setInterval 抽出來，變成 <code>useInterval</code><br><br/><br><br/><br><br/></p>
<p>◆ <strong>調整成 Custom Hook</strong></p>
<p>hooks/useInterval.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useInterval = <span class="function">(<span class="params">callback, delay</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> savedCallback = useRef();</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    savedCallback.current = callback;</span><br><span class="line">  &#125;, [callback]);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      savedCallback.current();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (delay !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(tick, delay);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [delay]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>將 callback function 和秒數變成參數帶入，並用 useRef、useEffect 確保回傳最新的 function<br><br/></p>
<p>components/Counter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useInterval &#125; <span class="keyword">from</span> <span class="string">&quot;../hooks/useInterval&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useInterval(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">      setCount(<span class="function">(<span class="params">count</span>) =&gt;</span> count + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counter1：&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter1;</span><br></pre></td></tr></table></figure>
<br/>

<p>components/BackCounter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useInterval &#125; <span class="keyword">from</span> <span class="string">&quot;../hooks/useInterval&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BackCounter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  useInterval(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      setCount(<span class="function">(<span class="params">count</span>) =&gt;</span> count - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>backCounter：&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> BackCounter;</span><br></pre></td></tr></table></figure>
<br/>

<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">&quot;./components/Counter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> BackCounter <span class="keyword">from</span> <span class="string">&quot;./components/BackCounter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;Counter /&gt;</span><br><span class="line">      &lt;BackCounter /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<iframe src="https://codesandbox.io/embed/react-useinterval-qorh8p?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useInterval"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>

<p>如此一來，組件可以使用 useInterval 傳入參數，未來如果也要新增 setInterval 的功能，就可以直接使用 useInterval<br><br/><br><br/><br><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>Custom Hook 提供了共享邏輯的靈活性，可讀性大幅的提高，也省去重複新增修改的麻煩，相信你已經知道怎麼使用 Custom Hook，打造一個屬於你的 Hook 吧！<br><br/><br><br/><br><br/></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://reactjs.org/docs/hooks-custom.html">Building Your Own Hooks</a><br><a href="https://juejin.cn/post/6844904169539633166">React Hooks 系列之8 custom Hook</a><br><a href="https://overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/">使用 React Hooks 聲明 setInterval</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>Custom Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 14】塞入你的 HTML-dangerouslySetInnerHTML</title>
    <url>/2022/11/02/react-dangerouslySetInnerHTML/</url>
    <content><![CDATA[<p><img src="https://imgur.com/U6UnWUM.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境任務］</strong></p>
<p>美食家：這是我第一次吃到這種味道，這道菜有著前所未有的新鮮味…你們的餐點真是太好吃了～我寫了餐點評論送給你們</p>
<p>解師傅：哇！這怎麼好意思～太感謝了！！</p>
<p>我們拿到了知名美食家的評論，對餐廳非常有幫助～把它也放在菜單上吧！</p>
<hr>
<p>在說明 dangerouslySetInnerHTML 之前，我們先來了解 XSS 攻擊<br><br/><br><br/></p>
<h1 id="什麼是-XSS-攻擊"><a href="#什麼是-XSS-攻擊" class="headerlink" title="什麼是 XSS 攻擊"></a>什麼是 XSS 攻擊</h1><p>XSS 攻擊是有心人士利用 Web 應用程式的漏洞，植入攻擊程式碼，去竊取或修改使用者 cookie 資料、監聽使用者操作，甚至是注入 DDoS 攻擊，在前端或後端頁面會被注入外部攻擊的程式碼</p>
<p>所有網站都有可能被 XSS 攻擊，即使沒有資料庫，也可能會被仿冒成<code>釣魚網站</code>，所以在網頁的世界有流傳一句話：</p>
<blockquote>
<p>永遠不要相信使用者的輸入</p>
</blockquote>
<br/>
<br/>

<p>常見的 XSS 手法：</p>
<ul>
<li>在使用者輸入資料的地方，利用 JavaScript 程式碼，注入到網頁裡</li>
<li>做釣魚網站，仿造相似的網站，當使用者輸入表單就可取得資料</li>
<li>在網址的地方注入程式碼，並利用縮短網址的方式，誘使人點擊<br/>
<br/>
<br/>
舉個例子

</li>
</ul>
<p><img src="https://imgur.com/rGQrGRq.jpg" alt="xss"></p>
<p>在某個網站的頁面，有使用者可以搜尋資料的輸入框，<br>而在這個輸入框輸入了 script 程式碼 <code>alert(&#39;welcome&#39;)</code> <br/><br><br/><br><br/><br><br/><br>如果網站沒有做任何的防堵，將會跳出 alert 彈跳視窗<br><br/></p>
<p><img src="https://imgur.com/SousLUp.jpg" alt="xss"><br>可想而知，如果植入的是惡意攻擊的程式，將會是很嚴重的問題<br/><br><br/><br><br/></p>
<p><strong>後端需防堵 XSS</strong></p>
<ul>
<li>因避免被置入 JavaScript 攻擊程式，需將標籤的角括號變編碼，<br>如 &lt; 會變 <code>&amp;lt ;</code> ，&gt; 為 <code>&amp;gt ;</code>、有的人也會特別防堵 <code>script</code> 標籤</li>
<li>定義並檢查相關 function 參數的型別<br/>
<br/>
<br/>
<br/>

</li>
</ul>
<p>因為 Google 非常重視 XSS 的危險性，提供了 <a href="https://xss-game.appspot.com/"><strong>XSS 遊戲</strong></a>，<del>可以學習如何攻擊網站</del><br>啊~不是！是幫助我們了解駭客可能會如何攻擊網站，<br>千萬不要去攻擊人家網站唷～!<br><br/><br><br/><br><br/></p>
<h1 id="認識-dangerouslySetInnerHTML"><a href="#認識-dangerouslySetInnerHTML" class="headerlink" title="認識 dangerouslySetInnerHTML"></a>認識 dangerouslySetInnerHTML</h1><p>學過 JavaScript 的人，相信你對 <code>innerHTML</code> 一定不陌生，react 的 dangerouslySetInnerHTML 就是替代 JavaScript 的 innerHTML，可以將 HTML 塞入 DOM 元素中。</p>
<p>而從程式碼中設置 HTML 是有風險的，因為很容易無意中將使用者暴露給 XSS 攻擊風險之下，所以取名 dangerouslySetInnerHTML 藉此提醒<br><br/><br><br/><br><br/></p>
<h1 id="dangerouslySetInnerHTML-使用方法"><a href="#dangerouslySetInnerHTML-使用方法" class="headerlink" title="dangerouslySetInnerHTML 使用方法"></a>dangerouslySetInnerHTML 使用方法</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: <span class="string">&quot;&lt;span&gt;我最愛 React&lt;/span&gt;&quot;</span> &#125;&#125; /&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>dangerouslySetInnerHTML 要回傳一個物件，<br>將 HTML 內容傳遞給 <code>__html</code> 屬性，就可以在這個 div 顯示 HTML 的內容<br/><br><br/><br><br/><br><br/></p>
<p><strong>［任務解題］</strong></p>
<p>我們把美食家的評論用 dangerouslySetInnerHTML 給放上去了！</p>
<iframe src="https://codesandbox.io/embed/react-dangerouslysetinnerhtml-xdovv0?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="React-dangerouslySetInnerHTML"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>我們了解到 XSS 攻擊的危險，不要隨意相信使用者的輸入，畢竟這年頭的駭客實在難防，所以在使用 dangerouslySetInnerHTML 的時候也要小心，熱炒店菜單的範例就先到這邊結束，明天將會進入到 React 表單的章節囉！<br><br/><br><br/><br><br/></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://youtu.be/MMMkvHwqPRY">[偷米騎巴哥]帶你認識XSS攻擊手法</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>xss</tag>
        <tag>dangerouslySetInnerHTML</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 16】好用的 React Developer Tools 偵錯工具</title>
    <url>/2022/11/04/react-developer-tools/</url>
    <content><![CDATA[<p><img src="https://imgur.com/RAaNADv.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境劇場］</strong></p>
<p>解師傅：話說小當家，你這彈跳甲魚湯還真是好喝，這麼多食材，為什麼你總是能分辨那些食材是新鮮的？</p>
<p>小當家：哎…解師傅，你忘了舌頭是我最厲害的武器了嗎！每個食材只要讓我舔一下，經過我舌頭精密的計算，就能判斷它到底有沒有資格變成我的料理</p>
<p>解師傅：…希望你不會拉肚子</p>
<hr>
<h1 id="React-Developer-Tools"><a href="#React-Developer-Tools" class="headerlink" title="React Developer Tools"></a><strong><strong>React Developer Tools</strong></strong></h1><p><code>React Developer Tools</code> 是由 Facebook 團隊開發的偵錯工具，目前已超過 300 萬使用者</p>
<p>在開發 React 專案時非常好用，它可以看到各個組件的結構，觀察組件中 <code>props</code>、<code>hooks</code> 的變化，還能直接編輯，讓開發流程順利、有效率，目前的 Firefox、Chrome 瀏覽器都可安裝 React Developer Tools 擴充套件，本篇會以 Chrome 做教學<br><br/><br><br/><br><br/></p>
<h1 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h1><p>先在瀏覽器安裝擴充套件</p>
<h2 id="Chrome-安裝-→-Chrome-React-Developer-Tools"><a href="#Chrome-安裝-→-Chrome-React-Developer-Tools" class="headerlink" title="Chrome 安裝 → Chrome React Developer Tools"></a>Chrome 安裝 → <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">Chrome React Developer Tools</a></h2><h2 id="Firefox-安裝-→-Firefox-React-Developer-Tools"><a href="#Firefox-安裝-→-Firefox-React-Developer-Tools" class="headerlink" title="Firefox 安裝 →  Firefox React Developer Tools"></a>Firefox 安裝 →  <a href="https://addons.mozilla.org/zh-TW/firefox/addon/react-devtools/">Firefox React Developer Tools</a></h2><p><img src="https://imgur.com/ZB6gqES.jpg" alt="chrome"><br>點選加到 Chrome，安裝完畢之後請重開 chrome<br><br/><br><br/><br><br/></p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p><img src="https://imgur.com/MZ7pdP8.jpg" alt="img"><br>開啟一個 React 專案，打開 F12 dev tools，會看到多了兩個標籤，分別是 <code>Components</code>、<code>Profiler</code>，沒看到的話可以看一下有沒有收合在「 &gt;&gt;」裡<br><br/><br><br/><br><br/></p>
<p><img src="https://imgur.com/P1epPxw.jpg" alt="img2"><br>這邊拿了前面使用過的範例來看，點擊 <code>Components</code>，會看到所有 App 包含的組件結構，點擊元件，會出現 <code>props</code>、<code>hooks</code>、<code>rendered by</code>、<code>source</code> 等相關資訊</p>
<p>rendered by、source 會顯示組件的來源及 react-dom 的版本<br><br/><br><br/><br><br/></p>
<p><img src="https://imgur.com/HENfa96.jpg" alt="img3"><br>可以直接改動裡面的值，畫面也會跟著變動<br><br/><br><br/><br><br/></p>
<p><img src="https://imgur.com/qrE0yMk.jpg" alt="img4"><br>在 codesandbox 也可以直接使用 React DevTools，<br>有興趣的人可以點選 <a href="https://codesandbox.io/s/react-with-render-if-else-uewlgj"><strong>React DevTools 範例</strong></a> 觀察<br><br/><br><br/><br><br/></p>
<h1 id="那-Profiler-有什麼功能"><a href="#那-Profiler-有什麼功能" class="headerlink" title="那 Profiler 有什麼功能?"></a>那 Profiler 有什麼功能?</h1><p>Profiler 可以幫助我們觀察應用程序的效能分析，只需要三個步驟</p>
<h3 id="1-點擊藍色按鈕進行錄製，開始錄製時會呈現紅色"><a href="#1-點擊藍色按鈕進行錄製，開始錄製時會呈現紅色" class="headerlink" title="1. 點擊藍色按鈕進行錄製，開始錄製時會呈現紅色"></a>1. 點擊藍色按鈕進行錄製，開始錄製時會呈現紅色</h3><p><img src="https://imgur.com/o2ALF9U.jpg" alt="Profiler1"><br><br/></p>
<h3 id="2-請正常使用你的應用程序"><a href="#2-請正常使用你的應用程序" class="headerlink" title="2. 請正常使用你的應用程序"></a>2. 請正常使用你的應用程序</h3><br/>
<br/>
<br/>

<h3 id="3-停止錄製"><a href="#3-停止錄製" class="headerlink" title="3. 停止錄製"></a>3. 停止錄製</h3><p><img src="https://imgur.com/SzeBIaH.jpg" alt="Profiler3"></p>
<h1 id="讀取效能數據"><a href="#讀取效能數據" class="headerlink" title="讀取效能數據"></a>讀取效能數據</h1><h2 id="火焰圖"><a href="#火焰圖" class="headerlink" title="火焰圖"></a>火焰圖</h2><p>你可以看到渲染的元件的狀況，包含了哪些組件有重新渲染，及渲染時間</p>
<p>• 黃色 - 渲染時間比較久的組件<br>• 藍色 - 組件渲染時間相對較短<br>• 灰色 - 組件在提交期間根本沒有渲染</p>
<p><img src="https://imgur.com/LF58ZHW.jpg" alt="fire"></p>
<p><img src="https://imgur.com/yO1kvvQ.jpg" alt="fire2"><br>單選各個組件，可於右側看到詳細的渲染信息<br><br/><br><br/><br><br/></p>
<h2 id="排名圖"><a href="#排名圖" class="headerlink" title="排名圖"></a>排名圖</h2><p><img src="https://imgur.com/XiitXUS.jpg" alt="ranked"></p>
<p>當您單擊 Profiler 選項卡中的<code>Ranked</code>按鈕時，會看到 Ranked 圖表視圖。<br>此視圖根據渲染時間顯示組件的順序，花費更多時間的組件將位於頂部，由此視圖可以了解哪些組件對頁面重新加載影響較大。<br><br/><br><br/><br><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>如還想知道關於 Profiler 的資訊，可看看 <a href="https://blog.bitsrc.io/profiling-performance-of-react-apps-using-react-profiler-d02d77f3c96a">Profiling Performance of React Apps using React Profiler</a>的文章，裡面有更詳細的介紹，好的工具讓你開發效率事半功倍！!<br><br/></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.bitsrc.io/profiling-performance-of-react-apps-using-react-profiler-d02d77f3c96a">Profiling Performance of React Apps using React Profiler</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>React Developer Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>React基本組件介紹</title>
    <url>/2022/06/29/react-basic-component/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<a id="more"></a>

<h1 id="組件裡有什麼"><a href="#組件裡有什麼" class="headerlink" title="組件裡有什麼?"></a>組件裡有什麼?</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="comment">//static property靜態屬性</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static method靜態函式</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromProps</span>(<span class="params">nextProps, prevState</span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//state屬性</span></span><br><span class="line">    state = &#123;</span><br><span class="line">      x: <span class="number">1</span>,</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生命週期函式，生命週期裡的this一定是指本身class的組件</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自訂函式，函式this不一定指本身組件，但如宣告為屬性並用=&gt;this就為組件本身</span></span><br><span class="line">    onChange= <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//組件裡一定要有render函式，render函式一定要return一個元素</span></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可在組件外面定義屬性</span></span><br><span class="line">Item.propTypes = &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="事件處理與狀態更新"><a href="#事件處理與狀態更新" class="headerlink" title="事件處理與狀態更新"></a>事件處理與狀態更新</h1><p>狀態 ⇒ state<br>變更狀態 ⇒ setState<br>範例: 點擊按鈕後，將 title 的 hello 變更成 hi</p>
<p>Message.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    title: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  changeState = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      title: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;<span class="built_in">this</span>.state.title&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.changeState&#125;&gt;change state&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Message;</span><br></pre></td></tr></table></figure>
<p>自訂函式如果不是使用箭頭函式宣告的話，要加上 constructor，指定 this 為組件本身，<br>如果沒有指定 this，onClick 的 this 會指向 button，button 沒有 setState 屬性就會報錯，建議自訂函式還是以箭頭函式的方法宣告</p>
<p>Message.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    title: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.changeState = <span class="built_in">this</span>.changeState.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">changeState</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      title: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;<span class="built_in">this</span>.state.title&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.changeState&#125;&gt;change state&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Message;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="props-上面傳下來的屬性"><a href="#props-上面傳下來的屬性" class="headerlink" title="props: 上面傳下來的屬性"></a>props: 上面傳下來的屬性</h1><p>一樣的組件，但想要不同的內容，可以使用 props，<br>範例： ol 裡的每個 li 的文字分別為不同的文字<br>props 傳字串直接使用引號，如果傳其他型態要使用大括號 {}</p>
<p>Item.js (內層組件)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li&gt;&#123;<span class="built_in">this</span>.props.text&#125; &#123;<span class="built_in">this</span>.props.price + <span class="number">1</span>&#125;&lt;/li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Item;</span><br></pre></td></tr></table></figure>
<p>List.js (外層組件)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;ol&gt;</span><br><span class="line">        &lt;Item text=<span class="string">&#x27;hello&#x27;</span> price=&#123;<span class="number">10</span>&#125;/&gt;</span><br><span class="line">        &lt;Item text=<span class="string">&#x27;world&#x27;</span> price=<span class="string">&#x27;10&#x27;</span>/&gt;</span><br><span class="line">        &lt;Item text=<span class="string">&#x27;hello world&#x27;</span> price=<span class="string">&#x27;100&#x27;</span>/&gt;</span><br><span class="line">      &lt;/ol&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<br/>

<p>如標籤是 closing-tag 包起來，可用 this.props.children 取得文字</p>
<p>Item.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li&gt;&#123;<span class="built_in">this</span>.props.children&#125;&lt;/li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Item;</span><br></pre></td></tr></table></figure>
<p>List.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;ol&gt;</span><br><span class="line">        &lt;Item&gt;hello1&lt;/Item&gt;</span><br><span class="line">        &lt;Item&gt;hello2&lt;/Item&gt;</span><br><span class="line">        &lt;Item&gt;hello3&lt;/Item&gt;</span><br><span class="line">      &lt;/ol&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>props</tag>
        <tag>React</tag>
        <tag>React component</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 9】事件處理 - 我這人很簡單，有打卡就給讚</title>
    <url>/2022/10/26/react-event-handler/</url>
    <content><![CDATA[<p><img src="https://imgur.com/sfh7bTh.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境劇場］</strong></p>
<p>解師傅：我想到了一個活動，只要來店消費，並且做打卡的動作，就送一盤小菜</p>
<p>小當家：嘿！這主意不錯！分享傳送我們的資訊給大家，原來解師傅也是有在動腦的</p>
<p>解師傅：你是不是沒被我的鋼棍打過？👺</p>
<hr>
<h1 id="事件處理"><a href="#事件處理" class="headerlink" title="事件處理"></a>事件處理</h1><p>在 JavaScript 中，一定很多時候會使用到事件處理，不管是滑鼠事件亦或是鍵盤事件，React 在事件處理上的用法，基本上與 HTML DOM 的處理事件大同小異，幾個不同的地方是：</p>
<ul>
<li>事件的名稱在 React 中都是 <code>camelCase</code> (小駝峰)，而在 HTML DOM 中則是小寫</li>
<li>事件的值在 JSX 中是一個 <code>function</code>，而在 HTML DOM 中則是一個 <code>string</code></li>
</ul>
<p>Html DOM</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;punchCard()&quot;</span>&gt;</span></span><br><span class="line">  打卡分享送小菜</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>

<p>React DOM</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;punchCard&#125;</span>&gt;</span></span><br><span class="line">  打卡分享送小菜</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>
<br/>
<br/>

<ul>
<li>需明確呼叫 <code>preventDefault</code>，不能夠使用 <code>return false</code> 來避免瀏覽器預設行為</li>
</ul>
<p>Html DOM</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;console.log(&#x27;送小菜&#x27;); return false&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>打卡分享<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>

<p>React DOM</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Form() &#123;</span><br><span class="line">  function handleSubmit(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">	console.log(&#39;送小菜&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;form onSubmit&#x3D;&#123;handleSubmit&#125;&gt;</span><br><span class="line">	  &lt;button type&#x3D;&quot;submit&quot;&gt;打卡分享&lt;&#x2F;button&gt;</span><br><span class="line">	&lt;&#x2F;form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
<br/>
<br/>

<h1 id="傳遞參數給-Event-Handler"><a href="#傳遞參數給-Event-Handler" class="headerlink" title="傳遞參數給 Event Handler"></a>傳遞參數給 Event Handler</h1><p>在渲染列表時，常常會遇到需要帶入參數的時候，這時候可以使用 <code>arrow function</code> 將參數傳入</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">onClick=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> punchCard(name, e)&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p><code>e</code> 代表「事件物件」(Event Object)，裡面包含了所有與這個事件有關的屬性，並且以「參數」的形式傳給 Event Handler，以下面的範例來看，<code>e</code> 將會以第二個參數被傳遞下去</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> menu = [<span class="string">&quot;蘆筍沙拉&quot;</span>, <span class="string">&quot;辣炒空心菜&quot;</span>, <span class="string">&quot;雞蛋豆腐&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> punchCard = <span class="function">(<span class="params">name, e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">    <span class="built_in">console</span>.log(e.target);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;menu.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">        &lt;button</span><br><span class="line">          type=<span class="string">&quot;button&quot;</span></span><br><span class="line">          key=&#123;item&#125;</span><br><span class="line">          onClick=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> punchCard(item, e)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;item&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>情境說明：</p>
<ul>
<li>點擊按鈕將會在 console 印出名稱與按鈕元素<br/><br/>

</li>
</ul>
<iframe src="https://codesandbox.io/embed/react-function-ikctj8?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="React-function"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>
<br/>

<h1 id="傳遞-index-更新指定項目"><a href="#傳遞-index-更新指定項目" class="headerlink" title="傳遞 index 更新指定項目"></a>傳遞 index 更新指定項目</h1><p>在渲染列表後，我們希望在點擊的那一個項目出現相關提示，這時候可以用索引值 <code>index</code>，以參數方式傳遞</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> menu = [<span class="string">&quot;蘆筍沙拉&quot;</span>, <span class="string">&quot;辣炒空心菜&quot;</span>, <span class="string">&quot;雞蛋豆腐&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&quot;蘆筍沙拉&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [cardIndex, setCardIndex] = useState();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> punchCard = <span class="function">(<span class="params">name, index</span>) =&gt;</span> &#123;</span><br><span class="line">    setName(name);</span><br><span class="line">    setCardIndex(index);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;</span><br><span class="line">        我在 React 熱炒店吃了好好吃的</span><br><span class="line">        &lt;span&gt;&#123;name&#125;&lt;/span&gt;</span><br><span class="line">        ，我們一起來吃吧！</span><br><span class="line">      &lt;/h1&gt;</span><br><span class="line">      &#123;menu.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">        &lt;div key=&#123;item&#125;&gt;</span><br><span class="line">          &lt;h2&gt;</span><br><span class="line">            &#123;item&#125;</span><br><span class="line">            &#123;cardIndex === index &amp;&amp; (<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>已分享給好友<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>)&#125;</span><br><span class="line">          &lt;/h2&gt;</span><br><span class="line">          &lt;button</span><br><span class="line">            type=<span class="string">&quot;button&quot;</span></span><br><span class="line">            onClick=&#123;<span class="function">() =&gt;</span> punchCard(item, index)&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            打卡送小菜</span><br><span class="line">          &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>情境說明：</p>
<ul>
<li>點擊打卡按鈕會變換名稱，並顯示提示文字「已分享給好友」</li>
</ul>
<p>useState 詳細介紹將會在下一篇講到，在此大概提一下：</p>
<p>useState 是一個管理狀態的 Hook</p>
<p>cardIndex 為目前事件的 index</p>
<p>setCardIndex 會更新 cardIndex</p>
<p>menu 的 <code>index</code> 會以參數傳入 <code>punchCard</code>，接著 <code>setCardIndex</code> 會更新目前的 <code>cardIndex</code>，只要 menu 的索引值等於 <code>cardIndex</code>，就會跳出「已分享給好友」的字樣<br><br/></p>
<iframe src="https://codesandbox.io/embed/react-function-index-kd0glf?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="React-function-index"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>React 事件處理需為小駝峰，也可以將參數帶入函式，明天會來講第一個要介紹的 Hook <code>useState</code>，明天見囉！!</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>event-handler</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 25】串接 API，透過 Fetch 將遠端資料渲染在畫面</title>
    <url>/2022/12/04/react-fetch/</url>
    <content><![CDATA[<p><img src="https://imgur.com/nsetC1Y.jpg" alt="cover"></p>
<a id="more"></a>

<p>串接 API 的方式有很多種，你可以使用任何喜歡的 Ajax 函式庫來串接，如 Axios、ky 等等…，這邊將會以 JavaScript 原生方法 Fetch 來串接遠端資料，最後會將資料渲染在畫面上<br><br><br><br></p>
<h1 id="認識-Fetch-API"><a href="#認識-Fetch-API" class="headerlink" title="認識 Fetch API"></a>認識 Fetch API</h1><p>Fetch 為 ES6 取得遠端資料的原生方法，並以 Promise 物件來作回應，Promise 物件生成後，可以用 Promise 的原型方法來執行取得的結果，一開始會先得到一個 ReadableStream 物件，需透過 json() 轉成可用的資訊，之後就可以取得資料囉！<br><br><br><br></p>
<h1 id="Fetch-API-使用方法"><a href="#Fetch-API-使用方法" class="headerlink" title="Fetch API 使用方法"></a>Fetch API 使用方法</h1><h2 id="Fetch-基本用法"><a href="#Fetch-基本用法" class="headerlink" title="Fetch 基本用法"></a>Fetch 基本用法</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">fetch( requestUrl, &#123;<span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>&#125;) <span class="comment">// 設定使用 GET</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// res 為 ReadableStream 的物件，透過 json() 轉成可用的資訊</span></span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line"></span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 接到 request data後要做的事情</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 發生錯誤</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Promise 物件</p>
<p><code>.then()</code> 綁定當 fulfilled 或 rejected 狀態時，分別要執行的函數</p>
<p><code>.catch()</code> 綁定當 rejected 狀態時，要執行的函數<br><br><br><br></p>
<h2 id="Fetch-帶入-headers、body"><a href="#Fetch-帶入-headers、body" class="headerlink" title="Fetch 帶入 headers、body"></a>Fetch 帶入 headers、body</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">fetch(requestUrl, &#123;</span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="comment">// headers 加入 json 格式</span></span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// body 將 json 轉字串送出</span></span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> response.json();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;錯誤:&#x27;</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>body</code> 所送出的資料必須先轉純字串後才能送出<br><br><br><br></p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fetchData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetch(<span class="string">&quot;https://randomuser.me/api/&quot;</span>, &#123; <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line">      .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line"></span><br><span class="line">      .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        setState(data[<span class="string">&quot;results&quot;</span>][<span class="number">0</span>]);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;h1&gt;React 熱炒店會員資料&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;img src=&#123;state.picture?.large&#125; alt=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">        姓名：&#123;state.name?.first&#125; &lt;br /&gt;</span><br><span class="line">        性別：&#123;state.gender&#125; &lt;br /&gt;</span><br><span class="line">        E-mail：&#123;state.email&#125; &lt;br /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們利用 <a href="https://randomuser.me/api/">https://randomuser.me/api/</a> 隨機產生出會員資料</p>
<ul>
<li>利用 fetch 做串接</li>
<li>取得 data 後，儲存到 state</li>
<li>渲染畫面</li>
</ul>
<p><img src="https://imgur.com/gCP6Fek.jpg" alt="fetch"></p>
<p>會員資料就顯示出來啦~~~~</p>
<iframe src="https://codesandbox.io/embed/react-fetch-api-8nf94q?fontsize=14&hidenavigation=1&theme=light"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="react-fetch-api"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<br>
<br>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>利用簡單的 fetch API 串接，將資料渲染到畫面，就可以完成很多事啦！我自己也很習慣用 <a href="https://www.npmjs.com/package/axios">Axios</a> 做串接 API，大家有興趣也可以去研究看看唷！!<br><br><br><br></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.notes-hz.com/post/232">ReactJS 入門 － 使用 fetchAPI 送出 HTTP 請求</a><br><a href="https://www.casper.tw/javascript/2017/12/28/javascript-fetch/">ES6 原生 Fetch 遠端資料方法</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>Fetch</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 4】React 專案結構說明與配置(File Structure)</title>
    <url>/2022/10/19/react-file-structure/</url>
    <content><![CDATA[<p><img src="https://imgur.com/dGZ8NgX.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境劇場］</strong></p>
<p>CRA 師傅：賀！店面已經裝潢好囉！剩下的擺飾交給你們去運用囉～</p>
<p>解師傅：太好了～真是感謝 CRA 師傅的幫忙，這店面空間很大呢～老闆，我買了一些餐廳需要使用的桌子和一些裝飾，我們一起來想想看怎麼擺設好嗎？</p>
<hr>
<h1 id="專案結構"><a href="#專案結構" class="headerlink" title="專案結構"></a>專案結構</h1><p>完成前置作業的安裝後，開啟專案，會看到以下的結構，這是 Create React App 預設的專案結構</p>
<p><img src="https://imgur.com/f2emj0X.jpg" alt="Structure"></p>
<p>先介紹一下目前看到的檔案功能<br/></p>
<ul>
<li>node_modules 資料夾</li>
</ul>
<p>下載套件/函式庫(package/library)在 local 的存放位置，也就是執行 <code>npm install</code> 後，NPM 預設會將下載回來的套件都放在 <code>node_modules</code><br><br/><br><br/></p>
<ul>
<li>public 資料夾</li>
</ul>
<p>公開的檔案資料夾，可以放入不會被編譯的檔案</p>
<p>index.html：為頁面模版，用 react 開發的結果會 render 至檔案的 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code><br><br/><br><br/></p>
<ul>
<li>src 資料夾</li>
</ul>
<p>主要開發環境的檔案，放置 js、css、圖片等等，這是我們等等需要規劃架構的地方</p>
<p>index.js：開發 React 專案的進入點，會將 react 組件渲染到 <code>public/index.html</code> 的根元素 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code></p>
<p>reportWebVitals.js：Web Vitals 是由 Google 分析大量使用者資料後，用來量化網站使用者體驗的指標，藉由測量 Web Vitals 分數讓開發者能更有方向的優化網站體驗<br><br/><br><br/></p>
<ul>
<li>.gitignore</li>
</ul>
<p>要被 Git 忽略的檔案。只要在 <code>.gitignore</code> 設定不想存在 Git 的檔案或資料夾名稱，即使檔案存在這個目錄裡，但它已被 Git 無視，就不會被推上 Git<br><br/><br><br/></p>
<ul>
<li>package.json</li>
</ul>
<p>運行環境所使用的安裝套件管理，只會記錄你通過 <code>npm install</code> 方式安裝的模組資訊，不會記錄子模組資訊</p>
<p>在 <code>npm install</code> 後，node 會先從 <code>package.json</code> 檔案中讀取所有 <code>dependencies</code> 資訊，根據 <code>dependencies</code> 中的資訊與 <code>node_modules</code> 中的模組進行對比，沒有的直接下載，已有的檢查更新(因有 <code>package-lock.json</code> 就不會自動更新版本)<br><br/><br><br/></p>
<ul>
<li>package-lock.json</li>
</ul>
<p>鎖定所有套件具體來源和版本號，包括主模組和所有套件子模組，在執行 <code>npm install</code> 的時候，node 從 <code>package.json</code> 檔案讀取模組名稱，從 <code>package-lock.json</code> 檔案中獲取版本號，然後進行下載或者更新<br><br/><br><br/></p>
<h1 id="常見的基本架構"><a href="#常見的基本架構" class="headerlink" title="常見的基本架構"></a>常見的基本架構</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── components</span><br><span class="line">├── pages</span><br><span class="line">├── images</span><br></pre></td></tr></table></figure>
<ul>
<li>components</li>
</ul>
<p>可以共用的各種組件，可以 <code>import</code> 在任何頁面中，在 components 資料夾中，因組件可能會有很多，通常會再做分類，方便查找與維護</p>
<p>常見的分類為，「以種類分類」或「以功能分類」兩種，個人是偏好功能型的分類</p>
<p><strong>以種類分類</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components</span><br><span class="line">├── btn</span><br><span class="line">  ├── PrimaryButton.js</span><br><span class="line">  ├── SecondaryButton.js</span><br><span class="line"></span><br><span class="line">├── modal</span><br><span class="line">  ├── LoginModal.js</span><br><span class="line">  ├── SuccessModal.js</span><br><span class="line"></span><br><span class="line">├── card</span><br><span class="line">  ├── ImageCard.js</span><br></pre></td></tr></table></figure>
<p>依照組件的類型來分類，按鈕組件都放置 btn 資料夾，modal 組件都歸類在 modal 資料夾，以此類推<br><br/><br><br/></p>
<p><strong>以功能分類</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components</span><br><span class="line">├── user</span><br><span class="line">  ├── UserCard.js</span><br><span class="line">  ├── UserButton.js</span><br><span class="line"></span><br><span class="line">├── about</span><br><span class="line">  ├── AboutCard.js</span><br><span class="line"></span><br><span class="line">├── Footer.js</span><br><span class="line">├── Header.js</span><br></pre></td></tr></table></figure>
<p>依功能做分類，好處是可以依照功能直接找到組件，查找組件時較清楚<br><br/><br><br/></p>
<ul>
<li>pages</li>
</ul>
<p>專案中有使用到 Route 路由的頁面，在後面的章節會講到 Route 的部分<br><br/><br><br/></p>
<ul>
<li>images</li>
</ul>
<p>圖片檔案，如 jpg、png、gif… 等等<br><br/><br><br/></p>
<h1 id="依專案需求新增資料夾"><a href="#依專案需求新增資料夾" class="headerlink" title="依專案需求新增資料夾"></a>依專案需求新增資料夾</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── components</span><br><span class="line">├── pages</span><br><span class="line">├── assets</span><br><span class="line">├── style</span><br><span class="line">├── api</span><br><span class="line">├── hooks</span><br><span class="line">├── utils</span><br></pre></td></tr></table></figure>
<p>專案結構沒有一定，你可以依專案的需求再自行新增資料夾<br><br/><br><br/></p>
<h1 id="避免太多巢狀"><a href="#避免太多巢狀" class="headerlink" title="避免太多巢狀"></a>避免太多巢狀</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Component form <span class="string">&#x27;../Component.js&#x27;</span> <span class="comment">// O 導入時較容易</span></span><br><span class="line"><span class="keyword">import</span> Component form <span class="string">&#x27;../../../../../../Component.js&#x27;</span> <span class="comment">// X 不利於相對導入或檔案移動</span></span><br></pre></td></tr></table></figure>
<p>一個專案中建議使用最多三層或四層資料夾，除非你有必須使用深度巢狀資料夾的原因，過多的巢狀會讓相對導入或檔案移動時變得困難<br><br/><br><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>基本怎麼放專案資料夾並沒有任何對錯，React 並沒有強制的專案結構，只要團隊討論好，大家對此架構有共識就好，一開始不用花太多時間在思考架構上，畢竟在你寫了一些真正的程式碼後你很可能會想重新思考，今天的分享就到這邊，明天見囉！！<br><br/><br><br/></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://reactjs.org/docs/faq-structure.html">React 官方 File Structure</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 15】React 表單處理，更新資料及儲存表單</title>
    <url>/2022/11/03/react-form-IT/</url>
    <content><![CDATA[<p><img src="https://imgur.com/eXSWUsy.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境任務］</strong></p>
<p>解師傅：我們的餐廳生意越來越好了，為了不讓客人排隊，我想客製一個點餐機～</p>
<p>小當家：啥？這是什麼玩意？</p>
<p>解師傅：直接在點餐機上選擇餐點跟輸入客人的資料，我們既不用自己點餐，客人也不用排隊，根本一舉兩得阿！</p>
<p>小當家：解師傅，你真是個天才！</p>
<p>現在我們已經有餐點了，還需要方便客人填寫資料的表單，一起動手做吧！</p>
<hr>
<h1 id="表單處理"><a href="#表單處理" class="headerlink" title="表單處理"></a>表單處理</h1><p>還記得在 <a href="https://ithelp.ithome.com.tw/articles/10291393">DAY 2</a> 時有提到，React 不做資料綁定，所以在資料有變更時，常常會用 <code>onChange</code> 去做資料的更新</p>
<p>由於一個表單可能會有多個欄位，所以這邊使用 object 來當預設值，方便之後擴充<br>為了不混淆，會將每個欄位拆開來看，以下分別為各種類型 <code>input</code>、<code>select</code>、<code>radio</code>、<code>checkbox</code>、<code>file</code> 的欄位運用<br><br/><br><br/><br><br/></p>
<h1 id="input-文字輸入"><a href="#input-文字輸入" class="headerlink" title="input 文字輸入"></a>input 文字輸入</h1><h2 id="input-類型為-text"><a href="#input-類型為-text" class="headerlink" title="input 類型為 text"></a>input 類型為 text</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = useState(&#123;</span><br><span class="line">    name: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeName = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      name: e.target.value</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;label htmlFor=<span class="string">&quot;name&quot;</span>&gt;姓名&lt;/label&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        id=<span class="string">&quot;name&quot;</span></span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">		name=<span class="string">&quot;name&quot;</span></span><br><span class="line">        value=&#123;form.name&#125;</span><br><span class="line">        onChange=&#123;changeName&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>input 會接收 <code>value</code> 和 <code>onChange</code> 事件，如 input 輸入的值變更，setForm 會將 <code>form.name</code> 變更為新的值，以達成 input 雙向綁定<br><br/><br><br/><br><br/></p>
<h2 id="input-類型為其他型別"><a href="#input-類型為其他型別" class="headerlink" title="input 類型為其他型別"></a>input 類型為其他型別</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = useState(&#123;</span><br><span class="line">    number: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeNumber = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      number: <span class="built_in">parseInt</span>(e.target.value, <span class="number">10</span>)</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;label htmlFor=<span class="string">&quot;num&quot;</span>&gt;此次用餐人數&lt;/label&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        id=<span class="string">&quot;num&quot;</span></span><br><span class="line">        type=<span class="string">&quot;number&quot;</span></span><br><span class="line">		name=<span class="string">&quot;number&quot;</span></span><br><span class="line">        value=&#123;form.number&#125;</span><br><span class="line">        onChange=&#123;changeNumber&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>「value 傳入的值一定會是字串」，所以如想要的值為其他型別，要記得轉型，上例的 input 為 Number 型態，需再使用 <code>parseInt</code> 將字串轉型為 number<br><br/><br><br/><br><br/></p>
<h1 id="Select-下拉選單"><a href="#Select-下拉選單" class="headerlink" title="Select 下拉選單"></a>Select 下拉選單</h1><h2 id="Select-綁定字串陣列"><a href="#Select-綁定字串陣列" class="headerlink" title="Select 綁定字串陣列"></a>Select 綁定字串陣列</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> age = [</span><br><span class="line">    <span class="string">&quot;18歲以下&quot;</span>,</span><br><span class="line">    <span class="string">&quot;18歲~29歲&quot;</span>,</span><br><span class="line">    <span class="string">&quot;30歲~39歲&quot;</span>,</span><br><span class="line">    <span class="string">&quot;40歲~49歲&quot;</span>,</span><br><span class="line">    <span class="string">&quot;50歲~59歲&quot;</span>,</span><br><span class="line">    <span class="string">&quot;60歲以上&quot;</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = useState(&#123;</span><br><span class="line">    age: age[<span class="number">0</span>]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeAge = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      age: e.target.value</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;label&gt;請選擇您的年齡區間&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">      &lt;select name=<span class="string">&quot;age&quot;</span> value=&#123;form.age&#125; onChange=&#123;changeAge&#125;&gt;</span><br><span class="line">        &#123;age.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">          &lt;option key=&#123;item.value&#125; value=&#123;item&#125;&gt;&#123;item&#125;&lt;/option&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">	  &lt;h1&gt;您選擇了: &#123;form.age&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只有字串的陣列很單純，預設值設定第 0 筆，並用 map 渲染出列表，select 接收 <code>value</code> 和 <code>onChange</code> 事件，setForm 會將 <code>form.age</code> 變更為新的值，達成 select 雙向綁定<br><br/><br><br/><br><br/></p>
<h2 id="Select-綁定物件陣列"><a href="#Select-綁定物件陣列" class="headerlink" title="Select 綁定物件陣列"></a>Select 綁定物件陣列</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> age = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;18歲以下&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;0&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;18歲~29歲&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;30歲~39歲&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;40歲~49歲&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;3&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;50歲~59歲&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;4&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;60歲以上&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;5&quot;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = useState(&#123;</span><br><span class="line">    age: age[<span class="number">0</span>].value</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeAge = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      age: e.target.value</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;label&gt;請選擇您的年齡區間&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">      &lt;select name=<span class="string">&quot;age&quot;</span> value=&#123;form.age&#125; onChange=&#123;changeAge&#125;&gt;</span><br><span class="line">        &#123;age.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">          &lt;option key=&#123;item.value&#125; value=&#123;item.value&#125;&gt;</span><br><span class="line">            &#123;item.label&#125;</span><br><span class="line">          &lt;/option&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">      &lt;h1&gt;您選擇了: &#123;age.find(<span class="function">(<span class="params">item</span>) =&gt;</span> item.value === form.age).label&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有時候 select 的文字，跟要傳入的 value 是不一樣的，這時候可以用物件陣列，做法跟綁定字串陣列差不多，只要綁定物件裡的 value 就可以了</p>
<p>特別注意的是，要顯示選擇的項目，因為 <code>form.age</code> 綁定的是 value 值，我們想顯示 label 需要從 age 陣列去找 value 跟 <code>form.age</code> 相同的的物件，再取得物件的 label<br><br/><br><br/><br><br/></p>
<h1 id="radio-單選"><a href="#radio-單選" class="headerlink" title="radio 單選"></a>radio 單選</h1><h2 id="radio-綁定物件"><a href="#radio-綁定物件" class="headerlink" title="radio 綁定物件"></a>radio 綁定物件</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = useState(&#123;</span><br><span class="line">    gender: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeGender = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      gender: e.target.value</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;label&gt;性別&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">&quot;radio&quot;</span></span><br><span class="line">          id=<span class="string">&quot;male&quot;</span></span><br><span class="line">		  name=<span class="string">&quot;gender&quot;</span></span><br><span class="line">          value=<span class="string">&quot;male&quot;</span></span><br><span class="line">          onChange=&#123;changeGender&#125;</span><br><span class="line">          checked=&#123;form.gender === <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;label htmlFor=<span class="string">&quot;male&quot;</span>&gt;男性&lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">&quot;radio&quot;</span></span><br><span class="line">          id=<span class="string">&quot;female&quot;</span></span><br><span class="line">		  name=<span class="string">&quot;gender&quot;</span></span><br><span class="line">          value=<span class="string">&quot;female&quot;</span></span><br><span class="line">          onChange=&#123;changeGender&#125;</span><br><span class="line">          checked=&#123;form.gender === <span class="string">&quot;female&quot;</span>&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;label htmlFor=<span class="string">&quot;female&quot;</span>&gt;女性&lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用 <code>value</code> 和 <code>onChange</code> 達成雙向綁定，radio 還有 <code>checked</code> 屬性，依據 form.gender 去判斷是否 checked<br><br/><br><br/><br><br/></p>
<h2 id="radio-綁定陣列"><a href="#radio-綁定陣列" class="headerlink" title="radio 綁定陣列"></a>radio 綁定陣列</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">const</span> gender = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;男性&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;male&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;女性&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;female&quot;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = useState(&#123;</span><br><span class="line">    gender: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeGender = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      gender: e.target.value</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;label&gt;性別&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">      &#123;gender.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">        &lt;div key=&#123;item.value&#125;&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;radio&quot;</span></span><br><span class="line">            id=&#123;item.value&#125;</span><br><span class="line">			name=<span class="string">&quot;gender&quot;</span></span><br><span class="line">            value=&#123;item.value&#125;</span><br><span class="line">            onChange=&#123;changeGender&#125;</span><br><span class="line">            checked=&#123;form.gender === item.value&#125;</span><br><span class="line">          /&gt;</span><br><span class="line"></span><br><span class="line">          &lt;label htmlFor=&#123;item.value&#125;&gt;</span><br><span class="line">            &#123;item.label&#125;</span><br><span class="line">          &lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將項目整理成陣列，用 map 渲染列表，並綁定 <code>value</code>、<code>checked</code> 的值<br><br/><br><br/><br><br/></p>
<h1 id="checkbox-多選"><a href="#checkbox-多選" class="headerlink" title="checkbox 多選"></a>checkbox 多選</h1><h2 id="checkbox-綁定物件"><a href="#checkbox-綁定物件" class="headerlink" title="checkbox 綁定物件"></a>checkbox 綁定物件</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> purpose = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;約會聚餐&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;date&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;朋友聚會&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;friend&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;商務用餐&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;business&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;慶祝生日&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;birthday&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;其他&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;others&quot;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = useState(&#123;</span><br><span class="line">    purpose: &#123;</span><br><span class="line">      date: <span class="literal">false</span>,</span><br><span class="line">      friend: <span class="literal">false</span>,</span><br><span class="line">      business: <span class="literal">false</span>,</span><br><span class="line">      birthday: <span class="literal">false</span>,</span><br><span class="line">      others: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changePurpose = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = e.target.value;</span><br><span class="line"></span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      purpose: &#123;</span><br><span class="line">        ...state.purpose,</span><br><span class="line">        [key]: !state.purpose[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;label&gt;此次用餐目的&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">	  &#123;purpose.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">        &lt;div key=&#123;item.value&#125;&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">			name=<span class="string">&quot;purpose&quot;</span></span><br><span class="line">            value=&#123;item.value&#125;</span><br><span class="line">            id=&#123;item.value&#125;</span><br><span class="line">            checked=&#123;form.purpose[item.value]&#125;</span><br><span class="line">            onChange=&#123;changePurpose&#125;</span><br><span class="line">          /&gt;</span><br><span class="line"></span><br><span class="line">          &lt;label htmlFor=&#123;item.value&#125;&gt;</span><br><span class="line">            &#123;item.label&#125;</span><br><span class="line">          &lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>綁定物件的 <code>boolean</code> 值去控制是否 <code>checked</code>，並在 setForm 做開關的動作<br><br/><br><br/><br><br/></p>
<h2 id="checkbox-綁定陣列"><a href="#checkbox-綁定陣列" class="headerlink" title="checkbox 綁定陣列"></a>checkbox 綁定陣列</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> purpose = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;約會聚餐&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;date&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;朋友聚會&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;friend&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;商務用餐&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;business&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;慶祝生日&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;birthday&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;其他&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;others&quot;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = useState(&#123;</span><br><span class="line">    purpose: []</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changePurpose = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = e.target.value;</span><br><span class="line"></span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (state.purpose.includes(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          purpose: state.purpose.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item !== value)</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          purpose: [...state.purpose, value]</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">	  &lt;label&gt;此次用餐目的&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">      &#123;purpose.map(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> (</span><br><span class="line">        &lt;div key=&#123;item.value&#125;&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">            value=&#123;item.value&#125;</span><br><span class="line">			name=<span class="string">&quot;purpose&quot;</span></span><br><span class="line">            id=&#123;item.value&#125;</span><br><span class="line">            checked=&#123;form.purpose.includes(item.value)&#125;</span><br><span class="line">            onChange=&#123;changePurpose&#125;</span><br><span class="line">          /&gt;</span><br><span class="line"></span><br><span class="line">          &lt;label htmlFor=&#123;item.value&#125;&gt;</span><br><span class="line">            &#123;item.label&#125;</span><br><span class="line">          &lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>陣列會傳入有 <code>checked</code> 的 value，如點擊已 checked 的項目，則會用 <code>filter</code> 過濾掉此 value<br><br/><br><br/><br><br/></p>
<h1 id="file-檔案上傳與圖片預覽"><a href="#file-檔案上傳與圖片預覽" class="headerlink" title="file 檔案上傳與圖片預覽"></a>file 檔案上傳與圖片預覽</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = useState(&#123;</span><br><span class="line">    file: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeFile = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 取得第0筆檔案</span></span><br><span class="line">    <span class="keyword">const</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// FileReader 讀取瀏覽器選中的檔案</span></span><br><span class="line">    <span class="keyword">const</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="comment">// 讀取完改變 img</span></span><br><span class="line">    fileReader.addEventListener(<span class="string">&quot;load&quot;</span>, fileLoad);</span><br><span class="line">    <span class="comment">// 將圖片繪出，轉換成 Base64 編碼</span></span><br><span class="line">    fileReader.readAsDataURL(file);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fileLoad = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此處的 e 為 fileReader</span></span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      file: e.target.result</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;label&gt;相關圖片&lt;/label&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">&quot;file&quot;</span></span><br><span class="line">          id=<span class="string">&quot;upload&quot;</span></span><br><span class="line">		  name=<span class="string">&quot;file&quot;</span></span><br><span class="line">          onChange=&#123;changeFile&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;img src=&#123;form.file&#125; width=<span class="string">&quot;100%&quot;</span> alt=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>type 為 file 時，沒辦法用 value 指定，透過 <code>fileReader</code> 讀取檔案，再轉換給 form.file<br><br/><br><br/><br><br/></p>
<h1 id="統一-function"><a href="#統一-function" class="headerlink" title="統一 function"></a>統一 function</h1><p>因為 changeName、changeAge、changeGender 的 function 邏輯都是一樣的，所以可以在 <code>onChange</code> 時統一讀取同一個 function，如下讀取 changeValue，取得欄位的 <code>name</code> 屬性，並賦予新值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> changeValue = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = e.target.name;</span><br><span class="line"></span><br><span class="line">  setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">    ...state,</span><br><span class="line">    [name]: e.target.value</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br/>

<p>完整 form 表單如下</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> age = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;18歲以下&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;0&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;18歲~29歲&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;30歲~39歲&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;40歲~49歲&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;3&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;50歲~59歲&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;4&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;60歲以上&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;5&quot;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> gender = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;男性&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;male&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;女性&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;female&quot;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> purpose = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;約會聚餐&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;date&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;朋友聚會&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;friend&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;商務用餐&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;business&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;慶祝生日&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;birthday&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&quot;其他&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;others&quot;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [form, setForm] = useState(&#123;</span><br><span class="line">    name: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    number: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    gender: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    age: age[<span class="number">0</span>].value,</span><br><span class="line">    purpose: [],</span><br><span class="line">    file: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeNumber = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      number: <span class="built_in">parseInt</span>(e.target.value, <span class="number">10</span>)</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeValue = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = e.target.name;</span><br><span class="line"></span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      [name]: e.target.value</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changePurpose = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = e.target.value;</span><br><span class="line"></span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (state.purpose.includes(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          purpose: state.purpose.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item !== value)</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          purpose: [...state.purpose, value]</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeFile = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 取得第0筆檔案</span></span><br><span class="line">    <span class="keyword">const</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// FileReader 讀取瀏覽器選中的檔案</span></span><br><span class="line">    <span class="keyword">const</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="comment">// 讀取完改變 img</span></span><br><span class="line">    fileReader.addEventListener(<span class="string">&quot;load&quot;</span>, fileLoad);</span><br><span class="line">    <span class="comment">// 將圖片繪出，轉換成 Base64 編碼</span></span><br><span class="line">    fileReader.readAsDataURL(file);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fileLoad = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此處的 e 為 fileReader</span></span><br><span class="line">    setForm(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...state,</span><br><span class="line">      file: e.target.result</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;React 熱炒店訂購單&lt;/h1&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">            姓名</span><br><span class="line">          &lt;/label&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            id=<span class="string">&quot;name&quot;</span></span><br><span class="line">            type=<span class="string">&quot;text&quot;</span></span><br><span class="line">            name=<span class="string">&quot;name&quot;</span></span><br><span class="line">            value=&#123;form.name&#125;</span><br><span class="line">            onChange=&#123;changeValue&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;num&quot;</span>&gt;</span><br><span class="line">            此次用餐人數</span><br><span class="line">          &lt;/label&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            id=<span class="string">&quot;num&quot;</span></span><br><span class="line">            type=<span class="string">&quot;number&quot;</span></span><br><span class="line">            value=&#123;form.number&#125;</span><br><span class="line">            onChange=&#123;changeNumber&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;label&gt;性別&lt;/label&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &#123;gender.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">              &lt;div key=&#123;item.value&#125;&gt;</span><br><span class="line">                &lt;input</span><br><span class="line">                  type=<span class="string">&quot;radio&quot;</span></span><br><span class="line">                  name=<span class="string">&quot;gender&quot;</span></span><br><span class="line">                  id=&#123;item.value&#125;</span><br><span class="line">                  value=&#123;item.value&#125;</span><br><span class="line">                  onChange=&#123;changeValue&#125;</span><br><span class="line">                  checked=&#123;form.gender === item.value&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;label htmlFor=&#123;item.value&#125;&gt;</span><br><span class="line">                  &#123;item.label&#125;</span><br><span class="line">                &lt;/label&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            ))&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;label&gt;請選擇您的年齡區間&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">          &lt;select</span><br><span class="line">            name=<span class="string">&quot;age&quot;</span></span><br><span class="line">            value=&#123;form.age&#125;</span><br><span class="line">            onChange=&#123;changeValue&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &#123;age.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">              &lt;option key=&#123;item.value&#125; value=&#123;item.value&#125;&gt;</span><br><span class="line">                &#123;item.label&#125;</span><br><span class="line">              &lt;/option&gt;</span><br><span class="line">            ))&#125;</span><br><span class="line">          &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">          &lt;h6&gt;</span><br><span class="line">            您選擇了: &#123;age.find(<span class="function">(<span class="params">item</span>) =&gt;</span> item.value === form.age).label&#125;</span><br><span class="line">          &lt;/h6&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;label&gt;此次用餐目的&lt;/label&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &#123;purpose.map(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> (</span><br><span class="line">              &lt;div key=&#123;item.value&#125;&gt;</span><br><span class="line">                &lt;input</span><br><span class="line">                  type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">                  value=&#123;item.value&#125;</span><br><span class="line">                  id=&#123;item.value&#125;</span><br><span class="line">                  checked=&#123;form.purpose.includes(item.value)&#125;</span><br><span class="line">                  onChange=&#123;changePurpose&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;label htmlFor=&#123;item.value&#125;&gt;</span><br><span class="line">                  &#123;item.label&#125;</span><br><span class="line">                &lt;/label&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            ))&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;label&gt;相關圖片&lt;/label&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type=<span class="string">&quot;file&quot;</span></span><br><span class="line">              id=<span class="string">&quot;upload&quot;</span></span><br><span class="line">              onChange=&#123;changeFile&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">            &lt;button</span><br><span class="line">              type=<span class="string">&quot;button&quot;</span></span><br><span class="line">              id=<span class="string">&quot;upload&quot;</span></span><br><span class="line">            &gt;</span><br><span class="line">              上傳</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">            &lt;img src=&#123;form.file&#125; width=<span class="string">&quot;100%&quot;</span> /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>［任務解題］</strong></p>
<p>依照上面的範例，加上了 className，已完成訂購單囉！你真是幫了餐廳一個大忙！</p>
<iframe src="https://codesandbox.io/embed/react-form-jkzuio?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-form"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/><br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>表單的處理在 React 也是一門學問，React 不像其他框架有做雙向綁定的模版，所以利用 onChange 可以幫助我們綁定新的值，就達到雙向綁定的效果囉！</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>react form</tag>
        <tag>react input</tag>
        <tag>react select</tag>
        <tag>react checkbox</tag>
        <tag>react radio</tag>
      </tags>
  </entry>
  <entry>
    <title>React表單處理-input、select、radio、checkbox、file</title>
    <url>/2022/07/02/react-form/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<p>React 的表單，常會用 onChange 去做處理，以下是一些 input、select、radio、checkbox、file 的範例記錄。</p>
<a id="more"></a>

<h1 id="文字輸入-雙向綁定-input"><a href="#文字輸入-雙向綁定-input" class="headerlink" title="文字輸入-雙向綁定 input"></a>文字輸入-雙向綁定 input</h1><p>接收 value 和 onChange 事件，如 input 輸入的值變更，setState 會將 value 變更為新的值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    text: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  onChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      text: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; text &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> value=&#123;text&#125; onChange=&#123;<span class="built_in">this</span>.onChange&#125; /&gt;</span><br><span class="line">        &lt;h1&gt;&#123;text&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Input;</span><br></pre></td></tr></table></figure>
<br/>

<p>value 傳入的一定會是字串，所以如想要的值為其他型別，要記得轉型，以下為 Number 型態，parseInt 將字串轉為 number</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    num: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  onChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      num: <span class="built_in">parseInt</span>(e.target.value, <span class="number">10</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;number&quot;</span> value=&#123;num&#125; onChange=&#123;<span class="built_in">this</span>.onChange&#125; /&gt;</span><br><span class="line">        &lt;h1&gt;&#123;num&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Input;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="下拉選單-Select"><a href="#下拉選單-Select" class="headerlink" title="下拉選單-Select"></a>下拉選單-Select</h1><p><strong>綁定字串陣列</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> animals = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;mouse&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Select</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    animal: animals[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  onChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      animal: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; animal &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;select value=&#123;animal&#125; onChange=&#123;<span class="built_in">this</span>.onChange&#125;&gt;</span><br><span class="line">          &#123;animals.map(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span>))&#125;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">          &#123;animal&#125;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Select;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>綁定物件陣列 value</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> animals = [</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;狗&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;dog&#x27;</span> &#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;貓&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;cat&#x27;</span> &#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;老鼠&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;mouse&#x27;</span> &#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;兔子&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;rabbit&#x27;</span> &#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;鳥&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;bird&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Select</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    animalVal: animals[<span class="number">0</span>].value</span><br><span class="line">  &#125;</span><br><span class="line">  onChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      animalVal: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; animalVal &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;select value=&#123;animalVal&#125; onChange=&#123;<span class="built_in">this</span>.onChange&#125;&gt;</span><br><span class="line">          &#123;animals.map(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">key</span>=<span class="string">&#123;item.label&#125;</span> <span class="attr">value</span>=<span class="string">&#123;item.value&#125;</span>&gt;</span>&#123;item.label&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span>))&#125;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">          &#123;animals.find(<span class="function"><span class="params">item</span> =&gt;</span> item.value === animalVal).label&#125;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Select;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="單選與多選-radio、checkbox"><a href="#單選與多選-radio、checkbox" class="headerlink" title="單選與多選-radio、checkbox"></a>單選與多選-radio、checkbox</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RadioCheckbox</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    gender: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    animal: &#123;</span><br><span class="line">      dog: <span class="literal">false</span>,</span><br><span class="line">      cat: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  changeGender = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      gender: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  changeAnimal = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = e.target.value;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (</span><br><span class="line">      &#123;</span><br><span class="line">        animal: &#123;</span><br><span class="line">          ...state.animal,</span><br><span class="line">          [key]: !state.animal[key]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; gender, animal &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;你的性別?&lt;/h1&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;radio&quot;</span></span><br><span class="line">            id=<span class="string">&quot;male&quot;</span></span><br><span class="line">            value=<span class="string">&quot;male&quot;</span></span><br><span class="line">            checked=&#123;gender === <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line">            onChange=&#123;<span class="built_in">this</span>.changeGender&#125;/&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;male&quot;</span>&gt;男&lt;/label&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;radio&quot;</span></span><br><span class="line">            id=<span class="string">&quot;female&quot;</span></span><br><span class="line">            value=<span class="string">&quot;female&quot;</span></span><br><span class="line">            checked=&#123;gender === <span class="string">&#x27;female&#x27;</span>&#125;</span><br><span class="line">            onChange=&#123;<span class="built_in">this</span>.changeGender&#125;/&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;female&quot;</span>&gt;女&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;喜歡的動物?&lt;/h1&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">            id=<span class="string">&quot;dog&quot;</span></span><br><span class="line">            value=<span class="string">&quot;dog&quot;</span></span><br><span class="line">            checked=&#123;animal.dog&#125;</span><br><span class="line">            onChange=&#123;<span class="built_in">this</span>.changeAnimal&#125;/&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;dog&quot;</span>&gt;狗&lt;/label&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">            id=<span class="string">&quot;cat&quot;</span></span><br><span class="line">            value=<span class="string">&quot;cat&quot;</span></span><br><span class="line">            checked=&#123;animal.cat&#125;</span><br><span class="line">            onChange=&#123;<span class="built_in">this</span>.changeAnimal&#125;/&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;cat&quot;</span>&gt;貓&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;pre&gt;&#123;<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state, <span class="literal">null</span>, <span class="number">2</span>)&#125;&lt;/pre&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RadioCheckbox;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="檔案上傳與圖片預覽-file"><a href="#檔案上傳與圖片預覽-file" class="headerlink" title="檔案上傳與圖片預覽-file"></a>檔案上傳與圖片預覽-file</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">file</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    img: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  changeImg = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 取得第0筆檔案</span></span><br><span class="line">    <span class="keyword">const</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// FileReader 讀取瀏覽器選中的檔案</span></span><br><span class="line">    <span class="keyword">const</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="comment">// 讀取完改變 img</span></span><br><span class="line">    fileReader.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="built_in">this</span>.fileLoad);</span><br><span class="line">    <span class="comment">// 將圖片繪出，轉換成 Base64 編碼</span></span><br><span class="line">    fileReader.readAsDataURL(file);</span><br><span class="line">  &#125;</span><br><span class="line">  fileLoad = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此處的 e 為 fileReader</span></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      img: e.target.result</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> onChange=&#123;<span class="built_in">this</span>.changeImg&#125;/&gt;</span><br><span class="line">        &lt;img src=&#123;<span class="built_in">this</span>.state.img&#125; width=<span class="string">&quot;100%&quot;</span> /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> file;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react form</tag>
        <tag>react input</tag>
        <tag>react select</tag>
        <tag>react checkbox</tag>
        <tag>react radio</tag>
        <tag>react file</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 30】將網站部署到 Github Pages 吧！</title>
    <url>/2022/12/05/react-github-pages/</url>
    <content><![CDATA[<p><img src="https://imgur.com/HzAxvVK.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境劇場］</strong></p>
<p>小當家：哇！怎麼來了這麼多外國人</p>
<p>解師傅：嘿嘿～因為我們把網站偷偷發布上線了，沒想到成效這麼好啊！</p>
<p>React 熱炒店已名聲遠播，但這不會是終點，它們會為世人再做出更美味的料理</p>
<hr>
<p>gh-pages 可以將我們製作的專案很簡易的部署到 Github</p>
<h1 id="安裝-gh-pages"><a href="#安裝-gh-pages" class="headerlink" title="安裝 gh-pages"></a>安裝 gh-pages</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm</span></span><br><span class="line">npm install --save gh-pages</span><br><span class="line"></span><br><span class="line"><span class="comment">// yarn</span></span><br><span class="line">yarn add gh-pages</span><br></pre></td></tr></table></figure>
<p>先安裝 gh-pages，接著執行下面的動作<br><br><br><br></p>
<h1 id="1-package-json-添加-homepage、scripts-指令"><a href="#1-package-json-添加-homepage、scripts-指令" class="headerlink" title="1. package.json 添加 homepage、scripts 指令"></a>1. package.json 添加 homepage、scripts 指令</h1><p>package.json</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-app&quot;</span>,</span><br><span class="line">	<span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;https://myusername.github.io/my-app&quot;</span>,</span><br><span class="line">	<span class="comment">// more...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加入 homepage，在 myusername 帶入自己的 github 帳號、在 my-app 帶入專案名稱</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;predeploy&quot;</span>: <span class="string">&quot;npm run build&quot;</span>,</span><br><span class="line">	<span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;gh-pages -d build&quot;</span>,</span><br><span class="line">    <span class="comment">// more...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>scripts</code> 欄位中添加 predeploy、deploy 指令<br><br><br><br></p>
<h1 id="2-在-GitHub-上新建-repository"><a href="#2-在-GitHub-上新建-repository" class="headerlink" title="2. 在 GitHub 上新建 repository"></a>2. 在 GitHub 上新建 repository</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;myusername&#x2F;my-app.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<p>myusername 為自己的 github 帳號、my-app 為專案名稱<br><br><br><br></p>
<h1 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure>
<p>在終端機輸入指令<br><br><br><br></p>
<h1 id="4-在-Github-上開啟-Github-Page"><a href="#4-在-Github-上開啟-Github-Page" class="headerlink" title="4. 在 Github 上開啟 Github Page"></a>4. 在 Github 上開啟 Github Page</h1><p><img src="https://imgur.com/BzASqmZ.jpg" alt="gh-pages"></p>
<p>部署後會多了一個 gh-pages 分支，將網站指定此分支後，部署就完成囉！<br><br><br><br></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://kaochihyu.coderbridge.io/2021/01/25/deploy-react-app/">部署 React App</a><br><a href="https://ithelp.ithome.com.tw/articles/10228423">[Day 29 - 即時天氣] 寫網頁就是要炫耀啊，不然要幹麻？發布上 Github Pages 吧！</a></p>
<hr>
<h1 id="完賽心得"><a href="#完賽心得" class="headerlink" title="完賽心得"></a>完賽心得</h1><p>為期 30 天的鐵人賽完成了～～～太令人感動的一刻！<br>很開心自己可以堅持到最後，每天要寫一篇技術文章不是一件容易的事，<br>在寫文章同時也更了解 React 的生態，也可能可以幫助到別人(不知道有沒有XD)<br>IT 鐵人賽完賽 get～明年再見吧！！</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 1】 React 的歷史時間軸</title>
    <url>/2022/09/16/react-history/</url>
    <content><![CDATA[<p><img src="https://imgur.com/3UUlzjJ.jpg" alt="react-blue.jpg"></p>
<p>第一次參加 IT 邦鐵人賽，接下來會發一系列鐵人賽的文章，希望可以堅持到最後，一起加油吧！</p>
<a id="more"></a>

<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="[ 前情提要 ]"></a>[ 前情提要 ]</h3><p>要學習 React 就要有開一間餐廳的決心，你說這有什麼關係？<br>這過程其實大同小異，兩者都需要學習且消耗時間成本，才有機會成功！<br>現在「<strong>你</strong>」就是餐廳的老闆，即將營業一間「React 熱炒店」，<br>請了特級廚師 <strong>小當家</strong> 當御用主廚，而 <strong>解師傅</strong> 也是股東之一，我們抱著堅持下去的決心一起前進吧！</p>
<p>解師傅：老闆～請多多指教囉！<br>小當家：我們一起把  React 熱炒店 做大吧~~~🤩<br><br/><br/></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React 的出現，讓開發者享受到組件重用的便利，優化使用者介面</p>
<p>早期都是用 Class Component，但在 React 16.8 之後出了 「Hook」，可以單純使用函式組件，讓你不需要用複雜的 class，就能使用更多 React 的功能，因此整篇，我們都會使用 Hook 的方式來開發</p>
<p>不過 React 是誰發明的？又是怎麼出現的呢？在操作 React 之前，先來簡單了解一下 React 的背景吧！</p>
<p><br/><br/></p>
<h1 id="🕓-回顧-React-的時間軸"><a href="#🕓-回顧-React-的時間軸" class="headerlink" title="🕓 回顧 React 的時間軸"></a>🕓 回顧 React 的時間軸</h1><p><br/><br/></p>
<p><img src="https://imgur.com/skyo2W1.jpg" alt="fb.jpg"></p>
<h3 id="💠-2010-年前後"><a href="#💠-2010-年前後" class="headerlink" title="💠 2010 年前後"></a>💠 <strong>2010 年前後</strong></h3><p>Facebook 快速成長，相信你我對 Facebook 一定都不陌生，隨著團隊的擴張讓代碼的維護變得越來越困難，FB 認為現行技術已無法滿足擴展需求，如果繼續用舊有的代碼維護頁面，系統的複雜就成級數的增長，使代碼變得脆弱且不可預測</p>
<p><br/><br/><br/></p>
<p><img src="https://imgur.com/KSp9YEL.jpg" alt="fax.jpg"></p>
<h3 id="💠-2011-年"><a href="#💠-2011-年" class="headerlink" title="💠 2011 年"></a>💠 <strong>2011 年</strong></h3><p>為了解決這個問題，一位 Facebook 工程師 <strong>Jordan Walke</strong> ，便開發出 <a href="https://github.com/jordwalke/FaxJs"><strong>FaxJs</strong></a>，也就是 React 的原型，於是 React 先被應用在 Facebook 的 News Feed (動態消息)</p>
<p><br/><br/><br/></p>
<p><img src="https://imgur.com/kXcTioK.jpg" alt="ig.jpg"></p>
<h3 id="💠-2012-年"><a href="#💠-2012-年" class="headerlink" title="💠 2012 年"></a>💠 <strong>2012 年</strong></h3><p>Facebook 將 React 分離出來，讓 React 可以在不同專案運行，Facebook 收購 Instagram，將 React 部署在 Instagram</p>
<p>Facebook 的 CEO Mark Zuckerberg 表示：我們最大的錯誤就是壓太多寶在 HTML5 上了</p>
<p><br/><br/><br/></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GW0rj4sNH2w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="💠-2013年"><a href="#💠-2013年" class="headerlink" title="💠 2013年"></a>💠 <strong>2013年</strong></h3><p>在 JSCONF US 峰會，Jordan Walke 發表 React 的 Open Source，起初的聽眾對 React 抱持懷疑的態度，多數人覺得 React 是一種退步，這讓 Facebook 團隊決定加強宣傳在勇於創新的族群上</p>
<p><br/><br/><br/></p>
<p><img src="https://imgur.com/6d7eueQ.jpg" alt="netflix.jpg"></p>
<h3 id="💠-2014年"><a href="#💠-2014年" class="headerlink" title="💠 2014年"></a>💠 2014年</h3><p>經過團隊的推廣，React 逐漸獲得聲譽，開始有大量公司將 React 用在專案上，包含了 Netflix</p>
<p><br/><br/><br/></p>
<p><img src="https://imgur.com/uzjLy5B.jpg" alt="redux.jpg"></p>
<h3 id="💠-2015年"><a href="#💠-2015年" class="headerlink" title="💠 2015年"></a>💠 2015年</h3><p>React Native、Redux 問世</p>
<p>React Native 讓網頁開發人員能用 React 的方式以 JavaScript 撰寫 App</p>
<p>Redux 可以讓不同的組件，使用到共用的資料和方法，統一集中管理共用的狀態</p>
<p><br/><br/><br/></p>
<h3 id="💠-2016年"><a href="#💠-2016年" class="headerlink" title="💠 2016年"></a>💠 2016年</h3><p>React 成為主流框架之一，版本進入到正式版號 React 15 穩定版</p>
<p><br/><br/><br/></p>
<h3 id="💠-2017年"><a href="#💠-2017年" class="headerlink" title="💠 2017年"></a>💠 2017年</h3><p>React 16 發佈</p>
<p><br/><br/><br/></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dpw9EHDh2bM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="💠-2018年"><a href="#💠-2018年" class="headerlink" title="💠 2018年"></a>💠 2018年</h3><p>在 React Conf 2018，Sophie Alpert 和 Dan Abramov 介紹了 Hook，接著 Ryan Florence 展示了如何用它們來重構應用程式</p>
<p><br/><br/><br/></p>
<p><img src="https://imgur.com/Lm4pMMb.jpg" alt="hook.jpg"></p>
<h3 id="💠-2019年"><a href="#💠-2019年" class="headerlink" title="💠 2019年"></a>💠 2019年</h3><p>React 16.8 公眾發布。React Hooks 可以在穩定版中使用，不必寫 class 就能使用 state，更好管理有狀態的邏輯，也降低了學習成本</p>
<p><br/><br/><br/></p>
<h3 id="💠-2020年"><a href="#💠-2020年" class="headerlink" title="💠 2020年"></a>💠 2020年</h3><p>React 17 引入漸進式升級</p>
<p><br/><br/><br/></p>
<h3 id="💠-2022年至今"><a href="#💠-2022年至今" class="headerlink" title="💠 2022年至今"></a>💠 2022年至今</h3><p>React18 正式版發布</p>
<p><br/><br/><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>回溯的部分就差不多寫到這裡，雖然你完全可以不用知道這些過去，還是可以學好 React ，但回過頭來看了這些過去會發現，這其實是個很勵志的故事，也還滿有趣的！今天就到這裡囉～我們明天繼續吧！</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>React時間軸</tag>
        <tag>React歷史</tag>
      </tags>
  </entry>
  <entry>
    <title>React常用Hooks</title>
    <url>/2022/07/05/react-hooks/</url>
    <content><![CDATA[<p><img src="https://imgur.com/cnvp1BX.jpg" alt="hooks"></p>
<p>Hooks 是 React 16.8 之後出的功能，可以單純使用函式組件，而不用寫 Class component</p>
<p>Hooks 優點</p>
<ol>
<li>更好管理有狀態的邏輯</li>
<li>把相同邏輯放在同個地方，而不是強制基於 lifecycle 方法來分拆</li>
<li>Class 運作、學習較為複雜</li>
</ol>
<a id="more"></a>

<p><strong>React 目前沒有計畫移除 Class，所以是完全自由選擇使用，Hooks 也 100% 向下相容</strong><br><br/><br/></p>
<h1 id="useState-狀態管理"><a href="#useState-狀態管理" class="headerlink" title="useState 狀態管理"></a>useState 狀態管理</h1><p>先看看原本的 Class component，這是一個簡單的計數器</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123; count &#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;add&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<br/>

<p>把 Class component 改成 Hooks ，state 跟 lifecycle 拿掉，使用 useState</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(count + <span class="number">1</span>); <span class="comment">// 或 setCount(c =&gt; c + 1);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123; count &#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;addCount&#125;&gt;add&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>是不是簡短很多呢～</p>
<br/>

<p><strong>useState</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [狀態, 設定狀態的函式] = useState(狀態初始值);</span><br></pre></td></tr></table></figure>
<p>useState 因執行順序，必須放在函式的最上面</p>
<p>狀態初始值可以是任何型態，不像 class 只能用物件</p>
<br/>

<p><strong>useState 的 setState 需要把原本沒使用到的 state 也合併，否則會出錯</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [&#123;count1, count2&#125;, setState] = useState(&#123;<span class="attr">count1</span>: <span class="number">0</span>, <span class="attr">count2</span>: <span class="number">10</span>&#125;);</span><br><span class="line">  <span class="keyword">const</span> addCount1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;...state, <span class="attr">count1</span>: state.count1 + <span class="number">1</span>&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> addCount2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;...state, <span class="attr">count2</span>: state.count2 + <span class="number">1</span>&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123; count1 &#125;&lt;/h1&gt;</span><br><span class="line">      &lt;h1&gt;&#123; count2 &#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;addCount1&#125;&gt;add&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;addCount2&#125;&gt;add&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="useEffect-附加作用"><a href="#useEffect-附加作用" class="headerlink" title="useEffect 附加作用"></a>useEffect 附加作用</h1><p>每次 render 都會呼叫 useEffect，useEffect 可以做到跟 class lifecycle 一樣的效果，但 useEffect 能把相同邏輯寫在同一個函式裡，相較 class 的 lifecycle 更好管理</p>
<p>useEffect 會做 4 件事情</p>
<ol>
<li>判斷第二個參數的陣列是否一樣，如果一樣才會繼續</li>
<li>執行上一次存下來的清理函式</li>
<li>執行<code>useEffect</code>的內容</li>
<li>把 清理函式 存下來，供下次使用</li>
</ol>
<br/>

<p>return 清理函式 <strong>等同 class 的 componentWillUnmount</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> onScroll = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, onScroll);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>, onScroll);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br/>

<p>第二參數傳入空陣列，<strong>等同 class componentDidMount</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// do componentDidMount</span></span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>等同 class  componentDidUpdate</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// do componentDidUpdate</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>class  componentDidUpdate 寫判斷條件，程式冗長</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.count !== <span class="built_in">this</span>.state.count) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="built_in">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>useEffect 只需要傳入第二參數，如 count 與前次不一樣就會執行</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="built_in">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count])</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="useContext-應用-Context"><a href="#useContext-應用-Context" class="headerlink" title="useContext 應用 Context"></a>useContext 應用 Context</h1><p>使用 Context API 時，不用使用 Consumer，useContext 可以直接用函式取得 context value<br>以 <a href="https://happy9990929.github.io/2022/07/04/react-context-api/">前一篇的 Context API 範例</a> 來改<br><br/></p>
<p><strong>設定 Context</strong></p>
<p>src/context/order.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> context = createContext();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; Provider &#125; = context;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>設定 Provider，contextValue 傳入 context</strong></p>
<p>改成使用 Hooks，Provider 一樣不變</p>
<p>src/App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ProductList <span class="keyword">from</span> <span class="string">&quot;./ProductList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [orders, setOrders] = useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> addOrder = <span class="function"><span class="params">order</span> =&gt;</span> &#123;</span><br><span class="line">    setOrders([...orders, order])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> contextValue = &#123;</span><br><span class="line">    orders, addOrder</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Provider value=&#123;contextValue&#125;&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &lt;ProductList /&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>使用 useContext 取得 contextValue</strong></p>
<p>useContext 可以直接取得 contextValue，就不用再用 Consumer 再從函式取值</p>
<p>src/Header.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> context <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; orders &#125; = useContext(context);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      購物車($&#123;orders.length&#125;)</span><br><span class="line">      &lt;hr/&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure>
<br/>
src/ProductList.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">&quot;./Product&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> menu = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;雞肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;豬肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;牛肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;海鮮鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;泡菜鍋&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProductList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;menu.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Product</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> &#123;<span class="attr">...item</span>&#125; /&gt;</span></span>)&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProductList;</span><br></pre></td></tr></table></figure>
<br/>
src/Product.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> context <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Product = <span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; addOrder &#125; = useContext(context);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;label&gt;&#123;name&#125;&lt;/label&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123;addOrder(id)&#125;&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Product;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="useRef-存取組件變數"><a href="#useRef-存取組件變數" class="headerlink" title="useRef 存取組件變數"></a>useRef 存取組件變數</h1><p>useRef 是每次指定相同的 dom</p>
<p>createRef 是每次創建新的 dom</p>
<p>範例: 自動 focus input</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Ref = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> myInput = useRef();</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    myInput.current.focus();</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;myInput&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ref;</span><br></pre></td></tr></table></figure>
<br/>
也可以取代 instance variable

<p>範例: setInterval 計時器</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Ref = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> ref = useRef(&#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ref.current = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> stopCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(ref.current)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;addCount&#125;&gt;start&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;stopCount&#125;&gt;stop&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ref;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hooks</tag>
        <tag>React useState</tag>
        <tag>React useEffect</tag>
        <tag>React useContext</tag>
        <tag>React useRef</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 13】React 引入圖片檔案，圖片懶加載與預加載</title>
    <url>/2022/11/01/react-image-load/</url>
    <content><![CDATA[<p><img src="https://imgur.com/4Rv3JIp.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境任務］</strong></p>
<p>小當家：客人點了一大桌的桌菜，真是累死我了！</p>
<p>解師傅：哇～這些菜看起來太美味了！看看那個醬汁！讓我拍個照先～</p>
<p>解師傅拍的照片真漂亮，我們把它們放在菜單上吧！</p>
<hr>
<h1 id="設置外部圖片"><a href="#設置外部圖片" class="headerlink" title="設置外部圖片"></a>設置外部圖片</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;https://picsum.photos/200/300?random=1&quot;</span> alt=<span class="string">&quot;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>要放圖片其實很簡單，如果是外部的圖片，可以直接像平常 HTML 的方式 <code>src=&quot;圖片網址&quot;</code> 設置<br><br/><br><br/></p>
<h1 id="引入內部圖片檔案"><a href="#引入內部圖片檔案" class="headerlink" title="引入內部圖片檔案"></a>引入內部圖片檔案</h1><p>如果是引入在專案中的圖片，有兩種方式</p>
<ul>
<li>使用 require 將圖檔引入</li>
<li>使用 import 將圖檔引入<br/>
<br/>
<br/>

</li>
</ul>
<h2 id="1-使用-require-將圖檔引入"><a href="#1-使用-require-將圖檔引入" class="headerlink" title="1. 使用 require 將圖檔引入"></a>1. 使用 require 將圖檔引入</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;img src=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./images/logo.jpg&#x27;</span>)&#125; alt=<span class="string">&quot;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>require 方法是 CommonJs 推出的，NodeJs 自帶了這個功能<br><br/><br><br/></p>
<h2 id="2-使用-import-將圖檔引入"><a href="#2-使用-import-將圖檔引入" class="headerlink" title="2.使用 import 將圖檔引入"></a>2.使用 import 將圖檔引入</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Img <span class="keyword">from</span> <span class="string">&quot;./images/react.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;img src=&#123;Img&#125; alt=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>import 是 <code>ES6</code> 的語法，透過 <code>Babel</code> 轉譯後還是會使用 <code>CommonJS</code> 加載，也就是如果你寫了 import 最後還是會被轉成 require，import 的寫法等同於第一種的 require 方法<br/><br><br/><br><br/><br><strong>兩種方法效能上基本上沒區別，因為轉譯過後還是一樣的東西</strong><br><br/><br><br/><br>不過以 require / exports 來說，只有簡單的寫法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demo = <span class="built_in">require</span>(<span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line"><span class="built_in">exports</span>.demo = demo</span><br><span class="line"><span class="built_in">module</span>.exports = demo</span><br></pre></td></tr></table></figure>
<br/>

<p>而 import / export 的寫法就很多樣了</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> demo <span class="keyword">from</span> <span class="string">&#x27;demo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> demo &#125; <span class="keyword">from</span> <span class="string">&#x27;demo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> demo <span class="keyword">from</span> <span class="string">&#x27;demo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFile &#125; <span class="keyword">from</span> <span class="string">&#x27;demo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFile <span class="keyword">as</span> read &#125; <span class="keyword">from</span> <span class="string">&#x27;demo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> demo, &#123; readFile &#125; <span class="keyword">from</span> <span class="string">&#x27;demo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> demo</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> demo</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">readFile</span></span></span><br><span class="line"><span class="function"><span class="title">export</span> </span>&#123; readFile, read &#125;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;demo&#x27;</span></span><br></pre></td></tr></table></figure>
<br/>

<p>import 屬於靜態編譯，所以沒辦法動態加載，但 require 可以</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> url <span class="comment">// X 錯誤</span></span><br><span class="line"><span class="built_in">require</span>(url) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure>
<br/>
<br/>
<br/>

<h1 id="圖片懶加載-Lazy-load"><a href="#圖片懶加載-Lazy-load" class="headerlink" title="圖片懶加載(Lazy load)"></a>圖片懶加載(Lazy load)</h1><p>講完如何載入圖片，來談談圖片的懶加載。</p>
<p>有些網站載入時，一開始圖片會有一個佔位符，可能是一個色塊或是一個佔位符圖片，當滾輪往下移動時，真正的圖片才顯示出來，像 unsplash 就是一個例子</p>
<p><img src="https://imgur.com/5zjWNR7.gif" alt="unsplash"></p>
<p>圖片懶加載可以節省一堆圖片的運算，滾到需要顯示的圖片才載入，頁面的加載速度會比較快，不占用後台資源，頁面的速度也利於 SEO，適用在圖片較多的地方，如電商、圖片素材庫等</p>
<p>缺點</p>
<ul>
<li>因要監聽圖片是否顯示，較耗瀏覽器效能</li>
<li>如網路不好，圖片會很慢才顯示，會有一段空白時間</li>
</ul>
<p>推薦一個簡易就可以達到圖片懶加載的套件 <code>React Lazy Load Image Component</code><br><br/><br><br/><br><br/></p>
<h2 id="React-Lazy-Load-Image-使用方法"><a href="#React-Lazy-Load-Image-使用方法" class="headerlink" title="React Lazy Load Image 使用方法"></a>React Lazy Load Image 使用方法</h2><ul>
<li>安裝 <code>React Lazy Load Image Component</code></li>
<li>載入 <code>LazyLoadImage</code>  組件</li>
<li>使用 <code>LazyLoadImage</code> 組件</li>
<li>添加佔位符圖片</li>
<li>添加佔位符模糊效果<br/>
<br/>
<br/>

</li>
</ul>
<h3 id="1-安裝-React-Lazy-Load-Image-Component"><a href="#1-安裝-React-Lazy-Load-Image-Component" class="headerlink" title="1. 安裝 React Lazy Load Image Component"></a>1. 安裝 React Lazy Load Image Component</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Yarn</span><br><span class="line">$ yarn add react-lazy-load-image-component</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; NPM</span><br><span class="line">$ npm i --save react-lazy-load-image-component</span><br></pre></td></tr></table></figure>
<p>你可以用 npm 或 yarn 來安裝 <code>react-lazy-load-image-component</code><br><br/><br><br/><br><br/></p>
<h3 id="2-載入-LazyLoadImage-組件"><a href="#2-載入-LazyLoadImage-組件" class="headerlink" title="2. 載入 LazyLoadImage  組件"></a>2. 載入 LazyLoadImage  組件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Image from &quot;..&#x2F;images&#x2F;dog.jpg&quot;;</span><br><span class="line">import &#123; LazyLoadImage &#125; from &quot;react-lazy-load-image-component&quot;;</span><br></pre></td></tr></table></figure>
<p>載入 <code>LazyLoadImage</code> 就可以使用此組件<br><br/><br><br/><br><br/></p>
<h3 id="3-使用-LazyLoadImage-組件"><a href="#3-使用-LazyLoadImage-組件" class="headerlink" title="3. 使用 LazyLoadImage 組件"></a>3. 使用 LazyLoadImage 組件</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Image <span class="keyword">from</span> <span class="string">&quot;../images/dog.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LazyLoadImage &#125; <span class="keyword">from</span> <span class="string">&quot;react-lazy-load-image-component&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;LazyLoadImage</span><br><span class="line">		src=&#123;Image&#125;</span><br><span class="line">        width=&#123;<span class="number">500</span>&#125;</span><br><span class="line">		height=&#123;<span class="number">500</span>&#125;</span><br><span class="line">        alt=<span class="string">&quot;&quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>img 的標籤改為 <code>LazyLoadImage</code> 組件，並明確加上寬高，以避免<a href="https://web.dev/cls/">累積佈局偏移(CLS)</a>問題，到這邊已經可以有 lazy load 的效果</p>
<iframe src="https://codesandbox.io/embed/react-lazy-load-qi43fq?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-lazy-load"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>
<br/>

<h3 id="4-添加佔位符圖片"><a href="#4-添加佔位符圖片" class="headerlink" title="4. 添加佔位符圖片"></a>4. 添加佔位符圖片</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Image <span class="keyword">from</span> <span class="string">&quot;../images/dog.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PlaceholderImage <span class="keyword">from</span> <span class="string">&quot;../images/placeholder.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LazyLoadImage &#125; <span class="keyword">from</span> <span class="string">&#x27;react-lazy-load-image-component&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&lt;LazyLoadImage</span><br><span class="line">    src=&#123;Image&#125;</span><br><span class="line">    width=&#123;<span class="number">600</span>&#125;</span><br><span class="line">    height=&#123;<span class="number">400</span>&#125;</span><br><span class="line">    placeholdersrc=&#123;PlaceholderImage&#125;</span><br><span class="line">    alt=<span class="string">&quot;&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<p>可以準備一張低解析的佔位符圖片，是用來滾下卷軸前顯示的圖片，並指向 <code>placeholdersrc</code> 屬性<br><br/><br><br/><br><br/></p>
<h3 id="5-添加佔位符模糊效果"><a href="#5-添加佔位符模糊效果" class="headerlink" title="5. 添加佔位符模糊效果"></a>5. 添加佔位符模糊效果</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Image <span class="keyword">from</span> <span class="string">&quot;../images/dog.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> PlaceholderImage <span class="keyword">from</span> <span class="string">&quot;../images/placeholder.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LazyLoadImage &#125; <span class="keyword">from</span> <span class="string">&#x27;react-lazy-load-image-component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;react-lazy-load-image-component/src/effects/blur.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&lt;LazyLoadImage</span><br><span class="line">	src=&#123;Image&#125;</span><br><span class="line">    width=&#123;<span class="number">600</span>&#125;</span><br><span class="line">	height=&#123;<span class="number">400</span>&#125;</span><br><span class="line">    placeholdersrc=&#123;PlaceholderImage&#125;</span><br><span class="line">	effect=<span class="string">&quot;blur&quot;</span></span><br><span class="line">    alt=<span class="string">&quot;&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<p>佔位符圖片也可以有模糊效果，顯示圖片前會將圖片模糊，需載入 css，並加入屬性 <code>effect=&quot;blur&quot;</code></p>
<p>可以打開 Network 看看 Img 的變化，在滾動之前 Img 會是空的，直到滾到圖片的地方才載入，將 Network 調到 Slow 3G 效果會更明顯</p>
<p><img src="https://imgur.com/IgSHQQE.jpg" alt="network"></p>
<p>這邊附上 <a href="https://happy9990929.github.io/react-lazy-load/"><strong>Demo</strong></a>，一起觀察看看吧！<br><br/><br><br/><br><br/></p>
<h1 id="圖片預加載"><a href="#圖片預加載" class="headerlink" title="圖片預加載"></a>圖片預加載</h1><p>有懶加載就會有預加載，預加載跟懶加載相反，頁面一進來就先把圖片都先載入，將圖片存入緩存，圖片就不會有延遲的效果，可以享受無需等待直接預覽的效果，適用的地方如漫畫、圖片畫廊等<strong>不希望讓用戶看到加載時空白的場景</strong></p>
<p>缺點</p>
<ul>
<li>預加載會占用較多後台資源</li>
<li>頁面一開始載入的時間較長</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> image1 <span class="keyword">from</span> <span class="string">&quot;../images/image1.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> image2 <span class="keyword">from</span> <span class="string">&quot;../images/image2.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> image3 <span class="keyword">from</span> <span class="string">&quot;../images/image3.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> imageList = [image1, image2, image3]</span><br><span class="line">  imageList.forEach(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> Image().src = image</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>［任務解題］</strong></p>
<p>圖片的部分，這邊用了 <a href="https://picsum.photos/">Lorem Picsum</a> 的 random 圖片作替代，也加上了 lazy-load 的效果</p>
<p>菜單的圖片也完成囉！</p>
<iframe src="https://codesandbox.io/embed/react-with-image-tjf8i4?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="React with image"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>圖片載入的方法可以用 require 或 import，個人是比較喜歡用 ES6 import 的寫法，我們也學到了懶加載和預加載使用方法，可以依據需求或適用情境去做加載，一起練習看看吧！!</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.niclin.tw/2019/10/03/nodejs-require-vs-es6-import-export/">JavaScript 中 require, import 的差別及效能</a><br><a href="https://chinese.freecodecamp.org/news/how-to-lazy-load-images-in-react/">如何在React 中實現圖片懶加載</a><br><a href="https://juejin.cn/post/7004001535206260749">超詳細的圖片預加載和懶加載教程</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>import</tag>
        <tag>react</tag>
        <tag>require</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 5】認識 JSX，用 JS 寫 HTML 語法</title>
    <url>/2022/10/20/react-jsx/</url>
    <content><![CDATA[<p><img src="https://imgur.com/zIwYpvB.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境劇場］</strong></p>
<p>解師傅：你們看一下，我找到了傳說中的廚具～這個怎麼樣</p>
<p>小當家：我看了說明書，它可以幫我們把複雜的料理簡單化，使用方法就跟一般的廚具一樣，嗯…不過好像有一些地方要注意？</p>
<p>解師傅：這好像不是什麼大問題～我們一起來研究看看吧！</p>
<hr>
<h1 id="認識-JSX"><a href="#認識-JSX" class="headerlink" title="認識 JSX"></a>認識 JSX</h1><p>在介紹 React 怎麼開發之前，先打開我們先前建立的專案 <code>/src/App.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;header className=<span class="string">&quot;App-header&quot;</span>&gt;</span><br><span class="line">        &lt;img src=&#123;logo&#125; className=<span class="string">&quot;App-logo&quot;</span> alt=<span class="string">&quot;logo&quot;</span> /&gt;</span><br><span class="line">        &lt;p&gt;Learn React&lt;/p&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>這是 HTML 嗎？ 但怎麼有 function 又有 render？🤔</p>
<br/>
<br/>

<p>NONONO~他既不是 HTML 也不是 JavaScript，而是 JSX</p>
<p>JSX 全名為 <code>JavaScript Extension Syntax</code>，是一個 JavaScript 的語法擴充，因瀏覽器只認得 HTML、CSS、JS，所以 JSX 需透過 <code>Babel</code> 轉譯，<code>Create React App</code> 已經幫我們處理好這些設定，React 官方也推薦使用 JSX 語法來寫 React</p>
<p>我們可以透過 JSX 就像寫 HTML 一樣，直接控制使用者介面的外觀，並能使用 JavaScript 所有的功能<br/><br><br/><br><br/></p>
<p>如果不使用 JSX，用原生 JS 寫大概會像下面這樣</p>
<p>以下是用 <a href="https://babeljs.io/repl">Babel</a> 轉譯出來</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> React.createElement(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">    className: <span class="string">&quot;App&quot;</span></span><br><span class="line">  &#125;, React.createElement(<span class="string">&quot;header&quot;</span>, &#123;</span><br><span class="line">    className: <span class="string">&quot;App-header&quot;</span></span><br><span class="line">  &#125;, React.createElement(<span class="string">&quot;img&quot;</span>, &#123;</span><br><span class="line">    src: logo,</span><br><span class="line">    className: <span class="string">&quot;App-logo&quot;</span>,</span><br><span class="line">    alt: <span class="string">&quot;logo&quot;</span></span><br><span class="line">  &#125;), React.createElement(<span class="string">&quot;p&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;Learn React&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>可讀性跟維護性高下立判!😱</p>
<p>這只是一小部分，如頁面元素再多一點，應該很快就眼花了!😵<br>用這 debug 應該會崩潰吧！<br><br/><br><br/></p>
<h1 id="JSX-使用方法"><a href="#JSX-使用方法" class="headerlink" title="JSX 使用方法"></a>JSX 使用方法</h1><p>如果熟悉 HTML 與 JS 的朋友應該可以快速上手 JSX 語法，基本上 HTML 的語法在 JSX 都是通用的，只有幾個特殊的地方需要注意</p>
<h2 id="◆-每個標籤需-close"><a href="#◆-每個標籤需-close" class="headerlink" title="◆ 每個標籤需 close"></a>◆ 每個標籤需 close</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Hello React！&lt;<span class="regexp">/p&gt; /</span><span class="regexp">/ (start tag、end tag)</span></span><br><span class="line"><span class="regexp">&lt;img src=&quot;&#123;logo&#125;&quot; /</span>&gt; <span class="comment">// (self-closing)</span></span><br><span class="line">&lt;img src=&#123;logo&#125; alt=<span class="string">&#x27;&#x27;</span>&gt;&lt;/img&gt;</span><br><span class="line">&lt;div className /&gt;</span><br></pre></td></tr></table></figure>
<p>不管是 <code>start tag</code>、<code>end tag</code> 或 <code>self-closing</code>，每個元素一定都要關閉，特別的是，在 JSX 每個標籤都可以 <code>self-closing</code>，原本在 HTML 只能 <code>self-closing</code> 的元素，也可以用標籤的方式關閉，這些在 JSX 都是合法使用的<br/><br><br/><br><br/></p>
<h2 id="◆-保留字改寫-className-htmlFor"><a href="#◆-保留字改寫-className-htmlFor" class="headerlink" title="◆ 保留字改寫 className / htmlFor"></a>◆ 保留字改寫 className / htmlFor</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&#x27;red&#x27;</span> /&gt;</span><br><span class="line">&lt;label htmlFor=<span class="string">&#x27;check&#x27;</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">&#x27;checkbox&#x27;</span> id=<span class="string">&#x27;check&#x27;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>由於 class 和 for 因與 JS 語法撞名，</p>
<p>需要將 <code>class</code> 改寫為 <code>className</code>，<code>for</code> 改寫為 <code>htmlFor</code><br><br/><br><br/></p>
<h2 id="◆-事件、屬性使用駝峰式命名-camelCase"><a href="#◆-事件、屬性使用駝峰式命名-camelCase" class="headerlink" title="◆ 事件、屬性使用駝峰式命名(camelCase)"></a>◆ 事件、屬性使用駝峰式命名(camelCase)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input onChange=&#123;<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;change&#x27;</span>&#125; /&gt;</span><br><span class="line">&lt;div tabIndex=<span class="string">&quot;1&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>基本上都使用駝峰命名，除<code>aria-*</code>, <code>data-*</code> 不需要使用 camelCase 作為屬性命名規範<br><br/><br><br/></p>
<h2 id="◆-可用-括號塞值或表達式"><a href="#◆-可用-括號塞值或表達式" class="headerlink" title="◆ 可用 { } 括號塞值或表達式"></a>◆ 可用 { } 括號塞值或表達式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div onClick=&#123; handleClick &#125; /&gt;</span><br><span class="line">&lt;div onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;click&#x27;</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>
<p>用 {} 塞值或表達式<br><br/><br><br/></p>
<h2 id="◆-必須被根元素包住"><a href="#◆-必須被根元素包住" class="headerlink" title="◆ 必須被根元素包住"></a>◆ 必須被根元素包住</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;React&lt;/h1&gt;,</span><br><span class="line">	&lt;p&gt;開心學前端&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<br/>

<p>如果沒有包住將會出現錯誤</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;h1&gt;React&lt;/h1&gt;,</span><br><span class="line">  &lt;p&gt;開心學前端&lt;/p&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/DzpZZKn.jpg" alt="root"></p>
<br/>
<br/>

<p>或是用虛擬的包裝元素 <code>Fragment</code> 包住，渲染出來後 <code>Fragment</code> 不會顯示在 HTML上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Fragment &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;h1&gt;React&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;開心學前端&lt;/p&gt;</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<br/>

<p>直接給空標籤，效果也會跟 <code>Fragment</code> 一樣</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;React&lt;/h1&gt;</span><br><span class="line">	  &lt;p&gt;開心學前端&lt;/p&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="副檔名要用-js-還是-jsx"><a href="#副檔名要用-js-還是-jsx" class="headerlink" title="副檔名要用 .js 還是 .jsx?"></a>副檔名要用 .js 還是 .jsx?</h1><p>你可能會看過一些 React 專案裡有 <code>.jsx</code> 的檔案格式，其實與 <code>.js</code> 副檔名的並<strong>無差異</strong></p>
<p>有些人認為如果程式碼裡用了 JSX 語法，就使用 <code>.jsx</code> 副檔名，這樣比較好作區別，在實作上不管是 <code>.js</code> 或是 <code>.jsx</code> 都是可以成功運作哦！<br><br/><br><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>了解完 JSX 的使用方式，只要遵循 JSX 的用法，就可以準備開發專案囉！明天就來試著新增一個組件吧！!</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>jsx</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 3】React 環境安裝-完成前置作業</title>
    <url>/2022/10/18/react-install/</url>
    <content><![CDATA[<p><img src="https://imgur.com/BhMRQL0.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境劇場］</strong></p>
<p>解師傅：嘿！老闆！我找到了一間不錯的店面，CRA 師傅會幫我們完成它！</p>
<p>要開一間 React 熱炒店，想當然要先有一間環境店面，即使小當家有再高的廚藝，沒有店面也是無用武之地，我們請 CRA 師傅幫我們建好環境，一起期待我們的新店面吧！!</p>
<hr>
<p>因為要建置一個 JavaScript 的開發環境，一般都會用 Node.js 來作為測試或開發用的本地端伺服器，所以在安裝 React 之前，要先確認：</p>
<ul>
<li>是否已安裝 Node</li>
<li>Node 版本需 &gt;= 14.0.0</li>
<li>npm 需 &gt;= 5.6</li>
</ul>
<p>安裝 Node 就等於已安裝了 npm 工具，所以只需要檢查 npm 版本即可<br><br/><br><br/><br><br/></p>
<h1 id="安裝-Node-js"><a href="#安裝-Node-js" class="headerlink" title="安裝 Node.js"></a>安裝 Node.js</h1><p>先到 <a href="https://nodejs.org/en/">Node 官網</a>，會看到有兩個版本</p>
<ul>
<li>LTS 長期支援版本：官方長期維護，較為穩定，供一般開發專案使用</li>
<li>Current 最新版本：具有現在最新功能，但可能會有變動，較不穩定，要對新功能做研究測試才會使用這個版本</li>
</ul>
<p>我們只是要執行專案，下載 LTS 長期支援版本<br/><br><br/><br><img src="https://imgur.com/c5Kj0ru.jpg" alt="nodejs"><br><br/><br><br/></p>
<h2 id="確認版本"><a href="#確認版本" class="headerlink" title="確認版本"></a>確認版本</h2><p>檢查是否安裝成功，打開命令提示字元(在 windows 搜尋 <code>cmd</code> 或在鍵盤按 開始 + <code>R</code>)</p>
<ul>
<li><p>確認 Node 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認 npm 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/elSlDav.jpg" alt="check node"><br>確認 Node 安裝完就可以來安裝 React 囉！<br/></p>
<br/>
<br/>
<br/>

</li>
</ul>
<h1 id="安裝-React"><a href="#安裝-React" class="headerlink" title="安裝 React"></a>安裝 React</h1><p><a href="https://github.com/facebook/create-react-app">Create React App</a> 簡稱為 CRA，是一個適合學習 React 的環境，<br>也是使用 React 建立一個 <strong>全新的 single-page 應用程式</strong> 的最佳方法</p>
<p>你可以在你要的資料夾下指令 <code>cmd</code> 開啟命令提示字元，<br>接著從下面選擇一種方式安裝 Create React App，官方使用 NPX</p>
<p>my-app 為專案名稱，依專案自行命名<br/></p>
<ul>
<li>NPX<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure></li>
<li>NPM<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init react-app my-app</span><br></pre></td></tr></table></figure></li>
<li>Yarn<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn create react-app my-app</span><br></pre></td></tr></table></figure>
<br/>
<br/>

</li>
</ul>
<blockquote>
<p>⭕ npm 與 npx 的差異<br>npm 為永久安裝，npx 安裝後即移除<br>Create React App 只有最一開始建立專案會用到，之後就不會用了，就很適合用 npx 來安裝</p>
</blockquote>
<br/>
<br/>

<p>安裝成功後，會出現建議的指令</p>
<p><img src="https://imgur.com/KMqwA2o.jpg" alt="CRA"></p>
<br/>
<br/>

<p><code>cd my-app</code>  進入 my-app</p>
<p><code>npm start</code>  開啟專案<br/><br><br/><br><br/><br><br/></p>
<p>如果記不起來指令也沒關係，使用編輯器開啟專案(這邊使用的是 Visual Studio Code)</p>
<p>點擊 package.json，<code>scripts</code> 的地方也會顯示指令</p>
<p><img src="https://imgur.com/WpfOXlM.jpg" alt="script"></p>
<p><code>npm start</code> 執行專案</p>
<p><code>npm run build</code> 打包專案</p>
<p><code>npm test</code> 執行測試</p>
<p><code>npm run eject</code> 對 Create React App 配置進行高度修改<br/><br><br/><br><br/><br><br/></p>
<p>安裝完就大功告成囉！!</p>
<p><img src="https://imgur.com/XCbyYyx.jpg" alt="react"><br><br/><br><br/><br><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>我們今天用 Create React App 成功安裝好 React 了，接著可以進行專案上的開發，明天再來介紹專案內的檔案分別是做什麼功用，以及專案結構該怎麼分配吧！!</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
  </entry>
  <entry>
    <title>React生命週期、錯誤處理</title>
    <url>/2022/07/04/react-lifecycle/</url>
    <content><![CDATA[<p><img src="https://imgur.com/tkfJbzu.jpg" alt="React"></p>
<p>在不同階段的生命週期，如掛載時、更新時、卸載時，分別會對應不同的函式</p>
<a id="more"></a>

<p>圖片截圖自: <a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">網站版 React Life Cycle 網友製</a></p>
<p>常用的生命週期有: constructor、render、componentDidMount、componentDidUpdate、componentWillUnmount</p>
<h1 id="constructor-建構函式"><a href="#constructor-建構函式" class="headerlink" title="constructor 建構函式"></a>constructor 建構函式</h1><p><strong>組件生成後第一個執行，唯一可以指定 state 的地方</strong></p>
<p><strong>constructor 注意</strong><br>❌ 不可呼叫 setState<br>❌ 不可呼叫 ajax<br>❌ 不要將 props 指定為 state</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props); <span class="comment">// super 為 Counter 的父類別 Component</span></span><br><span class="line">    <span class="built_in">this</span>.state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">this</span>.handClick = <span class="built_in">this</span>.handClick.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">handClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="render-渲染函式"><a href="#render-渲染函式" class="headerlink" title="render 渲染函式"></a>render 渲染函式</h1><p><strong>把資料轉成視覺畫面</strong>，可以讀取 props、state，並且會 return 資料</p>
<p>return 可以是一個 jsx 元素、Array、number、boolean、string、null、portal</p>
<p>在 React 16 以後，元素可以是不需被一個標籤包住</p>
<p>你可以用 return Array</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    &lt;h1&gt;title&lt;/h1&gt;,</span><br><span class="line">    &lt;div&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或是<strong>用虛擬的包裝元素 Fragment 包住，渲染出來後 Fragment 不會顯示在 HTML上</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, Fragment &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;Fragment&gt;</span><br><span class="line">        &lt;h1&gt;title&lt;/h1&gt;</span><br><span class="line">        &lt;div&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line">      &lt;/Fragment&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure>
<p>或是直接給空標籤，需要設定 babel，效果也會跟 Fragment 一樣</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;title&lt;/h1&gt;</span><br><span class="line">      &lt;div&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>render 注意</strong><br>❌ 不可呼叫 setState，setState 會更新 state，state 改變後重新 render，會無窮迴圈<br>❌ 不可呼叫 ajax<br><br/><br/></p>
<h1 id="componentDidMount-組件初次-render-完成"><a href="#componentDidMount-組件初次-render-完成" class="headerlink" title="componentDidMount 組件初次 render 完成"></a>componentDidMount 組件初次 render 完成</h1><p>組件第一次 render 完後執行，</p>
<p>可使用 dom、讀取 ajax 資料</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    items: []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.fetchList();</span><br><span class="line">  &#125;</span><br><span class="line">  fetchList = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://.../api&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      items: data,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; items &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;items.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;item.id&#125;&gt;&#123;item.text&#125;&lt;/li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="componentDidUpdate-狀態屬性更新"><a href="#componentDidUpdate-狀態屬性更新" class="headerlink" title="componentDidUpdate 狀態屬性更新"></a>componentDidUpdate 狀態屬性更新</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">componentDidUpdate(prevProps, PrevState, snapshot)</span><br></pre></td></tr></table></figure>
<p>只要 state 或 props 有變動，就會執行 componentDidUpdate</p>
<p>componentDidUpdate 需要做一個 state 或 props 變動的條件判斷</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, PrevState, snapshot</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(prevProps.userID !== <span class="built_in">this</span>.props.userID) &#123;</span><br><span class="line">      <span class="built_in">this</span>.fetchUser(<span class="built_in">this</span>.props.userID);</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>snapshot 是指 getSnapshotBeforeUpdate 回傳的值，可判斷 snapshot 的值，執行動作<br><br/><br/></p>
<h1 id="componentWillUnmount-卸載前"><a href="#componentWillUnmount-卸載前" class="headerlink" title="componentWillUnmount 卸載前"></a>componentWillUnmount 卸載前</h1><p><strong>組件將要銷毀前執行</strong></p>
<p>常用於移除偵聽 removeEventListener、clearTimeout、clearInterval</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="built_in">this</span>.onScroll);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.timeoutTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; &#125;, <span class="number">3000</span>);</span><br><span class="line">  <span class="built_in">this</span>.intervalTimer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123; &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="built_in">this</span>.onScroll);</span><br><span class="line">  <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timeoutTimer);</span><br><span class="line">  <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.intervalTimer);</span><br><span class="line">&#125;</span><br><span class="line">onScroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do someting</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>不常用的生命週期: getDerivedStateFromProps、shouldComponentUpdate、getSnapshotBeforeUpdate</p>
<h1 id="getDerivedStateFromProps"><a href="#getDerivedStateFromProps" class="headerlink" title="getDerivedStateFromProps"></a>getDerivedStateFromProps</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromProps</span>(<span class="params">nextProps, prevState</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>每次 mounted、props、state 的變動都會執行，並 return 新的 state，如不須變更須回傳 nu</strong></p>
<p>靜態函式，不會有 this、不能做非同步操作<br><br/><br/></p>
<h1 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制組件要不要更新，return boolean，預設為 true<br><br/><br/></p>
<h1 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getSnapshotBeforeUpdate</span>(<span class="params">prevProps, prevState</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>組件實際變更之前執行</strong></p>
<p>可以記錄 dom 變更之前的狀態，return 無限制型態</p>
<hr>
<h1 id="錯誤處理"><a href="#錯誤處理" class="headerlink" title="錯誤處理"></a>錯誤處理</h1><p><strong>抓組件在生命週期發生的錯誤</strong>，不會抓到 Promise 回傳的錯誤</p>
<h2 id="getDerivedStateFromError"><a href="#getDerivedStateFromError" class="headerlink" title="getDerivedStateFromError"></a>getDerivedStateFromError</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> getDerivedStateFromError(error)</span><br></pre></td></tr></table></figure>
<p>如果組件發生錯誤，想改變視覺狀態，可在 getDerivedStateFromError 執行錯誤處理</p>
<p><br/><br/></p>
<h2 id="componentDidCatch-error-info"><a href="#componentDidCatch-error-info" class="headerlink" title="componentDidCatch(error, info)"></a>componentDidCatch(error, info)</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">componentDidCatch(error, info)</span><br></pre></td></tr></table></figure>
<p>如果組件發生錯誤，想回傳錯誤訊息給後端或導頁，可在 componentDidCatch 執行</p>
<p><br/><br/></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./Child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    hasError: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromError</span>(<span class="params">error</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidCatch</span>(<span class="params">error, info</span>)</span> &#123;</span><br><span class="line">    axios.post(<span class="string">&#x27;/api/logger&#x27;</span>, &#123; info &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; hasError &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">if</span>(hasError) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Success&lt;/h1&gt;</span><br><span class="line">        &lt;Child /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react lifecycle</tag>
        <tag>react constructor</tag>
        <tag>react render</tag>
        <tag>react componentDidMount</tag>
        <tag>react componentDidUpdate</tag>
        <tag>react componentWillUnmount</tag>
        <tag>react getDerivedStateFromProps</tag>
        <tag>react shouldComponentUpdate</tag>
        <tag>react getSnapshotBeforeUpdate</tag>
        <tag>react getDerivedStateFromError</tag>
        <tag>react componentDidCatch</tag>
      </tags>
  </entry>
  <entry>
    <title>React Portal 傳送組件到指定元素</title>
    <url>/2022/07/04/react-portal/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<p>Portal 可以傳送組件到指定的元素，常用在有階層層級的 Modal</p>
<a id="more"></a>

<p>在 index.html 新增 id=”modal” 的元素<br>/public/index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>render App 到 #root</p>
<p>/src/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = createRoot(container);</span><br><span class="line">root.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>import Modal Component</p>
<p>/src/App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Modal <span class="keyword">from</span> <span class="string">&quot;./Modal&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Modal/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>import createPortal，並 return createPortal  到 #modal</p>
<p>/src/Modal.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPortal &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createPortal (</span><br><span class="line">      &lt;div&gt;Modal&lt;/div&gt;,</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;modal&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Modal;</span><br></pre></td></tr></table></figure>
<p><br><br><br>最後設定的內容就會出現在 #modal 裡囉！</p>
<p><img src="https://imgur.com/DrGcz6E.jpg" alt="htmlModal"></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Portal</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 7】props 上面傳下來的屬性</title>
    <url>/2022/10/24/react-props/</url>
    <content><![CDATA[<p><img src="https://imgur.com/tILSATY.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境任務］</strong></p>
<p>小當家：各位！我又研發了兩個菜色了～嚐嚐看吧</p>
<p>解師傅：這菜炒得不錯啊！一樣把它們列在菜單上吧～</p>
<p>餐廳有很多不同的菜名跟價格，我們是不是可以利用昨天的組件來做呢</p>
<hr>
<h1 id="Props-傳遞屬性"><a href="#Props-傳遞屬性" class="headerlink" title="Props 傳遞屬性"></a>Props 傳遞屬性</h1><p><img src="https://imgur.com/jSxWR9q.jpg" alt="example"><br>從這個例子來看，這三個吉他的卡片屬於同一個 Component，但是圖片、品名跟價格都不一樣，這時候可以利用 Props 來傳遞，將內容傳下去給 Component，以達到同樣組件但不同內容的效果。<br><br/><br><br/></p>
<p><strong>［任務解題］</strong></p>
<p>現在 React 熱炒店要把新的菜色給放上菜單，我們將 Component 加上 props，</p>
<p>分別是 name 跟 price</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;h1&gt;React 熱炒店&lt;/h1&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;List name=<span class="string">&quot;蘆筍沙拉&quot;</span> price=&#123;<span class="number">100</span>&#125; /&gt;</span><br><span class="line">        &lt;List name=<span class="string">&quot;辣炒空心菜&quot;</span> price=&#123;<span class="number">120</span>&#125; /&gt;</span><br><span class="line">        &lt;List name=<span class="string">&quot;雞蛋豆腐&quot;</span> price=&#123;<span class="number">150</span>&#125; /&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><code>name</code>、 <code>price</code> 會當成 props 傳到下層的 Component</p>
<p><strong>props 傳字串直接使用引號，如果傳其他型態要使用大括號 {}</strong><br><br/><br><br/></p>
<p>components/List.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> List = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, price &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;span&gt;&#123;name&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;$&#123;price&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<p>props 會當成參數傳入，再將 name、price 解構出來就可以直接使用囉！<br/><br><br/><br><br/><br>很開心我們現在有三道菜了～～～～</p>
<iframe src="https://codesandbox.io/embed/props-eky0ce?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="props"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>

<h1 id="Props-設定預設值"><a href="#Props-設定預設值" class="headerlink" title="Props 設定預設值"></a>Props 設定預設值</h1><p>在解構 props 傳入預設值，如果上層沒設定屬性，將會顯示預設值</p>
<p>components/List.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> List = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, price = <span class="number">50</span> &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;span&gt;&#123;name&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;$&#123;price&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<p>我們在 price 的地方，給了 50 的預設值<br/><br><br/><br><br/></p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;h1&gt;React 熱炒店&lt;/h1&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;List name=<span class="string">&quot;蘆筍沙拉&quot;</span> price=&#123;<span class="number">100</span>&#125; /&gt;</span><br><span class="line">        &lt;List name=<span class="string">&quot;辣炒空心菜&quot;</span> price=&#123;<span class="number">120</span>&#125; /&gt;</span><br><span class="line">        &lt;List name=<span class="string">&quot;雞蛋豆腐&quot;</span> /&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>因為上層 <code>&lt;List name=&quot;雞蛋豆腐&quot; /&gt;</code> 沒傳入 price 屬性，所以將會顯示預設值<br>雞蛋豆腐就這樣變50塊了~~<br/><br><br/></p>
<iframe src="https://codesandbox.io/embed/props-defalutvalue-bc4tez?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="props-defalutValue"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>
要賠錢賣了！！忘記標價就會是這種下場啊～～!😱
<br/>
<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>利用 props 傳遞不同內容給相同的 Component，達到 Component 複用的效果，明天再來講解要怎麼渲染列表，將資料用迴圈的方式呈現出來，明天見囉！!</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>props</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 28】Redux Toolkit 非同步操作createAsyncThunk</title>
    <url>/2022/12/05/react-redux-tookit-createAsyncThunk/</url>
    <content><![CDATA[<p><img src="https://imgur.com/TntjuyI.jpg" alt="cover"></p>
<a id="more"></a>

<p>做前端時一定會碰到非同步操作，本篇將使用 axios 搭配 Redux Toolkit 來作範例串接 API，可以先將 axios 環境安裝起來<br><br><br><br></p>
<h1 id="安裝-Axios"><a href="#安裝-Axios" class="headerlink" title="安裝 Axios"></a>安裝 Axios</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm</span></span><br><span class="line">npm i axios</span><br><span class="line"></span><br><span class="line"><span class="comment">// yarn</span></span><br><span class="line">yarn add axios</span><br></pre></td></tr></table></figure>
<p>依自己喜好去安裝 axios<br><br><br><br></p>
<h1 id="範例：渲染出-json-資料"><a href="#範例：渲染出-json-資料" class="headerlink" title="範例：渲染出 json 資料"></a>範例：渲染出 json 資料</h1><p>簡單解說一下流程</p>
<ul>
<li>新增一個 json 檔</li>
<li>Axios 串接</li>
<li>創建 store</li>
<li>外層包覆 Provider</li>
<li>createAsyncThunk 操作非同步</li>
<li>取得 store 資料，渲染畫面<br>
<br>

</li>
</ul>
<h1 id="新增一個-json-檔"><a href="#新增一個-json-檔" class="headerlink" title="新增一個 json 檔"></a>新增一個 json 檔</h1><p>public/todoList.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;起床&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;刷牙洗臉&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;吃早餐&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;上班&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 public 新增一個要被渲染的 json 格式資料<br><br><br><br></p>
<h1 id="Axios-串接"><a href="#Axios-串接" class="headerlink" title="Axios 串接"></a>Axios 串接</h1><p>api/todoList.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">&#x27;/todoList.json&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增 API 資料夾，使用 axios 串接剛剛的 json，如呼叫 getData 將會回傳 json 裡的資料<br><br><br><br></p>
<h1 id="創建-store"><a href="#創建-store" class="headerlink" title="創建 store"></a>創建 store</h1><p>store/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> todoReducer <span class="keyword">from</span> <span class="string">&quot;./slice/todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configureStore(&#123;</span><br><span class="line">  reducer: &#123;</span><br><span class="line">    todo: todoReducer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>創建 store，並載入 <code>slice</code> 供 store 使用<br><br><br><br></p>
<h1 id="外層包覆-Provider"><a href="#外層包覆-Provider" class="headerlink" title="外層包覆 Provider"></a>外層包覆 Provider</h1><p>src/App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store/index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Todo <span class="keyword">from</span> <span class="string">&quot;./Todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;Todo /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>載入 <code>Provider</code> 與 <code>store</code>，Provider 組件傳入 store</p>
<p>包在 Provider 裡的組件都可以使用 store<br><br><br><br></p>
<h1 id="createAsyncThunk-操作非同步"><a href="#createAsyncThunk-操作非同步" class="headerlink" title="createAsyncThunk 操作非同步"></a>createAsyncThunk 操作非同步</h1><p>store/slice/todo.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createAsyncThunk, createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getData &#125; <span class="keyword">from</span> <span class="string">&quot;../../api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchData = createAsyncThunk(<span class="string">&quot;todo/fetchTodo&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> getData();</span><br><span class="line">  <span class="keyword">return</span> response.data.data;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todoSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">&quot;todo&quot;</span>,</span><br><span class="line"></span><br><span class="line">  initialState: &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    entities: []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  reducers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  extraReducers: &#123;</span><br><span class="line">    [fetchData.pending]: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.loading = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    [fetchData.fulfilled]: <span class="function">(<span class="params">state, &#123; payload &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      state.loading = <span class="literal">false</span>;</span><br><span class="line">      state.entities = payload;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    [fetchData.rejected]: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.loading = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectTodo = <span class="function">(<span class="params">state</span>) =&gt;</span> state.todo;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoSlice.reducer;</span><br></pre></td></tr></table></figure>
<p>在 slice 的地方引用，並使用 createAsyncThunk 操作非同步</p>
<p>我們設定了 loading、entities，在取得非同步資料完成時，loading 會變 false，並將資料傳遞給 entities</p>
<p><code>createAsyncThunk</code>：在 Redux Toolkit 要呼叫非同步，需要使用 createAsyncThunk 方法</p>
<p>createAsyncThunk 接受兩個參數，第一個為 action type 字串，第二個為返回的 Promise，並生成一個<code>pending</code>、 <code>fulfilled</code>、<code>rejected</code> ，分派 action type 的 thunk</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">createAsyncThunk(type string, promise)</span><br></pre></td></tr></table></figure>
<p><code>extraReducers</code>：因為非同步的函式不在 createSlice 裡面，如果要在 createSlice 中監聽這些 action type，需要在 extraReducers 使用<br><br><br><br></p>
<h1 id="取得-store-資料，渲染畫面"><a href="#取得-store-資料，渲染畫面" class="headerlink" title="取得 store 資料，渲染畫面"></a>取得 store 資料，渲染畫面</h1><p>src/Todo.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchData, selectTodo &#125; <span class="keyword">from</span> <span class="string">&quot;./store/slice/todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Todo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line">  <span class="keyword">const</span> &#123; entities, loading &#125; = useSelector(selectTodo);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(fetchData());</span><br><span class="line">  &#125;, [dispatch]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;今日行程&lt;/h1&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;entities.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;item.id&#125;&gt;&#123;item.text&#125;&lt;/li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Todo;</span><br></pre></td></tr></table></figure>
<p><code>useDispatch</code>呼叫在 store 裡的 fetchData，並取得 api 回傳的資料</p>
<p><code>useSelector</code>取得 store 裡的 state，用 map 渲染，資料就成功渲染在畫面囉！！</p>
<p><img src="https://imgur.com/otPgGwL.jpg" alt="example"></p>
<iframe src="https://codesandbox.io/embed/react-redux-toolkit-async-ygx76r?fontsize=14&hidenavigation=1&theme=light"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="react-redux-toolkit-async"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<br>
<br>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>這邊的範例是讀取 json，當然你也可以使用 API URL 串接，一起練習看看吧~</p>
<p>Redux Toolkit 的部分就到這篇告一段落囉！！<br><br><br><br></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.logrocket.com/using-redux-toolkits-createasyncthunk/">Using Redux Toolkit’s createAsyncThunk</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>Redux Toolkit</tag>
        <tag>createAsyncThunk</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 27】Redux Toolkit 管理組件的共用資料</title>
    <url>/2022/12/04/react-redux-toolkit-store/</url>
    <content><![CDATA[<p><img src="https://imgur.com/TntjuyI.jpg" alt="cover"></p>
<a id="more"></a>
<h1 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a><strong>安裝環境</strong></h1><h2 id="創建模板-React-Redux-Toolkit"><a href="#創建模板-React-Redux-Toolkit" class="headerlink" title="創建模板 React + Redux Toolkit"></a>創建模板 React + Redux Toolkit</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app --template redux</span><br></pre></td></tr></table></figure>
<br>
<br>

<h2 id="安裝-react-redux、-reduxjs-toolkit"><a href="#安裝-react-redux、-reduxjs-toolkit" class="headerlink" title="安裝 react-redux、@reduxjs/toolkit"></a>安裝 react-redux、@reduxjs/toolkit</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm</span></span><br><span class="line">npm i react-redux @reduxjs/toolkit</span><br><span class="line"></span><br><span class="line"><span class="comment">// yarn</span></span><br><span class="line">yarn add react-redux @reduxjs/toolkit</span><br></pre></td></tr></table></figure>
<p>可依自己的需求安裝環境<br><br><br><br></p>
<h1 id="認識變數"><a href="#認識變數" class="headerlink" title="認識變數"></a>認識變數</h1><p>使用 Redux Toolkit，你會聽到幾個關鍵字：</p>
<ul>
<li><code>store</code>：用來存放資料狀態</li>
<li><code>reducer</code>：用來放改變 state 狀態的方法</li>
<li><code>action</code>：reducer 要修改 state 的話，需要傳入 action ，去判斷要啟動哪個 reducer，藉由 <code>dispatch</code> 呼叫方法</li>
<li><code>Provider</code>：在所有組件的最外面包一層 Provider，傳入 store，所有被包覆的組件都可以使用到 store 的狀態。</li>
<li><code>slice</code>：存放 state、reducer、action 的檔案<br>
<br>
<br>

</li>
</ul>
<h1 id="Redux-流程"><a href="#Redux-流程" class="headerlink" title="Redux 流程"></a>Redux 流程</h1><ol>
<li>創建 <code>Store</code></li>
<li>在最外層加入 <code>Provider</code>，並傳入 store，使整個組件都能使用 store 資料</li>
<li>創建 <code>Slice</code>，設定 state、reducer、action</li>
<li>畫面渲染，取得 state、dispatch 方法改變狀態</li>
</ol>
<hr>
<h1 id="範例：todoList"><a href="#範例：todoList" class="headerlink" title="範例：todoList"></a>範例：todoList</h1><p>製作一個 todoList 列表，輸入框輸入文字，點擊按鈕後新增行程<br><br><br><br></p>
<h2 id="創建-store"><a href="#創建-store" class="headerlink" title="創建 store"></a>創建 store</h2><p>store/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> todoReducer <span class="keyword">from</span> <span class="string">&quot;./slice/todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configureStore(&#123;</span><br><span class="line">  reducer: &#123;</span><br><span class="line">    todo: todoReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>將 slice 新增在 reducer</p>
<p><code>configureStore</code>：創建 store 的參數，原生為 creactStore，使用 creactStore 時會有被棄用的警告<br><br><br><br></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> todoReducer <span class="keyword">from</span> <span class="string">&quot;./slice/todo&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> productReducer <span class="keyword">from</span> <span class="string">&quot;./slice/product&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configureStore(&#123;</span><br><span class="line">  reducer: &#123;</span><br><span class="line">    todo: todoReducer,</span><br><span class="line">    product: productReducer</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如有多個檔案，一樣 import 進來，新增在 reducer<br><br><br><br></p>
<h2 id="在最外層加入-Provider"><a href="#在最外層加入-Provider" class="headerlink" title="在最外層加入 Provider"></a>在最外層加入 Provider</h2><p>src/App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store/index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Todo <span class="keyword">from</span> <span class="string">&quot;./Todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;Todo /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>載入 <code>Provider</code> 與 <code>store</code>，Provider 組件傳入 store<br>包在 Provider 裡的組件都可以使用 store<br><br><br><br></p>
<h1 id="創建-Slice"><a href="#創建-Slice" class="headerlink" title="創建 Slice"></a>創建 Slice</h1><p>store/slice/todo.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todoSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">&quot;todo&quot;</span>,</span><br><span class="line"></span><br><span class="line">  initialState: &#123;</span><br><span class="line">    todolist: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;起床&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;刷牙洗臉&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;吃早餐&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;上班&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  reducers: &#123;</span><br><span class="line">    addTodo: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.todolist.push(action.payload);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; addTodo &#125; = todoSlice.actions; <span class="comment">// 取用方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectTodo = <span class="function">(<span class="params">state</span>) =&gt;</span> state.todo; <span class="comment">// 取用資料</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoSlice.reducer;</span><br></pre></td></tr></table></figure>
<p><code>createSlice</code>：創建 slice，把 Redux 原生的 state、reducer、action 都合在一包，稱之為 slice</p>
<p><code>name</code>：取一個相關的名稱</p>
<p><code>initialState</code>：所有狀態的初始值</p>
<p><code>reducers</code>：存放函式，傳入兩個參數，第一個為需要修改的 state，第二個為 action 讓你傳入的參數，用來改變 state<br><br><br><br></p>
<h1 id="畫面渲染"><a href="#畫面渲染" class="headerlink" title="畫面渲染"></a>畫面渲染</h1><p>components/TodoList.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; selectTodo &#125; <span class="keyword">from</span> <span class="string">&quot;../store/slice/todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TodoList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> states = useSelector(selectTodo);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;states.todolist.map(<span class="function">(<span class="params">i</span>) =&gt;</span> (</span><br><span class="line">        &lt;li key=&#123;i.id&#125;&gt;&#123;i.name&#125;&lt;/li&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoList;</span><br></pre></td></tr></table></figure>
<p>將預設行程渲染出來</p>
<p><code>useSelector</code>：拿取 store 的 state，傳入在 slice 建立的 selectTodo<br><br><br><br></p>
<p>src/Todo.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">&quot;./components/TodoList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addTodo &#125; <span class="keyword">from</span> <span class="string">&quot;./store/slice/todo&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Todo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeText = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setText(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleAddTodo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(addTodo(&#123; <span class="attr">id</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="attr">name</span>: text &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">        value=&#123;text&#125;</span><br><span class="line">        onChange=&#123;changeText&#125;</span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;TodoList /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button onClick=&#123;handleAddTodo&#125;&gt;</span><br><span class="line">        新增行程</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立輸入框，按鈕新增行程，將 id、輸入文字傳入 addTodo</p>
<p><code>useDispatch</code>：需藉由 useDispatch 使用 store 裡的 actions，傳入在 slice 建立的 addTodo()</p>
<p><img src="https://imgur.com/dQDWYGs.jpg" alt="todoList"></p>
<iframe src="https://codesandbox.io/embed/react-redux-toolkit-ez6w7q?fontsize=14&hidenavigation=1&theme=light"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="react-redux-toolkit"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<br>
<br>
<br>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>Redux Toolkit 真的比 Redux 好懂很多，真是感謝 Redux Toolkit 的出現！<br>如果專案滿大的話，滿推薦使用 Redux Toolkit 來管理狀態資料，<br>學會了基本的 store 使用，明天繼續來講怎麼用 Redux Toolkit 操作非同步吧！</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>store</tag>
        <tag>reducer</tag>
        <tag>action</tag>
        <tag>Provider</tag>
        <tag>slice</tag>
        <tag>configureStore</tag>
        <tag>useSelector</tag>
        <tag>useDispatch</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 26】Redux 原理與 Redux Toolkit</title>
    <url>/2022/12/04/react-redux-toolkit/</url>
    <content><![CDATA[<p><img src="https://imgur.com/TntjuyI.jpg" alt="cover"></p>
<a id="more"></a>
<p>在後面的幾天將會以 Redux Toolkit 來做說明，而在了解  Redux Toolkit，我們先來了解 Redux 的運作原理，在後面的操作上也會比較好理解<br><br><br><br></p>
<h1 id="Redux-原理"><a href="#Redux-原理" class="headerlink" title="Redux 原理"></a>Redux 原理</h1><p>在 <a href="https://happy9990929.github.io/2022/12/04/react-useContext">DAY 22</a> 時有介紹到 Context API 可以做到跨組件溝通傳遞資料，而同樣的，「Redux」也可以跨組件溝通傳遞資料、管理全域狀態，Redux 不是 React 的 library，但很多 React 專案都會使用 Redux 來管理狀態，如果專案的架構很大，使用 Redux 是一個不錯的選擇。</p>
<p>Redux 可以讓不同的組件，使用到共用的資料和方法，統一集中管理共用的狀態</p>
<p>Redux 會有一個存放狀態的 store，當組件需要資料或方法時，直接從 store 提取，讓組件可以省去組件層層傳遞 (Props drilling) 的麻煩</p>
<p><img src="https://imgur.com/qzMfOMb.jpg" alt="redux"><br><br><br><br></p>
<h1 id="Redux-流程"><a href="#Redux-流程" class="headerlink" title="Redux 流程"></a>Redux 流程</h1><p>先簡單認識一些名詞</p>
<ul>
<li><code>Actions</code>：從應用程式傳遞資料到 store 的資訊，藉由 <code>dispatch</code> 傳遞到 store</li>
<li><code>Action creator</code>：產生 action 的 function</li>
<li><code>Store</code>：整個應用程式的狀態資訊</li>
<li><code>Reducers</code>：處理 action 做變化而得到新的 state</li>
<li><code>View</code>：視圖</li>
</ul>
<p><img src="https://imgur.com/4EO9TMK.jpg" alt="redux"></p>
<ol>
<li><strong>事件發生</strong>： 使用者在視圖上執行某個事件，例如：點擊按鈕觸發動作</li>
<li><strong>發送 action</strong>： <code>Action Creator</code> 向 Store 發送 action</li>
<li><strong>更改 state</strong>： Store 調用 <code>Reducer</code> ，給予 state 和 action 而得到新的 state。</li>
<li><strong>發佈通知</strong>： 需要用到 state 的元件會向 store 訂閱通知，一但 state 有變化，即會收到通知，可重新取得所需 state，重新渲染元件。</li>
</ol>
<hr>
<h1 id="Redux-Toolkit"><a href="#Redux-Toolkit" class="headerlink" title="Redux Toolkit"></a>Redux Toolkit</h1><p>在 Redux 之後，官方出了 Redux Toolkit，也推薦大家使用 Redux Toolkit 來撰寫 Redux，它是以 Redux 為核心，也比較容易上手</p>
<p>Redux Toolkit 解決了 Redux 的問題</p>
<ul>
<li>建構一個 redux store 過於複雜</li>
<li>相依性套件問題，需另外再導入各類函示庫</li>
</ul>
<p>因此在之後的章節，會選擇介紹 Redux Toolkit<br><br><br><br></p>
<h1 id="Redux-DevTools"><a href="#Redux-DevTools" class="headerlink" title="Redux DevTools"></a>Redux DevTools</h1><p>Redux-Devtools 提供了開發人員工具，Redux 應用程序的調試平台，可以方便檢查每個狀態和操作負載</p>
<p><strong>Chrome 安裝 <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd/related">Redux-Devtool</a></strong></p>
<p><img src="https://imgur.com/VWiSoxn.jpg" alt="devtools"></p>
<p>點擊加到 Chrome</p>
<p><img src="https://imgur.com/VLmRQgB.jpg" alt="redux devtools"></p>
<p>安裝完後，可以在網址列旁開啟擴充功能 Redux DevTools</p>
<p>或是點擊右鍵，也會出現 Redux DevTools 選項</p>
<p>就可觀察 redux 的狀態和操作囉！<br><br><br><br></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>今天認識了 Redux 跟 Redux Toolkit 是如何管理資料後，明天再來繼續操作 Redux Toolkit 吧！!<br><br><br><br></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://note.pcwu.net/2017/03/04/redux-intro/">Redex 核心概念筆記</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>Redux Toolkit</tag>
        <tag>Redux DevTools</tag>
      </tags>
  </entry>
  <entry>
    <title>【Redux Toolkit 教學】管理組件的共用資料</title>
    <url>/2022/07/25/react-redux/</url>
    <content><![CDATA[<p><img src="https://imgur.com/Cc0ifaw.jpg" alt="Redux Toolkit"></p>
<p>Redux 是可以讓不同的組件，使用到共用的資料和方法，統一集中管理共用的狀態<br>Redux 不是 React 的 library，但很多 React 專案都會使用 Redux 來管理狀態，這也是學 React 比較複雜的地方<strong>🤪</strong><br>好在官方之後出了 Redux Toolkit，也推薦大家使用 Redux Toolkit 來撰寫 Redux，它是以 Redux 為核心，也比較容易上手！</p>
<a id="more"></a>
<p><br/><br/></p>
<h1 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a><strong>安裝環境</strong></h1><p>可依自己的需求安裝環境</p>
<p><strong>創建模板 React + Redux Toolkit</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app --template redux</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>安裝 react-redux、@reduxjs/toolkit</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm i react-redux @reduxjs/toolkit</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="認識變數"><a href="#認識變數" class="headerlink" title="認識變數"></a>認識變數</h1><p>使用 Redux，你會聽到幾個關鍵字：</p>
<ol>
<li><strong>state</strong>：用來存放資料狀態</li>
<li><strong>reducer</strong>：用來放改變 state 狀態的方法</li>
<li><strong>action</strong>：reducer 要修改 state 的話，需要傳入 action ，去判斷要啟動哪個 reducer</li>
<li><strong>Provider</strong>：在所有組件的最外面（通常是 Index.js）包一層 Provider，傳入 store，所有被包覆的組件都可以使用到 store 的狀態。</li>
<li><strong>store</strong>：存放 state、reducer、action 的檔案<br><br/><br/></li>
</ol>
<h1 id="Redux-流程"><a href="#Redux-流程" class="headerlink" title="Redux 流程"></a>Redux 流程</h1><ol>
<li>創建 <code>Store</code></li>
<li>在最外層加入 <code>Provider</code>，並傳入 store，使整個組件都能使用 store 資料</li>
<li>創建 <code>Slice</code>，設定 state、reducer、action</li>
<li>畫面渲染，取得 state、dispatch 方法改變狀態<br><br/><br/></li>
</ol>
<h1 id="範例情境："><a href="#範例情境：" class="headerlink" title="範例情境："></a>範例情境：</h1><p>todoList 列表，點擊按鈕後新增下一條<br><br/><br/></p>
<h1 id="創建-store"><a href="#創建-store" class="headerlink" title="創建 store"></a>創建 store</h1><p>store/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> todoReducer <span class="keyword">from</span> <span class="string">&quot;./slice/todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configureStore(&#123;</span><br><span class="line">  reducer: &#123;</span><br><span class="line">    todo: todoReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>configureStore</strong>：創建 store 的參數</p>
<p>原生為 creactStore，使用 creactStore 時會有被棄用的警告<br><br/></p>
<p>如有多個檔案，一樣 import 進來</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> todoReducer <span class="keyword">from</span> <span class="string">&quot;./slice/todo&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> productReducer <span class="keyword">from</span> <span class="string">&quot;./slice/product&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configureStore(&#123;</span><br><span class="line">  reducer: &#123;</span><br><span class="line">    todo: todoReducer,</span><br><span class="line">    product: productReducer</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="在最外層加入-Provider"><a href="#在最外層加入-Provider" class="headerlink" title="在最外層加入 Provider"></a>在最外層加入 Provider</h1><p>src/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = createRoot(container);</span><br><span class="line"></span><br><span class="line">root.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>也可以加在 App.js 的最外層，只要是外層都可以<br><br/><br/></p>
<h1 id="創建-Slice"><a href="#創建-Slice" class="headerlink" title="創建 Slice"></a><strong>創建 Slice</strong></h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todoSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">&quot;todo&quot;</span>,</span><br><span class="line">  initialState: &#123;</span><br><span class="line">    todolist: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;早上帶波比散步&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;中午帶波比散步&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;晚上帶波比散步&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;睡前帶波比散步&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    addTodo: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.todolist.push(action.payload);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; addTodo &#125; = todoSlice.actions; <span class="comment">// 取用方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectTodo = <span class="function">(<span class="params">state</span>) =&gt;</span> state.todo; <span class="comment">// 取用資料</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoSlice.reducer;</span><br></pre></td></tr></table></figure>
<p><strong>createSlice</strong>：創建slice，把 Redux 原生的 state、reducer、action 都合在一包，稱之為 slice</p>
<p><strong>name</strong>：取一個相關的名稱</p>
<p><strong>initialState</strong>：所有狀態的初始值</p>
<p><strong>reducers</strong>：存放函式，傳入兩個參數，第一個為需要修改的 state，第二個為 action 讓你傳入的參數<br><br/><br/></p>
<h1 id="畫面渲染"><a href="#畫面渲染" class="headerlink" title="畫面渲染"></a>畫面渲染</h1><p>component/TodoList.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; selectTodo &#125; <span class="keyword">from</span> <span class="string">&quot;../store/slice/todo&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> TodoList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> states = useSelector(selectTodo);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;states.todolist.map(<span class="function">(<span class="params">i</span>) =&gt;</span> (</span><br><span class="line">        &lt;li key=&#123;i.id&#125;&gt;&#123;i.name&#125;&lt;/li&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoList;</span><br></pre></td></tr></table></figure>
<p><strong>useSelector</strong>：要拿取 state，就要使用 Redux 的 useSelector api，傳入你在 slice 建立的 Selector<br><br/><br>引用組件到 App.js，dispatch 取得 store 方法</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">&quot;./components/TodoList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addTodo &#125; <span class="keyword">from</span> <span class="string">&quot;./store/slice/todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleAddTodo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(</span><br><span class="line">      addTodo(&#123; <span class="attr">id</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="attr">name</span>: <span class="string">&quot;帶波比去公園&quot;</span>&#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;TodoList /&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleAddTodo&#125;&gt;add todo&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="非同步操作"><a href="#非同步操作" class="headerlink" title="非同步操作"></a>非同步操作</h1><p>做前端一定會碰到 API 的串接，我們需要 createAsyncThunk 方法</p>
<p>我在 public 新增一個要被呼叫的 json</p>
<p>public/todolist.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;早上帶波比散步&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;中午帶波比散步&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;晚上帶波比散步&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;睡前帶波比散步&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
並使用 axios 串接 API

<p>api/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">&#x27;/index.json&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
在 slice 的地方引用，並使用 createAsyncThunk 操作非同步

<p>store/slice/todo.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createAsyncThunk, createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getData &#125; <span class="keyword">from</span> <span class="string">&quot;../../api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchData = createAsyncThunk(<span class="string">&#x27;todo/fetchTodo&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> getData();</span><br><span class="line">  <span class="keyword">return</span> response.data.data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todoSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">&quot;todo&quot;</span>,</span><br><span class="line"></span><br><span class="line">  initialState: &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    entities: []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  reducers: &#123; &#125;,</span><br><span class="line"></span><br><span class="line">  extraReducers: &#123;</span><br><span class="line">    [fetchData.pending]: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.loading = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    [fetchData.fulfilled]: <span class="function">(<span class="params">state, &#123; payload &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      state.loading = <span class="literal">false</span></span><br><span class="line">      state.entities = payload</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    [fetchData.rejected]: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.loading = <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectTodo = <span class="function">(<span class="params">state</span>) =&gt;</span> state.todo;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoSlice.reducer;</span><br></pre></td></tr></table></figure>
<p><strong>createAsyncThunk</strong>：在 Redux Toolkit 要呼叫非同步，需要使用 createAsyncThunk 方法</p>
<p>createAsyncThunk 接受兩個參數，第一個為 action type 字串，第二個為返回的 Promise，並生成一個<code>pending</code>、 <code>fulfilled</code>、<code>rejected</code> ，分派 action type 的 thunk</p>
<p><strong>extraReducers</strong>：因為非同步的函式不在 createSlice 裡面，如果要在 createSlice 中監聽這些 action type，需要在 extraReducers 使用<br><br/><br>dispatch 呼叫方法，並取得 api 回傳的資料</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchData, selectTodo &#125; <span class="keyword">from</span> <span class="string">&quot;./store/slice/todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line">  <span class="keyword">const</span> &#123; entities, loading &#125; = useSelector(selectTodo);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(fetchData());</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;entities.map(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>))&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="⚠️eslint-出現警告"><a href="#⚠️eslint-出現警告" class="headerlink" title="⚠️eslint 出現警告"></a>⚠️eslint 出現警告</h1><p>使用 useEffect 時遇到警告錯誤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">React Hook useEffect has a missing dependency: &#39;dispatch&#39;.</span><br><span class="line">Either include it or remove the dependency array</span><br></pre></td></tr></table></figure>
<br/>
如果想除掉警告可以把 dispatch 放到第二個參數的陣列裡

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   dispatch(fetchData());</span><br><span class="line">&#125;, [dispatch])</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="參考資料-React-React-Redux-Redux-Toolkit-新手教學、Using-Redux-Toolkit’s-createAsyncThunk"><a href="#參考資料-React-React-Redux-Redux-Toolkit-新手教學、Using-Redux-Toolkit’s-createAsyncThunk" class="headerlink" title="參考資料 React + React-Redux + Redux-Toolkit 新手教學、Using Redux Toolkit’s createAsyncThunk"></a>參考資料 <a href="https://penueling.com/%E7%B7%9A%E4%B8%8A%E5%AD%B8%E7%BF%92/react-react-redux-redix-toolkit-%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%B8/">React + React-Redux + Redux-Toolkit 新手教學</a>、<a href="https://blog.logrocket.com/using-redux-toolkits-createasyncthunk/">Using Redux Toolkit’s createAsyncThunk</a></h3>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>Redux Toolkit</tag>
        <tag>createAsyncThunk</tag>
        <tag>configureStore</tag>
        <tag>useSelector</tag>
        <tag>useDispatch</tag>
        <tag>Redux 教學</tag>
        <tag>Redux Toolkit 教學</tag>
        <tag>createSlice</tag>
        <tag>Redux Toolkit async</tag>
        <tag>extraReducers</tag>
        <tag>react-redux</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 12】條件式 render 與 &amp;&amp; 邏輯運算子</title>
    <url>/2022/10/31/react-render-condition/</url>
    <content><![CDATA[<p><img src="https://imgur.com/zp3njAg.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境任務］</strong></p>
<p>小當家：各位～我特製了一道新菜色，我命名為黃金開口笑</p>
<p>解師傅：什麼！？那不是我的拿手絕活嗎！怎麼變成你的了</p>
<p>小當家：因為他的製程要比較久，這必須標註是限量供應</p>
<p>解師傅：…竟然無視我的話</p>
<p>我們需要幫菜單標註限量供應的樣式，該怎麼做呢？</p>
<hr>
<h1 id="條件式渲染"><a href="#條件式渲染" class="headerlink" title="條件式渲染"></a>條件式渲染</h1><p>有時候我們會遇到，在不同條件時，顯示的內容也會不一樣，這時候我們可以使用 JavaScript 中的運算子如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else">if else</a> 或者 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">三元運算子</a>判斷條件，並更新要渲染的 UI，最常看到的例子就是未登入與登入後<br><br/><br><br/></p>
<h1 id="條件式渲染使用方式"><a href="#條件式渲染使用方式" class="headerlink" title="條件式渲染使用方式"></a>條件式渲染使用方式</h1><p>以下會分享四種條件式渲染方式</p>
<ul>
<li>判斷要 return 的組件</li>
<li>在 return 裡判斷要顯示的組件</li>
<li>&amp;&amp; 邏輯運算子</li>
<li>用樣式控制是否顯示組件<br/>
<br/>
<br/>

</li>
</ul>
<h2 id="方式一：判斷要-return-的組件"><a href="#方式一：判斷要-return-的組件" class="headerlink" title="方式一：判斷要 return 的組件"></a>方式一：判斷要 return 的組件</h2><p>先建立兩個組件，分別是<code>未登入</code>與<code>登入後</code>會出現的標題</p>
<p>components/Guest.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Guest &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;請先登入會員&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Guest;</span><br></pre></td></tr></table></figure>
<br/>

<p>components/User.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const User &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;歡迎回來!&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default User;</span><br></pre></td></tr></table></figure>
<br/>

<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&quot;./components/User&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Guest <span class="keyword">from</span> <span class="string">&quot;./components/Guest&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLogin = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">User</span> /&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Guest</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 App 引入組件，並做條件判斷，你可以將 isLogin 改為 <code>false</code> 試試<br>當 isLogin 為 true 會回傳 <code>User</code> 組件，false 時會回傳 <code>Guest</code> 組件</p>
<br/>

<p>當然，你也可以將 if else 改為三元判斷式，看起來會更簡潔</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLogin = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isLogin ? <span class="xml"><span class="tag">&lt;<span class="name">User</span> /&gt;</span></span> : <span class="xml"><span class="tag">&lt;<span class="name">Guest</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<iframe src="https://codesandbox.io/embed/render-login-return-pnqipp?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="render-login-return"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>

<h2 id="方式二：在-return-裡判斷要顯示的組件"><a href="#方式二：在-return-裡判斷要顯示的組件" class="headerlink" title="方式二：在 return 裡判斷要顯示的組件"></a>方式二：在 return 裡判斷要顯示的組件</h2><p>你也可以直接在 return 裡做條件判斷，透過三元運算式來判斷顯示的組件，點擊按鈕看看效果吧！</p>
<p>components/Guest.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Guest &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;請先登入會員&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Guest;</span><br></pre></td></tr></table></figure>
<br/>

<p>components/User.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const User &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;歡迎回來!&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default User;</span><br></pre></td></tr></table></figure>
<br/>

<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">&quot;./components/User&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Guest <span class="keyword">from</span> <span class="string">&quot;./components/Guest&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isLogin, setIsLogin] = useState(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;isLogin ? <span class="xml"><span class="tag">&lt;<span class="name">User</span> /&gt;</span></span> : <span class="xml"><span class="tag">&lt;<span class="name">Guest</span> /&gt;</span></span>&#125;</span><br><span class="line"></span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123; setIsLogin(!isLogin); &#125;&#125;&gt;</span><br><span class="line">        LOGIN</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>點擊 LOGIN 按鈕後，會切換 isLogin 的開關，<br>如 isLogin 為 true 會顯示 <code>User</code> 組件，false 時會顯示 <code>Guest</code> 組件<br><br/></p>
<iframe src="https://codesandbox.io/embed/render-login-jrpo35?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="render-login"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>
<br/>

<h2 id="方式三：-amp-amp-邏輯運算子"><a href="#方式三：-amp-amp-邏輯運算子" class="headerlink" title="方式三：&amp;&amp; 邏輯運算子"></a>方式三：&amp;&amp; 邏輯運算子</h2><p>常常會有一些開關的判斷，我們希望只在條件為 true 時顯示組件，false 不渲染，<br>當然，你可以用三元運算子判斷</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123; isLogin ? <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>會員獨享送好禮<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> : <span class="literal">null</span> &#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>也可以使用更簡潔的 <code>&amp;&amp;</code> ，當條件為 true 時，<code>&amp;&amp;</code> 右側的 element 會出現在輸出中，<br>如果是 false，React 會忽略並跳過它</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123; isLogin &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>會員獨享送好禮<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> &#125;</span><br></pre></td></tr></table></figure>
<iframe src="https://codesandbox.io/embed/render-login-inlineif-0qjdpy?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="render-login-inlineIf"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>

<h2 id="方式四：用樣式控制是否顯示組件"><a href="#方式四：用樣式控制是否顯示組件" class="headerlink" title="方式四：用樣式控制是否顯示組件"></a>方式四：用樣式控制是否顯示組件</h2><p>你可以用 CSS 或 style 控制是否顯示組件，利用 display 來控制 <code>block</code> 或是 <code>none</code>，</p>
<blockquote>
<p><code>display: none</code> 只是隱藏，element 還是存在</p>
</blockquote>
<p>style 用法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;h2 style=&#123;&#123;<span class="attr">display</span>: isLogin ? <span class="string">&#x27;block&#x27;</span> : <span class="string">&#x27;none&#x27;</span>&#125;&#125;&gt;會員獨享送好禮&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p>CSS 用法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;h2 className=&#123;isLogin ? <span class="string">&#x27;d-block&#x27;</span> : <span class="string">&#x27;d-none&#x27;</span>&#125;&gt;會員獨享送好禮&lt;/h2&gt;</span><br></pre></td></tr></table></figure>
<iframe src="https://codesandbox.io/embed/render-login-inlineif-style-q16qef?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="render-login-inlineIf-style"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>
<br/>

<p><strong>［任務解題］</strong></p>
<p>我們要把黃金開口笑標註限量供應<br>先在資料加入 isLimited 來判斷是否為限量，接著傳入 props 到 List 組件</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Style <span class="keyword">from</span> <span class="string">&quot;./App.module.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> menu = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;蘆筍沙拉&quot;</span>, <span class="attr">price</span>: <span class="number">100</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;辣炒空心菜&quot;</span>, <span class="attr">price</span>: <span class="number">120</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;雞蛋豆腐&quot;</span>, <span class="attr">price</span>: <span class="number">150</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;鳳梨蝦球&quot;</span>, <span class="attr">price</span>: <span class="number">300</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;糖醋雞丁&quot;</span>, <span class="attr">price</span>: <span class="number">200</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;砂鍋魚頭&quot;</span>, <span class="attr">price</span>: <span class="number">500</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;竹筍炒肉絲&quot;</span>, <span class="attr">price</span>: <span class="number">150</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;梨山高麗菜&quot;</span>, <span class="attr">price</span>: <span class="number">120</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;五更腸旺&quot;</span>, <span class="attr">price</span>: <span class="number">250</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;客家小炒&quot;</span>, <span class="attr">price</span>: <span class="number">250</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;三杯杏鮑菇&quot;</span>, <span class="attr">price</span>: <span class="number">180</span>, <span class="attr">isLimited</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;黃金開口笑&quot;</span>, <span class="attr">price</span>: <span class="number">250</span>, <span class="attr">isLimited</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;Style.app&#125;&gt;</span><br><span class="line">      &lt;div className=&#123;Style.container&#125;&gt;</span><br><span class="line">        &lt;h1 className=&#123;Style.title&#125;&gt;React 熱炒店&lt;/h1&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;menu.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">            &lt;List key=&#123;item.name&#125; item=&#123;item&#125; index=&#123;index&#125;&gt;&lt;/List&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<br/>
components/List.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">&quot;./Counter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Style <span class="keyword">from</span> <span class="string">&quot;./List.module.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> List = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, price, isLimited &#125; = props.item;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li className=&#123;Style.item&#125;&gt;</span><br><span class="line">      &lt;div className=&#123;Style.name&#125;&gt;</span><br><span class="line">        &lt;span&gt;&#123;name&#125;&lt;/span&gt;</span><br><span class="line">        &#123;isLimited &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;Style.limited&#125;</span>&gt;</span>(限量供應)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;span&gt;$&#123;price&#125;&lt;/span&gt;</span><br><span class="line">      &lt;Counter /&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<p>利用 <code>&amp;&amp; 邏輯運算子</code> 將黃金開口笑標註 (限量供應) 的文字，就大功告成囉！!<br><br/></p>
<iframe src="https://codesandbox.io/embed/react-with-render-if-else-uewlgj?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="React with render if else"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>分享了多種條件式渲染，我們可以看情境去判斷要使用哪種方式最合適，一起來練習看看吧！</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>render</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 8】React 列表渲染，將陣列、物件渲染成元素</title>
    <url>/2022/10/25/react-render-list-IT/</url>
    <content><![CDATA[<p><img src="https://imgur.com/wmMA1ws.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境任務］</strong></p>
<p>小當家：我把餐廳大致上的料理都開發出來囉！名單都整理好了，直接列上去就行</p>
<p>解師傅：太好了～哇！這菜色有點多呢！一個一個列好像太花時間了…不知道能不能一次把這些通通放到菜單上呢？老闆你有什麼想法嗎？</p>
<p>用複製組件的方法雖然不是不行，但我們想要更有效率且好維護的方法!😕</p>
<hr>
<h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><p>當資料開始多時，將每個元件都複製、塞 props，這並不是一個好維護的作法，<br>明明是做同一件事卻看起來很冗長</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;List name=<span class="string">&quot;蘆筍沙拉&quot;</span> price=&#123;<span class="number">100</span>&#125; /&gt;</span><br><span class="line">    &lt;List name=<span class="string">&quot;辣炒空心菜&quot;</span> price=&#123;<span class="number">120</span>&#125; /&gt;</span><br><span class="line">    &lt;List name=<span class="string">&quot;雞蛋豆腐&quot;</span> price=&#123;<span class="number">150</span>&#125;/&gt;</span><br><span class="line">    &lt;List name=<span class="string">&quot;鳳梨蝦球&quot;</span> price=&#123;<span class="number">300</span>&#125;/&gt;</span><br><span class="line">    &lt;List name=<span class="string">&quot;糖醋雞丁&quot;</span> price=&#123;<span class="number">200</span>&#125;/&gt;</span><br><span class="line">    &lt;List name=<span class="string">&quot;砂鍋魚頭&quot;</span> price=&#123;<span class="number">500</span>&#125;/&gt;</span><br><span class="line">    &lt;List name=<span class="string">&quot;竹筍炒肉絲&quot;</span> price=&#123;<span class="number">150</span>&#125;/&gt;</span><br><span class="line">    &lt;List name=<span class="string">&quot;梨山高麗菜&quot;</span> price=&#123;<span class="number">120</span>&#125;/&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>這結構其實都一樣，我們可以將資料模組化，再從一個集合中把資料渲染到畫面，像 Vue、Angular 會有自定義渲染列表的模版，而 React 並沒有列表模版，大多是使用 JavaScript 本身的語法 <code>map</code> 產生，以下列出陣列與物件的渲染方式<br/><br><br/><br><br/></p>
<h2 id="◆-陣列渲染成元素"><a href="#◆-陣列渲染成元素" class="headerlink" title="◆ 陣列渲染成元素"></a>◆ 陣列渲染成元素</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> chef = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;小當家&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;解師傅&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;雷恩&quot;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;chef.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">        &lt;li key=&#123;item.name&#125;&gt;</span><br><span class="line">          &#123;index + <span class="number">1</span>&#125;. &#123;item.name&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>資料為一個陣列，要重複渲染的地方用大括弧 {} 包住，使用 JavaScript 的陣列語法 <code>map</code> 將每個 <code>item</code> 渲染出來，<code>map</code> 的第二個參數為索引值 <code>index</code></p>
<iframe src="https://codesandbox.io/embed/usestate-array-b7iqdo?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="useState-Array"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>

<br/>
<br/>
除了陣列，物件也可以渲染
<br/>
<br/>

<h2 id="◆-物件渲染成元素"><a href="#◆-物件渲染成元素" class="headerlink" title="◆ 物件渲染成元素"></a>◆ 物件渲染成元素</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> chef = &#123;</span><br><span class="line">    name: <span class="string">&quot;小當家&quot;</span>,</span><br><span class="line">    age: <span class="number">13</span>,</span><br><span class="line">    height: <span class="number">150</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;<span class="built_in">Object</span>.keys(chef).map(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = chef[key];</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;li key=&#123;value&#125;&gt;</span><br><span class="line">            &#123;key&#125;: &#123;value&#125;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;)&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>物件使用 <code>Object.keys</code> 先把物件屬性變成陣列，再使用 <code>map</code> 渲染</p>
<p><strong>物件渲染出來的結果順序不一定相同，如果要照資料排序須將資料改為陣列</strong><br><br/><br><br/></p>
<iframe src="https://codesandbox.io/embed/usestate-object-sfqhps?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="useState-object"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>

<br/>
<br/>

<p>你可能會發現，不管是陣列或物件，為什麼渲染列表第一個元素都有 <code>key</code> 屬性？!<br><br/><br><br/></p>
<h1 id="key-必須是唯一值"><a href="#key-必須是唯一值" class="headerlink" title="key 必須是唯一值"></a>key 必須是唯一值</h1><p>不管是陣列或物件，渲染出來的第一個元素需要帶入 <code>key</code> 屬性，<code>key</code> 是用來辨別元素的改變或增減</p>
<p>如陣列改變，React 會透過 <code>key</code> 去比較新舊元素有無變更，只改變有變更的元素，才不會整個列表再被重新渲染，影響效能</p>
<p>如果你忘了加 <code>key</code>，在 console 也會跳出錯誤，提醒你要加 <code>key</code></p>
<p><img src="https://imgur.com/ioDgcy6.jpg" alt="key"></p>
<p>◆ 不建議使用索引作為 <code>key</code>，尤其如果項目的順序會改變的話，這會對效能產生不好的影響，也可能會讓 component 資料產生問題，最好的方法還是加上唯一值，通常可以加上 id<br><br/><br><br/></p>
<p><strong>［任務解題］</strong><br>利用陣列渲染出 menu，渲染 component，並帶入 item 的 props，記得也要加上 key 哦！</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> menu = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;蘆筍沙拉&quot;</span>, <span class="attr">price</span>: <span class="number">100</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;辣炒空心菜&quot;</span>, <span class="attr">price</span>: <span class="number">120</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;雞蛋豆腐&quot;</span>, <span class="attr">price</span>: <span class="number">150</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;鳳梨蝦球&quot;</span>, <span class="attr">price</span>: <span class="number">300</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;糖醋雞丁&quot;</span>, <span class="attr">price</span>: <span class="number">200</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;砂鍋魚頭&quot;</span>, <span class="attr">price</span>: <span class="number">500</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;竹筍炒肉絲&quot;</span>, <span class="attr">price</span>: <span class="number">150</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;梨山高麗菜&quot;</span>, <span class="attr">price</span>: <span class="number">120</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;五更腸旺&quot;</span>, <span class="attr">price</span>: <span class="number">250</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;客家小炒&quot;</span>, <span class="attr">price</span>: <span class="number">250</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;三杯杏鮑菇&quot;</span>, <span class="attr">price</span>: <span class="number">180</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;h1&gt;React 熱炒店&lt;/h1&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;menu.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">          &lt;List</span><br><span class="line">            key=&#123;item.name&#125;</span><br><span class="line">            name=&#123;item.name&#125;</span><br><span class="line">            price=&#123;item.price&#125;</span><br><span class="line">            index=&#123;index&#125;</span><br><span class="line">          &gt;&lt;/List&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<br/>
餐廳的菜單列表就這樣被渲染出來囉！!🤩

<p>有新的菜色或需要調整時，直接更改 menu 陣列就可以了！<br><br/></p>
<iframe src="https://codesandbox.io/embed/render-list-e6gin6?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="render-List"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>

<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>學會渲染列表就可以做很多事了，看起來簡短很多，重要的是好維護，當需要修改資料時，不用去找 component 的 props，直接統一在資料模組管理就好了！</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>jsx</tag>
      </tags>
  </entry>
  <entry>
    <title>React列表渲染-將陣列、物件渲染成元素</title>
    <url>/2022/07/01/react-render-list/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"><br>在 Vue 框架渲染列表時會有自己的語法 v-for，不過 React 沒有自定義的語法，而是直接使用 JS 的語法</p>
<a id="more"></a>

<h1 id="陣列渲染成元素"><a href="#陣列渲染成元素" class="headerlink" title="陣列渲染成元素"></a>陣列渲染成元素</h1><p>使用 JS 的 map 把每個 item 渲染出來，組件 Item 需要被代入 key 屬性，</p>
<p><strong>key 必須是唯一值</strong>，如陣列改變，才不會再被重新渲染，影響效能</p>
<p>key 如果為 index 也會被重新渲染，只是不會跳出警告，除非沒有唯一值才用 index，或是請後端加上唯一值</p>
<p>List.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> steps = [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;hello&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;world&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;hello world&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;steps.map(<span class="function">(<span class="params">item, idx</span>) =&gt;</span></span><br><span class="line">          (<span class="xml"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;item.text&#125;</span>&gt;</span>&#123; item.text &#125;(&#123; idx &#125;)<span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span>)</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<p>Item.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li&gt;&#123;<span class="built_in">this</span>.props.children&#125;&lt;/li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Item;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="物件渲染成元素"><a href="#物件渲染成元素" class="headerlink" title="物件渲染成元素"></a>物件渲染成元素</h1><p>物件使用 <code>Object.keys</code> 先把物件屬性變成陣列，再使用 map 渲染</p>
<p><strong>物件渲染出來的結果順序不一定相同，如果要照資料排序須將資料改為陣列</strong></p>
<p>List.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dog = &#123;</span><br><span class="line">      name: <span class="string">&#x27;bobee&#x27;</span>,</span><br><span class="line">      age: <span class="number">12</span>,</span><br><span class="line">      height: <span class="number">64</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123; <span class="built_in">Object</span>.keys(dog).map(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> value = dog[key];</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;Item key=&#123;value&#125;&gt;&#123;key&#125;: &#123;value&#125;&lt;/Item&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;) &#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React列表渲染</tag>
        <tag>react map</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 24】React-router-dom 路由設定教學，實現頁面跳轉(下)</title>
    <url>/2022/12/04/react-router-dom-IT2/</url>
    <content><![CDATA[<p><img src="https://imgur.com/qlQjX0E.jpg" alt="cover"></p>
<a id="more"></a>

<p>延續上一篇 <a href="https://happy9990929.github.io/2022/12/04/react-router-dom-IT1">DAY23</a> 的 React-router-dom 繼續往下介紹，<br>如果沒看過的朋友，建議可以先看上一篇哦！</p>
<p>本篇將介紹</p>
<ul>
<li>動態路由參數</li>
<li>當前路由資訊</li>
<li>切換頁面 Scroll To Top<br>
<br>

</li>
</ul>
<h1 id="1-動態路由參數"><a href="#1-動態路由參數" class="headerlink" title="1.動態路由參數"></a>1.動態路由參數</h1><h2 id="useParams"><a href="#useParams" class="headerlink" title="useParams()"></a>useParams()</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;Routes&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;/product/:id&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Product</span>/&gt;</span></span>&#125; /&gt;</span><br><span class="line">  &lt;/Routes&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Product = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> params= useParams();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;h1&gt;&#123;params.id&#125;&lt;/h1&gt;</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Product;</span><br></pre></td></tr></table></figure>
<p>當 router 是動態路由時，<code>useParams</code> 可以取得 url 的 <code>params</code><br><br><br><br></p>
<h2 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams()"></a>useSearchParams()</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Product = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [searchParams, setSearchParams] = useSearchParams();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(searchParams.get(<span class="string">&quot;id&quot;</span>)); <span class="comment">// 12</span></span><br><span class="line">  <span class="built_in">console</span>.log(searchParams.getAll(<span class="string">&quot;id&quot;</span>)); <span class="comment">// [12]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeSearchParams = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setSearchParams(&#123;</span><br><span class="line">      name: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">      id: <span class="string">&quot;456&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;searchParams:&lt;/h2&gt;</span><br><span class="line">      &lt;div&gt;&#123;searchParams.get(<span class="string">&quot;id&quot;</span>)&#125;&lt;/div&gt;</span><br><span class="line">      &lt;button className=<span class="string">&quot;btn&quot;</span> onClick=&#123;changeSearchParams&#125;&gt;</span><br><span class="line">        change Search Params</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Product;</span><br></pre></td></tr></table></figure>
<p>可查找或設定 <code>Query String</code> 問號後面的 params，用法跟 <code>useState()</code> 一樣</p>
<p>如當前路徑為 /product?id=12</p>
<iframe src="https://codesandbox.io/embed/react-router-dom-params-7464bd?fontsize=14&hidenavigation=1&theme=light"
style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
title="react-router-dom-params"
allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>

<h1 id="2-當前路由資訊"><a href="#2-當前路由資訊" class="headerlink" title="2.當前路由資訊"></a>2.當前路由資訊</h1><h2 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> location = useLocation();</span><br><span class="line"><span class="built_in">console</span>.log(location);</span><br></pre></td></tr></table></figure>
<p>獲取當前 url 的各種屬性，你可以得到以下資訊</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  pathname: <span class="string">&quot;/hello/world&quot;</span>,</span><br><span class="line">  search: <span class="string">&quot;?filter=123&quot;</span>,</span><br><span class="line">  hash: <span class="string">&quot;#menu&quot;</span>,</span><br><span class="line">  state: <span class="literal">null</span>,</span><br><span class="line">  key: <span class="string">&quot;12345&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>pathname</code>：URL 路徑</li>
<li><code>search</code>：Query String Params</li>
<li><code>hash</code>：用於確定頁面滾動的具體位置</li>
<li><code>state</code>：對於 window.history.state 的包裝</li>
<li><code>key</code>：每個 Location 對象擁有一個唯一的 key，可以實現數據緩存</li>
</ul>
<iframe src="https://codesandbox.io/embed/react-router-dom-location-kbsx3g?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-router-dom-location"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<h1 id="3-切換頁面-Scroll-To-Top"><a href="#3-切換頁面-Scroll-To-Top" class="headerlink" title="3.切換頁面 Scroll To Top"></a>3.切換頁面 Scroll To Top</h1><p>當在一個頁面將卷軸往下滾動，切換頁面後，會發現卷軸的位置還是在上個頁面切換的位置<br>就會像範例這樣</p>
<iframe src="https://codesandbox.io/embed/react-router-dom-noscrolltotop-jwtgtl?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-router-dom-noscrollToTop"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>


<p>因為 SPA 滾動並不會重新改變卷軸位置，我們需要自行再做 Scroll to top 的設定</p>
<p>新增一個 ScrollToTop</p>
<p>helpers/ScrollToTop.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">ScrollToTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = useLocation();</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;, [pathname]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每當路由 <code>pathname</code> 改變時，卷軸就會回到頂部</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Routes, Route &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./components/Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;./pages/Home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">&quot;./pages/Page1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page2 <span class="keyword">from</span> <span class="string">&quot;./pages/Page2&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">&quot;./pages/NotFound&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ScrollToTop <span class="keyword">from</span> <span class="string">&quot;./helpers/ScrollToTop&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;ScrollToTop /&gt;</span><br><span class="line">      &lt;Routes&gt;</span><br><span class="line">        &lt;Route path=<span class="string">&quot;/&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">&quot;page1&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page1</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">&quot;page2&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page2</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">&quot;*&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;/Routes&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ScrollToTop 引入並放在 <code>BrowserRouter</code> 裡，就大功告成囉！</p>
<iframe src="https://codesandbox.io/embed/react-router-dom-scrolltotop-hdn4kl?fontsize=14&hidenavigation=1&theme=light"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="react-router-dom-scrollToTop"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<br>
<br>
<br>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>路由的設定對 SPA 網站也是很重要的一環，路由的講解在這篇告一段落，其實不是太難，基本上學會這些就很夠用了，花一點時間來練習看看吧！!</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>React-router-dom</tag>
        <tag>useParams</tag>
        <tag>useSearchParams</tag>
        <tag>useLocation</tag>
        <tag>ScrollToTop</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 23】React-router-dom 路由設定教學，實現頁面跳轉(上)</title>
    <url>/2022/12/04/react-router-dom-IT1/</url>
    <content><![CDATA[<p><img src="https://imgur.com/qlQjX0E.jpg" alt="cover"></p>
<a id="more"></a>

<p>此篇版本為 react-router-dom v6</p>
<p>react-router-dom 可以設定 react 的網站路由，是以 <code>react-router</code> 為基底，</p>
<p>所以新增後會自動引入 react-router</p>
<p>本篇分為幾個大類</p>
<ul>
<li>路由設定</li>
<li>路由跳轉</li>
<li>嵌套路由 Nested Routes</li>
</ul>
<p>在開始之前請先安裝 react-router-dom<br><br><br><br></p>
<h1 id="安裝-react-router-dom"><a href="#安裝-react-router-dom" class="headerlink" title="安裝 react-router-dom"></a>安裝 react-router-dom</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm</span></span><br><span class="line">npm i react-router-dom</span><br><span class="line"></span><br><span class="line"><span class="comment">// yarn</span></span><br><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure>
<p>依自己喜好去安裝使用 <code>npm</code> 或 <code>yarn</code><br><br><br><br></p>
<h1 id="1-路由設定"><a href="#1-路由設定" class="headerlink" title="1. 路由設定"></a>1. 路由設定</h1><h2 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h2><p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;BrowserRouter basename=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">	  <span class="comment">// 路由組件</span></span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BrowserRouter 包在所有組件外層，確保整個網站可以使用 router</p>
<p>你可以依需求選擇要用 BrowserRouter 或 HashRouter</p>
<ul>
<li><code>BrowserRouter</code>： 網址沒有 <code>#</code> 字號較美觀，有後端設定，換 url 時會發送 request</li>
<li><code>HashRouter</code>：網址會帶 <code>#</code> 字號，純前端使用，換 url 時不會發送 request</li>
</ul>
<br>

<p>BrowserRouter 可傳入屬性</p>
<ul>
<li>basename: string<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter basename=<span class="string">&quot;/lala&quot;</span>&gt;</span><br><span class="line">   &lt;Link to=<span class="string">&quot;/about&quot;</span>/&gt;</span><br><span class="line">   &lt;Link to=<span class="string">&quot;/contact&quot;</span>/&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>
設定網頁根目錄，上例渲染後會呈現<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;/lala/about&quot;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/lala/contact&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<br>
</li>
</ul>
<ul>
<li><p>forceRefresh: boolean</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter forceRefresh=&#123;<span class="literal">true</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>
<p>如為 true 強制刷新頁面</p>
<br>
</li>
<li><p>keyLength: number</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter keyLength=&#123;<span class="number">12</span>&#125; /&gt;</span><br></pre></td></tr></table></figure>
<p>location key 的長度，預設為 6</p>
<br>
<br>
<br>

</li>
</ul>
<h2 id="Routes、Route-組件"><a href="#Routes、Route-組件" class="headerlink" title="Routes、Route 組件"></a>Routes、Route 組件</h2><p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Routes, Route &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./components/Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;./pages/Home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">&quot;./pages/Page1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page2 <span class="keyword">from</span> <span class="string">&quot;./pages/Page2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Routes&gt;</span><br><span class="line">        &lt;Route path=<span class="string">&quot;/&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">&quot;page1&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page1</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">&quot;page2&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page2</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;/Routes&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Routes 要包在 Route 的外層，在不同的 url 渲染不同的組件</p>
<ul>
<li><code>path</code>：路徑</li>
<li><code>element</code>：要渲染的组件</li>
</ul>
<br>

<h2 id="全匹配路由"><a href="#全匹配路由" class="headerlink" title="全匹配路由"></a>全匹配路由</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;/&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;page1&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page1</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;page2&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page2</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;*&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure>
<p>設定 Route <code>path=&quot;*&quot;</code> 在所有路由的最下方，當上面的路徑都沒有匹配到時，就會顯示此組件，可用於 404 找不到頁面</p>
<iframe src="https://codesandbox.io/embed/react-router-dom-1fyyeb?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-router-dom"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<h1 id="2-路由跳轉"><a href="#2-路由跳轉" class="headerlink" title="2. 路由跳轉"></a>2. 路由跳轉</h1><p>在跳轉路由時，如果路徑是<code>/</code>開頭的是絕對路由，否則為<strong>相對路由</strong>，即<strong>相對於當前 URL</strong> 進行改變</p>
<h2 id="Link-組件"><a href="#Link-組件" class="headerlink" title="Link 組件"></a>Link 組件</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line">&lt;Link to=<span class="string">&quot;page1&quot;</span>&gt;PAGE1&lt;/Link&gt;</span><br><span class="line">&lt;Link to=<span class="string">&quot;/page2&quot;</span>&gt;PAGE2&lt;/Link&gt;</span><br></pre></td></tr></table></figure>
<p>指定連結路徑，跳轉頁面 url<br><br></p>
<h2 id="NavLink-組件"><a href="#NavLink-組件" class="headerlink" title="NavLink 組件"></a>NavLink 組件</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NavLink &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// style</span></span><br><span class="line">&lt;NavLink</span><br><span class="line">  to=<span class="string">&quot;/page1&quot;</span></span><br><span class="line">  style=&#123;<span class="function">(<span class="params">&#123; isActive &#125;</span>) =&gt;</span> (&#123; <span class="attr">color</span>: isActive ? <span class="string">&quot;red&quot;</span> : <span class="string">&quot;&quot;</span> &#125;)&#125;</span><br><span class="line">&gt;</span><br><span class="line">  PAGE1</span><br><span class="line">&lt;/NavLink&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// className</span></span><br><span class="line">&lt;NavLink</span><br><span class="line">  to=<span class="string">&quot;/page2&quot;</span></span><br><span class="line">  className=&#123;<span class="function">(<span class="params">&#123; isActive &#125;</span>) =&gt;</span> (isActive ? <span class="string">&quot;red&quot;</span> : <span class="string">&quot;&quot;</span>)&#125;</span><br><span class="line">&gt;</span><br><span class="line">  PAGE2</span><br><span class="line">&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure>
<p>NavLink 跟 Link 用法相同，差別只在於 NavLink 可以判斷 <code>to</code> 的 url 是否為當前路徑，可用於設定 <code>active</code> 的樣式<br><br></p>
<h2 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate"></a>useNavigate</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> navigate= useNavigate();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 前路徑 /a；    當前路徑 /a/a1</span></span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(<span class="string">&#x27;/b&#x27;</span>)&#125;&gt;跳轉到/b&lt;/div&gt;</span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(<span class="string">&#x27;a11&#x27;</span>)&#125;&gt;跳轉到/a/a1/a11&lt;/div&gt;</span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(<span class="string">&#x27;../a2&#x27;</span>)&#125;&gt;跳轉到/a/a2&lt;/div&gt;</span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(-<span class="number">1</span>)&#125;&gt;跳轉到/a&lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可直接傳入要跳轉的 url，可傳入相對路徑，<code>-1</code> 為回上一層</p>
<iframe src="https://codesandbox.io/embed/react-router-dom-link-uqh658?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-router-dom-link"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<h1 id="3-嵌套路由-Nested-Routes"><a href="#3-嵌套路由-Nested-Routes" class="headerlink" title="3. 嵌套路由 Nested Routes"></a>3. 嵌套路由 Nested Routes</h1><p>嵌套路由使用方法</p>
<ul>
<li>設定路由在「嵌套組件」的 Route 底下</li>
<li>嵌套組件加入 Outlet 顯示頁面內容<br>
<br>

</li>
</ul>
<h2 id="3-1-設定路由在「嵌套組件」的-Route-底下"><a href="#3-1-設定路由在「嵌套組件」的-Route-底下" class="headerlink" title="3-1. 設定路由在「嵌套組件」的 Route 底下"></a>3-1. 設定路由在「嵌套組件」的 Route 底下</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;Routes&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;/&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">      &lt;Route index element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Home</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;page1&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page1</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;page2&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page2</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;*&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">  &lt;/Routes&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>
<p>上例嵌套組件為 Layout，被 Layout 包住的 Route 都會被嵌套，</p>
<p>默認路由為 <code>index</code>，當 url 為 <code>“/”</code> 時，會顯示 Home 組件<br><br></p>
<h2 id="3-2-嵌套組件加入-Outlet-顯示頁面內容"><a href="#3-2-嵌套組件加入-Outlet-顯示頁面內容" class="headerlink" title="3-2. 嵌套組件加入 Outlet 顯示頁面內容"></a>3-2. 嵌套組件加入 Outlet 顯示頁面內容</h2><p>Layout.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Outlet &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">&quot;./Footer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Layout = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Outlet /&gt;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Layout;</span><br></pre></td></tr></table></figure>
<p>將嵌套組件加入 Outlet，Outlet 的地方會顯示被嵌套頁面的內容</p>
<iframe src="https://codesandbox.io/embed/react-router-dom-outlet-5zdtkx?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-router-dom-outlet"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>由於怕篇幅過長，路由設定教學分為上下兩篇介紹，<br>明天會繼續示範動態路由與取得當前路由資訊等介紹，<br>今天就先到這邊囉～我們明天繼續吧！!</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>React-router-dom</tag>
        <tag>BrowserRouter</tag>
        <tag>Routes</tag>
        <tag>Route</tag>
        <tag>Link</tag>
        <tag>NavLink</tag>
        <tag>useNavigate</tag>
        <tag>Nested Routes</tag>
        <tag>Outlet</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 11】設定樣式 CSS 與 Style，美化你的網站</title>
    <url>/2022/10/28/react-style-and-css/</url>
    <content><![CDATA[<p><img src="https://imgur.com/JX9NUrw.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境任務］</strong></p>
<p>解師傅：太好了，菜單該有的功能都有了，這麼一來就萬無一失了！</p>
<p>小當家：恩…萬事俱備，只欠東風</p>
<p>解師傅：欸？…還需要什麼東風？</p>
<p>小當家：我一直很想說，你們不覺得這菜單長得很醜嗎．．．</p>
<p>解師傅：難怪我覺得看久了眼睛有點痛…(掩面)</p>
<p>我們需要排版跟樣式的協助，來吸引更多的客人，我們來幫忙美化一下吧！！</p>
<hr>
<p>如果要使用 CSS 的預處理器，需要先安裝 <code>sass</code></p>
<h1 id="安裝-SASS"><a href="#安裝-SASS" class="headerlink" title="安裝 SASS"></a>安裝 SASS</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; npm</span><br><span class="line">npm i sass</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;yarn</span><br><span class="line">yarn add sass</span><br></pre></td></tr></table></figure>
<p>如此一來，就可以在全局使用 <code>SCSS</code> 或 <code>SASS</code> 了<br><br/><br><br/></p>
<h1 id="樣式的使用方法"><a href="#樣式的使用方法" class="headerlink" title="樣式的使用方法"></a>樣式的使用方法</h1><p>分享四種調整樣式的方法，可依自己的喜好去使用</p>
<ul>
<li>在組件中使用 <code>style</code></li>
<li>全域 CSS</li>
<li><code>CSS module</code> 模組化</li>
<li><code>styled-components</code><br/>
<br/>
<br/>

</li>
</ul>
<h2 id="1-在組件中使用-Style"><a href="#1-在組件中使用-Style" class="headerlink" title="1. 在組件中使用 Style"></a>1. 在組件中使用 Style</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = &#123;</span><br><span class="line">  color: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Btn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button style=&#123;btn&#125;&gt;我是按鈕&lt;/button&gt;</span><br><span class="line">      &lt;button style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>&#125;&#125;&gt;我是按鈕&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Btn;</span><br></pre></td></tr></table></figure>
<p>不需引入外部的 CSS，直接在組件中寫 <code>style</code></p>
<p>在 JSX 裡 style 是一個物件，所以需要用物件的方式傳給 style<br><br/><br><br/></p>
<h2 id="2-全域-CSS"><a href="#2-全域-CSS" class="headerlink" title="2. 全域 CSS"></a>2. 全域 CSS</h2><p>btn.scss</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Btn.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./btn.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Btn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button className=<span class="string">&quot;btn&quot;</span>&gt;我是按鈕&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Btn;</span><br></pre></td></tr></table></figure>
<p>就跟一般寫 CSS 一樣，以 <code>scss</code> 為例，<br>在專案新增 <code>scss</code> 檔案並載入，加入需要調整的樣式</p>
<p>檔案放哪裡沒有特別規定，有的人將 scss 檔統一放在 style 的資料夾，有的人會跟 .js 檔放在同一個資料夾，依照團隊或個人的習慣去放就可以了<br><br/><br><br/></p>
<h2 id="3-CSS-module-模組化"><a href="#3-CSS-module-模組化" class="headerlink" title="3. CSS module 模組化"></a>3. CSS module 模組化</h2><p>btn.module.scss</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Btn.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Style <span class="keyword">from</span> <span class="string">&quot;./btn.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Btn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button className=&#123;Style.btn&#125;&gt;我是按鈕&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Btn;</span><br></pre></td></tr></table></figure>
<p>跟上一個用法其實一樣，不同的是附檔名要加上 <code>.module</code>，<br><code>module.scss</code> 引入後需要給個命名，以範例為例命名為 Style，</p>
<p>模組化可以避免不同檔案相同 className 的衝突，<br><code>.module.scss</code> 檔的樣式只會存在在有引入的頁面<br><br/><br><br/></p>
<h2 id="4-styled-components"><a href="#4-styled-components" class="headerlink" title="4. styled-components"></a>4. styled-components</h2><p>首先安裝套件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm i styled-components</span><br></pre></td></tr></table></figure>
<p>Btn.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  width: 100px</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ButtonText = styled.span<span class="string">`</span></span><br><span class="line"><span class="string">  color: red</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Btn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Button&gt;</span><br><span class="line">      &lt;ButtonText&gt;我是按鈕&lt;/ButtonText&gt;</span><br><span class="line">    &lt;/Button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Btn;</span><br></pre></td></tr></table></figure>
<p><code>styled-components</code> 可以將 CSS 直接放到組件處理，命名後當成標籤來使用<br><br/><br><br/></p>
<p><strong>［任務解題］</strong></p>
<p>我們用了 css module 美化了菜單，看起來順眼多了呢！!</p>
<iframe src="https://codesandbox.io/embed/react-with-scss-module-lgzue6?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="React with scss module"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>以上介紹了四種方法，可依自己的喜好或情境使用，一起來試試看吧！!</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>sass</tag>
        <tag>css</tag>
        <tag>style</tag>
        <tag>CSS module</tag>
      </tags>
  </entry>
  <entry>
    <title>React-router-dom路由設定教學，實現頁面跳轉！</title>
    <url>/2022/07/20/react-router-dom/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<p>此篇版本為 react-router-dom 6.3.0<br>react-router-dom 可以設定 react 的網站路由，是以 react-router 為基底，所以新增後會自動引入 react-router<br>在 <a href="https://happy9990929.github.io/categories/%E3%80%90IT-%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91%E4%BD%A0React%E4%BA%86%E5%97%8E-30%E5%A4%A9%E8%A7%A3%E9%8E%96React%E6%8A%80%E8%83%BD/">【IT 鐵人賽】你React了嗎? 30天解鎖React技能</a> 裡有做更完整的介紹，可直接看這邊<br><a href="https://happy9990929.github.io/2022/12/04/react-router-dom-IT1/">【DAY 23】React-router-dom 路由設定教學，實現頁面跳轉(上)</a><br><a href="https://happy9990929.github.io/2022/12/04/react-router-dom-IT2/">【DAY 24】React-router-dom 路由設定教學，實現頁面跳轉(下)</a></p>
<a id="more"></a>
<br>
<br>

<h1 id="安裝-react-router-dom"><a href="#安裝-react-router-dom" class="headerlink" title="安裝 react-router-dom"></a>安裝 react-router-dom</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm i react-router-dom</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="路由設定"><a href="#路由設定" class="headerlink" title="路由設定"></a>路由設定</h1><p>在 index.js 設定整個網站的路由</p>
<h2 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h2><p>BrowserRouter 包在所有組件外層，確保整個網站可以使用 router</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">root.render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/BrowserRouter&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>BrowserRouter 跟 HashRouter 的差別<br>HashRouter：網址會帶 <code>#</code> 字號，純前端使用，換 url 時不會發送request<br>BrowserRouter： 網址沒有 <code>#</code> 字號較美觀，需有後端設定，換 url 時會發送request<br><br/></p>
<h2 id="Routers、Router-組件"><a href="#Routers、Router-組件" class="headerlink" title="Routers、Router 組件"></a>Routers、Router 組件</h2><p>在不同的 url 渲染不同的組件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter,</span><br><span class="line">  Routes,</span><br><span class="line">  Route,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">&quot;./routes/Page1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page2 <span class="keyword">from</span> <span class="string">&quot;./routes/Page2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">root.render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;/&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;page1&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page1</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;page2&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page2</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  &lt;/BrowserRouter&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><code>path</code>：路徑<br><code>element</code>：要渲染的组件<br><br/></p>
<h2 id="全匹配路由"><a href="#全匹配路由" class="headerlink" title="全匹配路由"></a><strong><strong>全匹配路由</strong></strong></h2><p>設定 Route <code>path=&quot;*&quot;</code> 在所有路由的最下方，當上面的路徑都沒有匹配到時，就會顯示此組件，可用於 404 找不到頁面</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;/foo&quot;</span> element=&#123;Foo&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;bar&quot;</span> element=&#123;Bar&#125;&gt;&lt;/Route&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;*&quot;</span> element=&#123;NotFound&#125;&gt;&lt;/Route&gt;</span><br><span class="line">  &lt;/Route&gt;</span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="路由跳轉"><a href="#路由跳轉" class="headerlink" title="路由跳轉"></a>路由跳轉</h1><h2 id="Link-組件"><a href="#Link-組件" class="headerlink" title="Link 組件"></a>Link 組件</h2><p>指定連結路徑，跳轉頁面 url</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line">&lt;Link to=<span class="string">&quot;index&quot;</span>&gt;index&lt;/Link&gt;;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="NavLink-組件"><a href="#NavLink-組件" class="headerlink" title="NavLink 組件"></a>NavLink 組件</h2><p>NavLink 跟 Link 用法相同，差別只在於 NavLink 可以判斷 to 的 url 是否為當前路徑，可用於設定 active 的樣式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NavLink &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">   &lt;NavLink style=&#123;<span class="function">(<span class="params">&#123; isActive &#125;</span>) =&gt;</span> (&#123; <span class="attr">color</span>: isActive? <span class="string">&quot;red&quot;</span>: <span class="string">&quot;&quot;</span> &#125;)&#125;&gt;style&lt;/NavLink&gt;</span><br><span class="line">   &lt;NavLink className=&#123;<span class="function">(<span class="params">&#123; isActive &#125;</span>) =&gt;</span> isActive ? <span class="string">&quot;red&quot;</span> : <span class="string">&quot;blue&quot;</span>&#125;&gt;className&lt;/NavLink&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate"></a>useNavigate</h2><p>可直接傳入要跳轉的 url，可傳入相對路徑，-1 為回上一層</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> navigate= useNavigate();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 前路徑 /a；    當前路徑 /a/a1</span></span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(<span class="string">&#x27;/b&#x27;</span>)&#125;&gt;跳轉到/b&lt;/div&gt;</span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(<span class="string">&#x27;a11&#x27;</span>)&#125;&gt;跳轉到/a/a1/a11&lt;/div&gt;</span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(<span class="string">&#x27;../a2&#x27;</span>)&#125;&gt;跳轉到/a/a2&lt;/div&gt;</span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(-<span class="number">1</span>)&#125;&gt;跳轉到/a&lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="嵌套路由-Nested-Routes"><a href="#嵌套路由-Nested-Routes" class="headerlink" title="嵌套路由 Nested Routes"></a>嵌套路由 <strong><strong>Nested Routes</strong></strong></h1><p>如要用 App 當作基底的 layout 有兩個步驟</p>
<ol>
<li><p>設定路由在 App 的 Router 底下</p>
</li>
<li><p>加入 Outlay，Outlay 會顯示需變更切換的組件</p>
<br/>

</li>
</ol>
<p><strong>設定路由</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;Routes&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;/&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;page1&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page1</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;page2&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page2</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">  &lt;/Routes&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>並在 App.js ( layout 組件) 的地方加入 Outlet</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Outlet, Link &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;nav&gt;</span><br><span class="line">        &lt;Link to=<span class="string">&quot;/page1&quot;</span>&gt;Page1&lt;/Link&gt; |&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">        &lt;Link to=<span class="string">&quot;/page2&quot;</span>&gt;Page2&lt;/Link&gt;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line">      &lt;Outlet/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="默認路由-index-Routes"><a href="#默認路由-index-Routes" class="headerlink" title="默認路由 index Routes"></a>默認路由 index Routes</h2><p>如為嵌套路由時，可設定預設要顯示的組件，當 url 為 ‘/about’ 時，Outlet 會顯示 Default 組件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;/about&quot;</span> element=&#123;About&#125;&gt;</span><br><span class="line">    &lt;Route index element=&#123;Default&#125;&gt;&lt;/Route&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;contact&quot;</span> element=&#123;Contact&#125;&gt;&lt;/Route&gt;</span><br><span class="line">  &lt;/Route&gt;</span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="Params參數"><a href="#Params參數" class="headerlink" title="Params參數"></a>Params參數</h1><h2 id="useParams"><a href="#useParams" class="headerlink" title="useParams()"></a>useParams()</h2><p>當 router 是動態路由時，useParams 可以取得 url 的 params</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;Routes&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;/product/:id&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Product</span>/&gt;</span></span>&#125; /&gt;</span><br><span class="line">  &lt;/Routes&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> params= useParams();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;params.id&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams()"></a>useSearchParams()</h2><p>可查找或設定 Query String 問號後面的 params，用法跟 <code>useState()</code> 一樣</p>
<p>如當前路徑為 /product?id=12</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [searchParams, setSearchParams] = useSearchParams();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(searchParams.get(<span class="string">&quot;id&quot;</span>)); <span class="comment">// 12</span></span><br><span class="line">  <span class="built_in">console</span>.log(searchParams.getAll(<span class="string">&quot;id&quot;</span>)); <span class="comment">// [12]</span></span><br><span class="line"></span><br><span class="line">  setSearchParams(&#123;</span><br><span class="line">    name: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  &#125;); <span class="comment">// /product?name=foo</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="當前路由資訊"><a href="#當前路由資訊" class="headerlink" title="當前路由資訊"></a>當前路由資訊</h1><h2 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h2><p>獲取當前 url 的各種屬性，</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> location = useLocation();</span><br><span class="line"><span class="built_in">console</span>.log(location);</span><br></pre></td></tr></table></figure>
<p>你可以得到以下資訊</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  pathname: <span class="string">&quot;/hello/world&quot;</span>,</span><br><span class="line">  search: <span class="string">&quot;?filter=123&quot;</span>,</span><br><span class="line">  hash: <span class="string">&quot;#menu&quot;</span>,</span><br><span class="line">  state: <span class="literal">null</span>,</span><br><span class="line">  key: <span class="string">&quot;12345&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>pathname：URL 路徑</p>
<p>search：Query String Params</p>
<p>hash：用於確定頁面滾動的具體位置</p>
<p>state：對於 window.history.state 的包裝</p>
<p>key：每個 Location 對象擁有一個唯一的 key，可以實現數據緩存</p>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="8536485431"></ins></p>
<hr>
<h3 id="參考文獻：react-router-dom使用指南（最新V6-0-1）、router-tutorial"><a href="#參考文獻：react-router-dom使用指南（最新V6-0-1）、router-tutorial" class="headerlink" title="參考文獻：react-router-dom使用指南（最新V6.0.1）、router-tutorial"></a>參考文獻：<a href="https://zhuanlan.zhihu.com/p/431389907">react-router-dom使用指南（最新V6.0.1）</a>、<a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md">router-tutorial</a></h3>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>BrowserRouter</tag>
        <tag>react-router-dom</tag>
        <tag>HashRouter</tag>
        <tag>React Routers</tag>
        <tag>React Router</tag>
        <tag>React Link</tag>
        <tag>React NavLink</tag>
        <tag>React useNavigate</tag>
        <tag>React Nested Routes</tag>
        <tag>React useParams</tag>
        <tag>React useSearchParams</tag>
        <tag>React useLocation</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 19】useCallback 函式記憶體</title>
    <url>/2022/11/14/react-useCallback/</url>
    <content><![CDATA[<p><img src="https://imgur.com/FHpwQm7.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境劇場］</strong></p>
<p>解師傅：嘿！想跟你調整一下菜盤數量，今天會請六月天樂團來表演<br>小當家：這個昨天不是講過了！？更新後的菜色我已經在準備了<br>解師傅：恩～對…只是不一樣的是..他們會包遊覽車過來，本來一桌的菜要變三桌了…<br>小當家：我懷疑他們是來蹭飯的吧！！！</p>
<hr>
<h1 id="認識-useCallback"><a href="#認識-useCallback" class="headerlink" title="認識 useCallback"></a>認識 useCallback</h1><p>基本上 <code>useCallback</code> 的目的就跟 <code>useMemo</code> 一樣，都是為了儲存記憶體的 Memorized Hook，只差在 <code>useMemo</code> 是回傳值，而 <code>useCallback</code> 是回傳 callback function，在 dependencies 沒有改變的情況下，把某個 function 保存下來，減少不必要的重新渲染<br><br><br><br><br><br></p>
<h1 id="useCallback-使用方法"><a href="#useCallback-使用方法" class="headerlink" title="useCallback 使用方法"></a>useCallback 使用方法</h1><ul>
<li>從 react 中載入 <code>useCallback</code> 方法</li>
<li>useCallback 帶入參數，第一個參數為函式，第二個參數為 <code>dependencies</code> 陣列</li>
</ul>
<br>
<br>
<br>

<h2 id="1-從-react-中載入-useCallback-方法"><a href="#1-從-react-中載入-useCallback-方法" class="headerlink" title="1. 從 react 中載入 useCallback 方法"></a>1. 從 react 中載入 useCallback 方法</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br></pre></td></tr></table></figure>
<br>
<br>
<br>

<h2 id="2-useCallback-帶入參數"><a href="#2-useCallback-帶入參數" class="headerlink" title="2. useCallback 帶入參數"></a>2. useCallback 帶入參數</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useCallback (<span class="function">() =&gt;</span> &#123; doSomething(a) &#125;, [a]);</span><br></pre></td></tr></table></figure>
<p>第一個參數為函式，函式回傳不必要重新渲染的程式</p>
<p>第二個參數為 dependencies 陣列，useCallback 會依 <code>dependencies</code> 陣列去做比對差異，如果 dependencies 有變動，才會重新渲染，並回傳 callback function<br>如沒有 dependencies，則放空陣列，每次 render 時都會計算新的值。<br><br><br><br><br><br></p>
<h1 id="useCallback-使用情境"><a href="#useCallback-使用情境" class="headerlink" title="useCallback 使用情境"></a>useCallback 使用情境</h1><ul>
<li>依賴本地 <code>state</code> 或 <code>props</code> 來創建函數，需要使用到緩存函數的地方</li>
<li>useEffect 的 dependencies 為 function</li>
</ul>
<br>
<br>

<p>Object、 Array 因為是 by reference ，所以使用 useMemo 包裝，而 useCallback 也是一樣意思，  useCallback 是把<code>function</code>儲存起來再來做 function 的比對， function 也是 by reference，雖然是一樣的內容，但經過比對會是不一樣的 function</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> functionOne = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> functionTwo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(functionOne === functionTwo); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<br>
<br>

<h2 id="［範例］"><a href="#［範例］" class="headerlink" title="［範例］"></a>［範例］</h2><p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./components/Child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> childCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [count + <span class="number">1</span>, count + <span class="number">2</span>, count + <span class="number">3</span>];</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;現在號碼：&#123;count&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input</span><br><span class="line">        value=&#123;value&#125;</span><br><span class="line">        onChange=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          setValue(e.target.value);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        placeholder=<span class="string">&quot;無關緊要的 input&quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Child childCount=&#123;childCount&#125; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          setCount(<span class="function">(<span class="params">state</span>) =&gt;</span> state + <span class="number">1</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        下一位</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<br>

<p>components/Child.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; childCount &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState([]);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;render Child&quot;</span>);</span><br><span class="line">    setCount(childCount());</span><br><span class="line">  &#125;, [childCount]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>排隊號碼：&#123;count.join(&quot;, &quot;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br></pre></td></tr></table></figure>
<br>

<p>簡單說明情境：</p>
<ul>
<li>畫面有一個計數器，點擊按鈕 count 會 + 1</li>
<li>childCount 函式，會回傳 count 下三個數字的陣列</li>
<li>導入顯示排隊號碼的 Child 組件，傳入 props (childCount 函式)</li>
<li>一個無關緊要的 input，用來測試 Child 組件是否跟著 re-render<br>

</li>
</ul>
<iframe src="https://codesandbox.io/embed/render-callback-function-oqgs0h?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="render-callback-function"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>

<p>現在我們點擊下一位，也會很正常的渲染 Child 組件<br><br><br><br><br><br><br>但在輸入 input 時，發生了什麼事你應該也猜到了！!<br><br><br><br><br><br><br><img src="https://imgur.com/BHn5oqT.jpg" alt="useCallback"></p>
<p>沒錯！明明跟組件無關，但輸入 input 時也 render 了 Child 組件<br><br><br><br></p>
<p>這時我們可以用 <code>useCallback</code> 來解決~</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> childCount = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [count + <span class="number">1</span>, count + <span class="number">2</span>, count + <span class="number">3</span>];</span><br><span class="line">&#125;, [count]);</span><br></pre></td></tr></table></figure>
<br>
<iframe src="https://codesandbox.io/embed/render-usecallback-i4c81o?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="render-useCallback"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
現在輸入 input 也不會影響到 Child 組件囉！用 useCallback 包住以確保 count 變動才會重新渲染
<br>
<br>
<br>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>useCallback 跟 useMemo 用法其實大同小異，<br>其實 <strong><code>useCallback(fn, deps)</code> 就同等於 <code>useMemo(() =&gt; fn, deps)</code></strong></p>
<p>他們有相同的特性，當然同樣的也不要過度使用，最好是用在執行速度很慢、變動性不大的函式，以減少重新渲染的目的</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>useCallback</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 22】useContext 跨組件溝通傳遞資料</title>
    <url>/2022/12/04/react-useContext/</url>
    <content><![CDATA[<p><img src="https://imgur.com/DUtf1oD.jpg" alt="cover"></p>
<a id="more"></a>

<p>當專案越來越多 Components 時，為了使用 props，會將 props 層層傳入，但也許這個 Component 根本沒用到這個 props，卻為了讓下層使用，而不得不傳入，這很容易造成混淆，形成了 <code>Props drilling</code></p>
<p>舉個例子：</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ProductList <span class="keyword">from</span> <span class="string">&quot;./ProductList&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [orders, setOrders] = useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> addOrder = <span class="function">(<span class="params">order</span>) =&gt;</span> &#123;</span><br><span class="line">    setOrders([...orders, order]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Header orders=&#123;orders&#125; /&gt;</span><br><span class="line">      &lt;ProductList addOrder=&#123;addOrder&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>Header 組件需要傳入 orders，ProductList 組件需要傳入 addOrder，所以 state 會寫在最外層的地方，並向下傳入 props<br><br></p>
<p>ProductList.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">&quot;./Product&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProductList = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; addOrder &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> menu = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;雞肉鍋&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;豬肉鍋&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;牛肉鍋&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;海鮮鍋&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;泡菜鍋&quot;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;menu.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">        &lt;Product key=&#123;item.id&#125; &#123;...item&#125; addOrder=&#123;addOrder&#125; /&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProductList;</span><br></pre></td></tr></table></figure>
<p>ProductList 未使用 addOrder，但因應下層 Product 需要，再繼續往下傳遞，等於 ProductList 只是個中繼站<br><br></p>
<p>Product.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Product = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; addOrder, id, name &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;label&gt;&#123;name&#125;&lt;/label&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123; addOrder(id); &#125;&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Product;</span><br></pre></td></tr></table></figure>
<p>這時候的 Product 才接收到從 App 到 ProductList  傳遞下來的 Props</p>
<p><a href="https://codesandbox.io/s/react-not-usecontext-f1hpsm?file=/src/Header.js"><strong>codesandbox 程式碼範例</strong></a></p>
<p><img src="https://imgur.com/DPTqOkZ.jpg" alt="props drilling"></p>
<p>該怎麼解決這個問題？<br><br/><br><br/><br><br/></p>
<h1 id="認識-Context-API"><a href="#認識-Context-API" class="headerlink" title="認識 Context API"></a>認識 Context API</h1><p>有的！Context API 可以解決 <code>Props drilling</code> 的問題！</p>
<p>Context API 可以「跨組件溝通傳遞資料」，讓組件可以省去組件層層傳遞的麻煩。</p>
<p>將 State 在最外層定義，<code>Provider</code>提供 Context value 給底下的組件使用，組件完全不用傳入 Props 就可以使用到 State</p>
<p><img src="https://imgur.com/r4abKG9.jpg" alt="Context"></p>
<p><code>useContext</code> 是使用 Context API 的 Hook，幫助我們使用 Context API<br><br/><br><br/><br><br/></p>
<h1 id="useContext-使用方法"><a href="#useContext-使用方法" class="headerlink" title="useContext 使用方法"></a>useContext 使用方法</h1><ul>
<li>創建 Context 檔案，輸出 Provider、context</li>
<li>外層設定 state</li>
<li>外層引入 Provider，將 state 傳入 Provider value</li>
<li>組件使用 useContext 傳入 context，使用 state</li>
</ul>
<p>跟著範例解說會比較清楚</p>
<p><img src="https://imgur.com/4GcLMkH.jpg" alt="useContext"></p>
<p>現在我們有 App、Header、ProductList、Product 組件</p>
<p><code>App</code> 載入 Header、ProductList</p>
<p><code>Header</code> 會依據點擊次數增加數量</p>
<p><code>ProductList</code> 渲染 Product 組件，並將菜單傳入 Product</p>
<p><code>Product</code> 品名 + 點擊按鈕</p>
<iframe src="https://codesandbox.io/embed/react-usecontext-f9mpkd?fontsize=14&hidenavigation=1&theme=light"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="react-useContext"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<br/>
<br/>
<br/>

<h2 id="1-創建-Context-檔案，輸出-Provider、context"><a href="#1-創建-Context-檔案，輸出-Provider、context" class="headerlink" title="1. 創建 Context 檔案，輸出 Provider、context"></a>1. 創建 Context 檔案，輸出 Provider、context</h2><p>context/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> context = createContext();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; Provider &#125; = context;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context;</span><br></pre></td></tr></table></figure>
<p>引入 <code>createContext</code>，創建 <code>context</code>，並輸出 <code>Provider</code>、<code>context</code> 給內外層組件來使用<br><br/><br><br/></p>
<h2 id="2-外層設定-state"><a href="#2-外層設定-state" class="headerlink" title="2. 外層設定 state"></a>2. 外層設定 state</h2><p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ProductList <span class="keyword">from</span> <span class="string">&quot;./ProductList&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [orders, setOrders] = useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> addOrder = <span class="function">(<span class="params">order</span>) =&gt;</span> &#123;</span><br><span class="line">    setOrders([...orders, order]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;ProductList /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>載入組件，設定好要傳入的 state<br><br/><br><br/></p>
<h2 id="3-外層引入-Provider，將-state-傳入-Provider-value"><a href="#3-外層引入-Provider，將-state-傳入-Provider-value" class="headerlink" title="3. 外層引入 Provider，將 state 傳入 Provider value"></a>3. 外層引入 Provider，將 state 傳入 Provider value</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ProductList <span class="keyword">from</span> <span class="string">&quot;./ProductList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;./context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [orders, setOrders] = useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> addOrder = <span class="function">(<span class="params">order</span>) =&gt;</span> &#123;</span><br><span class="line">    setOrders([...orders, order]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> contextValue = &#123;</span><br><span class="line">    orders,</span><br><span class="line">    addOrder</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Provider value=&#123;contextValue&#125;&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &lt;ProductList /&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>引入 Provider，將 state 包成 contextValue 傳入 <code>Provider</code> 的 value 屬性，如此一來，被 Provider 包住的組件都可以使用 contextValue 裡的 state<br><br/><br><br/></p>
<h2 id="4-組件使用-useContext-傳入-context，使用-state"><a href="#4-組件使用-useContext-傳入-context，使用-state" class="headerlink" title="4. 組件使用 useContext 傳入 context，使用 state"></a>4. 組件使用 useContext 傳入 context，使用 state</h2><p>components/ProductList.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">&quot;./Product&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProductList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> menu = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;雞肉鍋&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;豬肉鍋&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;牛肉鍋&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;海鮮鍋&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;泡菜鍋&quot;</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;menu.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">        &lt;Product key=&#123;item.id&#125; &#123;...item&#125; /&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProductList;</span><br></pre></td></tr></table></figure>
<p>ProductList 不用傳入任何 context value<br><br/></p>
<p>components/Product.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> context <span class="keyword">from</span> <span class="string">&quot;./context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Product = <span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; addOrder &#125; = useContext(context);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;label&gt;&#123;name&#125;&lt;/label&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123; addOrder(id); &#125;&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Product;</span><br></pre></td></tr></table></figure>
<p>Product 引入 <code>useContext</code>，並將 <code>context</code> 傳入，這邊只需要按鈕的 function，所以只需要載入 context value 裡的 addOrder，就可以直接使用 addOrder<br><br/></p>
<p>components/Header.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> context <span class="keyword">from</span> <span class="string">&quot;./context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; orders &#125; = useContext(context);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      購物車 ($&#123;orders.length&#125;)</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure>
<p>Header 也是同理，只需載入 context value 裡的 orders，就可以直接使用 orders<br><br/><br><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>Context API 幫助我們解決跨組件溝通的問題，在後面的章節會再講到，跟 Context API 有同樣功能的 「Redux Toolkit」，不過 Redux 使用上比 Context API 複雜多了，先喘口氣留到後面再講吧!</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>Context API</tag>
        <tag>useContext</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 29】useReducer 處理複雜邏輯的 state</title>
    <url>/2022/12/05/react-useReducer/</url>
    <content><![CDATA[<p><img src="https://imgur.com/JmjIkbz.jpg" alt="cover"></p>
<a id="more"></a>
<p>看到 useReducer 你可能會疑惑，這跟前幾天講的 Redux 裡的 Reducer 有什麼毛線關係嗎？</p>
<p>的確！useReducer 的觀念跟用法都跟 Redux 很像，所以如果你已經會 Redux，那 useReducer 你也已經會了！<br><br><br><br></p>
<h1 id="認識-useReducer"><a href="#認識-useReducer" class="headerlink" title="認識 useReducer"></a>認識 useReducer</h1><p>useReducer 是 React 的 hook，讓我們可以用 reducer、action、dispatch 來操作 state，在先前我們已經使用過 useState 來操作 state，useState 的底層其實就是用 useReducer 實踐的，而 useReducer 可以說是用來處理複雜邏輯的 state<br><br><br><br></p>
<h1 id="useReducer-使用方法"><a href="#useReducer-使用方法" class="headerlink" title="useReducer 使用方法"></a>useReducer 使用方法</h1><ul>
<li>從 react 中載入 <code>useReducer</code></li>
<li>宣告<code>state、dispatch</code>、<code>reducer</code> 與初始值<br>
<br>

</li>
</ul>
<h2 id="1-從-react-中載入-useReducer"><a href="#1-從-react-中載入-useReducer" class="headerlink" title="1. 從 react 中載入 useReducer"></a>1. 從 react 中載入 useReducer</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br></pre></td></tr></table></figure>
<br>
<br>

<h2 id="2-宣告-state、dispatch、reducer-與初始值"><a href="#2-宣告-state、dispatch、reducer-與初始值" class="headerlink" title="2. 宣告 state、dispatch、reducer 與初始值"></a>2. 宣告 state、dispatch、reducer 與初始值</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg, init);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>state</code>：狀態</li>
<li><code>dispatch</code>：呼叫 action 的方法</li>
<li><code>reducer</code>：對 state 做操作</li>
<li><code>initialArg</code>：初始值</li>
<li><code>init</code>：初始化 state 的函式，非必要的參數</li>
</ul>
<p>以下是一個使用 useReducer 的範例<br><br><br><br></p>
<h1 id="範例-計數器"><a href="#範例-計數器" class="headerlink" title="範例: 計數器"></a>範例: 計數器</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Count: &#123;state.count&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;decrement&quot;</span> &#125;)&#125;&gt;</span><br><span class="line">        decrement</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;increment&quot;</span> &#125;)&#125;&gt;</span><br><span class="line">        increment</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>點擊 decrement 減少 count，點擊 increment 增加 count</p>
<iframe src="https://codesandbox.io/embed/react-usereducer-ogjqiz?fontsize=14&hidenavigation=1&theme=light"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="react-useReducer"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<br>
<br>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>雖然 useReducer 跟 Redux 很像，但是無法完全取代 Redux，useReducer 無法存取 global store，必須搭配 context API 才能做出類似簡易版 Redux 的效果，適合在較輕量的專案<br><br><br><br></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zh-hant.reactjs.org/docs/hooks-reference.html#usereducer">React useReducer</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>useReducer</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 17】useEffect 處理副作用</title>
    <url>/2022/11/10/react-useEffect/</url>
    <content><![CDATA[<p><img src="https://imgur.com/xgLhnXk.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境劇場］</strong></p>
<p>解師傅：餐廳請了歌手來駐唱，讓生意越來越好了，卻引來了隔壁小吃店的不滿，在我們版上留了負評</p>
<p>小當家：人紅是非多…這也是沒辦法的事，金錢才是王道啊！！</p>
<hr>
<h1 id="Side-Effect-副作用"><a href="#Side-Effect-副作用" class="headerlink" title="Side Effect 副作用"></a>Side Effect 副作用</h1><p>在介紹 useEffect 先來認識什麼是 Effect，Effect 指的是「<code>Side Effect</code>」，簡稱 <code>Effect</code> ，中文是副作用的意思。</p>
<p>我們最常聽到的副作用，也就是醫生開藥的藥單上面都會寫哪些藥，上面寫著作用跟副作用，作用是緩解鼻塞、流鼻水，可能會伴隨的副作用是會想睡覺</p>
<p>在 JavaScript 的也是這樣的存在，「在執行函式或行為時，會導致原有的狀態被改變或有附加功能」，就稱之為 Side Effect，例如：改變全域變數狀態、發送 HTTP Request、手動操作 DOM 元素 、改變系統狀態等等<br><br/><br><br/><br><br/></p>
<h1 id="認識-useEffect"><a href="#認識-useEffect" class="headerlink" title="認識 useEffect"></a>認識 useEffect</h1><p>useEffect 就是來處理 Side Effect 的 Hook，早期的 Class Component 是使用生命週期 (lifecycle)來管理組件函式，但這讓相同邏輯的函式，被迫拆開在不同的生命週期</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendStatus</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123; <span class="attr">isOnline</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">    <span class="built_in">this</span>.handleStatusChange = <span class="built_in">this</span>.handleStatusChange.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(</span><br><span class="line">      <span class="built_in">this</span>.props.friend.id,</span><br><span class="line">      <span class="built_in">this</span>.handleStatusChange</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    ChatAPI.unsubscribeFromFriendStatus(</span><br><span class="line">      <span class="built_in">this</span>.props.friend.id,</span><br><span class="line">      <span class="built_in">this</span>.handleStatusChange</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">handleStatusChange</span>(<span class="params">status</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      isOnline: status.isOnline</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state.isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Loading...&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.state.isOnline ? <span class="string">&#x27;Online&#x27;</span> : <span class="string">&#x27;Offline&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
因此 useEffect 的設計在將其保持在一起，易於管理，在程式碼上也較簡潔許多

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatus</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">      setIsOnline(status.isOnline);</span><br><span class="line">    &#125;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Loading...&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">&#x27;Online&#x27;</span> : <span class="string">&#x27;Offline&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
<br/>
<br/>

<h1 id="useEffect-使用方法"><a href="#useEffect-使用方法" class="headerlink" title="useEffect 使用方法"></a>useEffect 使用方法</h1><ul>
<li>從 react 中載入 useEffect</li>
<li>useEffect  帶入一個函式，函式裡帶入要執行的 effect</li>
<li>如有 dependencies，將 dependencies 帶入第二個參數陣列<br/>
<br/>
<br/>

</li>
</ul>
<h2 id="1-從-react-中載入-useEffect"><a href="#1-從-react-中載入-useEffect" class="headerlink" title="1. 從 react 中載入 useEffect"></a>1. 從 react 中載入 useEffect</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>
<br/>
<br/>
<br/>

<h2 id="2-useEffect-帶入一個函式，函式裡帶入要執行的-effect"><a href="#2-useEffect-帶入一個函式，函式裡帶入要執行的-effect" class="headerlink" title="2. useEffect  帶入一個函式，函式裡帶入要執行的 effect"></a>2. useEffect  帶入一個函式，函式裡帶入要執行的 effect</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//...要執行的 effect</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>useEffect 會在參數中帶入一個函式，而這個函式會在「畫面渲染完成」後被呼叫，函式裡面放入畫面完成後需要執行的 effect<br><br/><br><br/><br><br/></p>
<h2 id="3-如有-dependencies，將-dependencies-帶入第二個參數陣列"><a href="#3-如有-dependencies，將-dependencies-帶入第二個參數陣列" class="headerlink" title="3. 如有 dependencies，將 dependencies 帶入第二個參數陣列"></a>3. 如有 dependencies，將 dependencies 帶入第二個參數陣列</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//...要執行的 effect</span></span><br><span class="line">&#125;, [dependencies])</span><br></pre></td></tr></table></figure>
<p>useEffect 第二個參數為一個陣列，陣列裡會放入需要重新渲染 effect 的依賴，我們稱之為 dependencies，如 dependencies 有變動，才會重新執行 effect<br><br/><br><br/><br><br/></p>
<h2 id="看個範例"><a href="#看個範例" class="headerlink" title="看個範例"></a>看個範例</h2><br/>
<iframe src="https://codesandbox.io/embed/react-useeffect-pyxuff?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useEffect"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>

<p>這是一個單純的計數器功能，一開始畫面渲染完畢後，會接著執行 useEffect，執行結束後，一直到變更了 count 的值，才會再執行一次 useEffect</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;useEffect&quot;</span>);</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Count: &#123;count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          setCount(<span class="function">(<span class="params">state</span>) =&gt;</span> state + <span class="number">1</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        Add Count</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h3 id="嘿！為什麼畫面一開始就渲染兩次"><a href="#嘿！為什麼畫面一開始就渲染兩次" class="headerlink" title="嘿！為什麼畫面一開始就渲染兩次 ?"></a>嘿！為什麼畫面一開始就渲染兩次 ?</h3><br/>

<p>為什麼畫面渲染完畢後，會跑了兩次 console.log？</p>
<p>你可以點擊 src/index.js 檔案，會看到裡面有 <code>Strict Mode</code> 嚴格模式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">root.render(</span><br><span class="line">  &lt;StrictMode&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/StrictMode&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>Strict Mode 在開發模式下，為了檢測到渲染期生命週期的預期之外的 Side Effect，故意調用函式兩次，來幫助我們發現 Side Effect</p>
<p>這些函式有</p>
<ul>
<li>Class component <code>constructor</code>、<code>render</code> 和 <code>shouldComponentUpdate</code> 方法</li>
<li>Class component 的靜態 <code>getDerivedStateFromProps</code> 方法</li>
<li>Function component 的內容</li>
<li>狀態更新函式（<code>setState</code> 的第一個參數）</li>
<li>函數傳遞至 <code>useState</code>、<code>useMemo</code> 或 <code>useReducer</code></li>
</ul>
<br/>
<br/>

<p>如果我們在 index.js 下了 console.log(”index.js”)，會發現 index.js 只渲染了一次</p>
<p><img src="https://imgur.com/ESNkcFB.jpg" alt="useEffect"></p>
<p>問題就很清楚了，Strict Mode 的開發模式下確實會渲染兩次</p>
<blockquote>
<p>Strict Mode 只會在開發模式中執行，故不會調用在正式環境</p>
</blockquote>
<br/>
<br/>
<br/>

<h1 id="useEffect-使用的四種方式"><a href="#useEffect-使用的四種方式" class="headerlink" title="useEffect 使用的四種方式"></a>useEffect 使用的四種方式</h1><h2 id="1-只執行在畫面渲染後"><a href="#1-只執行在畫面渲染後" class="headerlink" title="1. 只執行在畫面渲染後"></a>1. 只執行在畫面渲染後</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;mounted&quot;</span>);</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>
<p>不依賴於任何 props 或 state 的值，不需要重新執行的函式或行為，可以直接傳遞一個空陣列<br>如果你有學過 Class Component，就會像是 lifecycle 中的 <code>componentDidMount</code><br><br/><br><br/><br><br/></p>
<h2 id="2-組件更新就執行"><a href="#2-組件更新就執行" class="headerlink" title="2. 組件更新就執行"></a>2. 組件更新就執行</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;updated&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>只要任何組件發生變動就會執行，會像是 class lifecycle 中的 <code>componentDidUpdate</code><br><br/><br><br/><br><br/></p>
<h2 id="3-組件-dependencies-有變更才執行"><a href="#3-組件-dependencies-有變更才執行" class="headerlink" title="3. 組件 dependencies 有變更才執行"></a>3. 組件 dependencies 有變更才執行</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;updated with dependencies&quot;</span>);</span><br><span class="line">&#125;, [count])</span><br></pre></td></tr></table></figure>
<p>dependencies 發生改變才執行，如範例中的 count 如有變更，才會觸發 console.log，避免在每次 render 都進行昂貴的計算<br><br/><br><br/><br><br/></p>
<h2 id="4-清理需被銷毀的函式"><a href="#4-清理需被銷毀的函式" class="headerlink" title="4. 清理需被銷毀的函式"></a>4. 清理需被銷毀的函式</h2><p>清理函式會在組件每次重新渲染時執行，先清除上次留下來的 effect，useEffect 會做的 4 個步驟：</p>
<ol>
<li>判斷第二個參數的陣列是否一樣，如果一樣才會繼續</li>
<li>執行上一次存下來的清理函式</li>
<li>執行<code>useEffect</code>的內容</li>
<li>把 清理函式 存下來，供下次使用</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> onMousedown = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;mousedown&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousedown&quot;</span>, onMousedown);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello React&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;cleanup&quot;</span>);</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;mousedown&quot;</span>, onMousedown);</span><br><span class="line">		<span class="built_in">clearInterval</span>(timer);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在 useEffect 函式裡 <code>return</code> 一個函式，這個函式就是清除 effect 的函式，就像是 class lifecycle 中的 <code>componentWillUnmount</code> ，如果沒有將 effect 清除，當組件重新渲染，都會執行一個新的事件監聽，這很可能會發生錯誤，也會讓效能下降，常見的需要清除的函式如：setInterval、setTimeout、addEventListener…等<br><br/></p>
<iframe src="https://codesandbox.io/embed/react-useeffect-example-o38jy9?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useEffect-example"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br/>
<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>認識了 useEffect 跟使用方法，讓我們得以處理 side effect，useEffect 跟之前的 class lifecycle 相比好寫很多，把相同邏輯放在一起也舒服很多～一起練習看看吧！<br><br/><br><br/><br><br/></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zh-hant.reactjs.org/docs/hooks-effect.html">官方 Effect Hook</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>useEffect</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 18】useMemo 緩存記憶體，避免重新渲染</title>
    <url>/2022/11/11/react-useMemo/</url>
    <content><![CDATA[<p><img src="https://imgur.com/LlQ4ynF.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境劇場］</strong></p>
<p>解師傅：本來明天要請周Ｊ倫來表演，但他臨時有事，所以改請六月天樂團了！</p>
<p>小當家：哦！！那我要改一下了</p>
<p>解師傅：改什麼？</p>
<p>小當家：我的腦袋記錄名單裡，周Ｊ倫愛吃雞蛋豆腐，六月天裡面的團員有兩個不愛，因為現在變更名單，所以明天上的菜色將會做更動</p>
<p>解師傅：真有你的．．．</p>
<hr>
<h1 id="認識-useMemo"><a href="#認識-useMemo" class="headerlink" title="認識 useMemo"></a>認識 useMemo</h1><p>useMemo 是一個 Memorized Hook，每當 render 時都會重新渲染(<code>re-render</code>)組件，如果遇到不必要渲染程式，重新渲染就會造成效能上的浪費，透過 useMemo 可以將函式運算完的值存一個記憶體(memoization)，你也可以把它視為緩存值，以減少組件不必要的重新渲染<br><br><br><br><br><br></p>
<h1 id="useMemo-使用方法"><a href="#useMemo-使用方法" class="headerlink" title="useMemo 使用方法"></a>useMemo 使用方法</h1><ul>
<li>從 react 中載入 useMemo 方法</li>
<li>useMemo 帶入參數，第一個參數為函式，第二個參數為 dependencies 陣列<br>
<br>
<br>

</li>
</ul>
<h2 id="1-從-react-中載入-useMemo-方法"><a href="#1-從-react-中載入-useMemo-方法" class="headerlink" title="1. 從 react 中載入 useMemo 方法"></a>1. 從 react 中載入 useMemo 方法</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br></pre></td></tr></table></figure>
<br>
<br>
<br>

<h2 id="2-useMemo-帶入參數"><a href="#2-useMemo-帶入參數" class="headerlink" title="2. useMemo 帶入參數"></a>2. useMemo 帶入參數</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function">() =&gt;</span> &#123; <span class="keyword">return</span> fn(a) &#125;, [a]);</span><br></pre></td></tr></table></figure>
<p>第一個參數為函式，函式回傳不必要重新渲染的程式</p>
<p>第二個參數為 dependencies 陣列，useMemo 會依 dependencies 陣列去做比對差異，如果 dependencies 有變動，才會重新渲染，並回傳一個值<br>如沒有 dependencies，則放空陣列，每次 render 時都會計算新的值。<br><br><br><br><br><br></p>
<h1 id="useMemo-使用情境"><a href="#useMemo-使用情境" class="headerlink" title="useMemo 使用情境"></a>useMemo 使用情境</h1><ul>
<li>減少組件重新渲染大量複雜的計算</li>
<li>useEffect 的 dependencies 為物件或陣列<br>
<br>
<br>

</li>
</ul>
<h2 id="1-減少組件重新渲染大量複雜的計算"><a href="#1-減少組件重新渲染大量複雜的計算" class="headerlink" title="1. 減少組件重新渲染大量複雜的計算"></a>1. 減少組件重新渲染大量複雜的計算</h2><p>複雜的計算本身就會吃比較多效能，每次狀態有變動又 re-render，但事實上我們只需要加上 <code>dependencies</code> 就可以減少 re-render 的次數</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeCount = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setCount(value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> evenNumbers = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span> &amp;&amp; <span class="built_in">String</span>(i).includes(<span class="string">&quot;2&quot;</span>)) &#123;</span><br><span class="line">      evenNumbers.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;number&quot;</span> value=&#123;count&#125; onChange=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> changeCount(e)&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;<span class="number">1</span>~&#123;count&#125; 為偶數且數字有 <span class="number">2</span> 的號碼：&lt;/div&gt;</span><br><span class="line">      &#123;evenNumbers.join(<span class="string">&quot;, &quot;</span>)&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以不用太仔細讀程式碼，這邊簡單說明一下程式範例目的：</p>
<ul>
<li>這是一個數字型態的 input</li>
<li>輸入數字後便會計算出偶數且數字有 2 的號碼<br>

</li>
</ul>
<iframe src="https://codesandbox.io/embed/react-usememo-example1-rbhybh?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useMemo_example1"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<p>這邊乍看之下沒什麼太大的問題，於是再加入了一個計時器進來</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changeCount = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setCount(value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> evenNumbers = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span> &amp;&amp; <span class="built_in">String</span>(i).includes(<span class="string">&quot;2&quot;</span>)) &#123;</span><br><span class="line">      evenNumbers.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;render evenNumbers&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> time = useTime();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">useTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [time, setTime] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        setTime(i++);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;render time&quot;</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;time：&#123;time&#125;&lt;/span&gt;</span><br><span class="line">      &lt;h2&gt;&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;number&quot;</span> value=&#123;count&#125; onChange=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> changeCount(e)&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;<span class="number">1</span>~&#123;count&#125; 為偶數且數字有 <span class="number">2</span> 的號碼：&lt;/div&gt;</span><br><span class="line">      &#123;evenNumbers.join(<span class="string">&quot;, &quot;</span>)&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加了計時器後，每 1 秒計時器會 +1</p>
<p>為了方便觀察，我們在計時器和 evenNumbers 的函式分別下了 <code>console.log</code> ，每當計時器變動，會發現 evenNumbers 的地方又重新渲染了一次！</p>
<p>由此可知，只要有元素狀態變更，整個都會重新 render 一次，這造成了效能上的浪費</p>
<iframe src="https://codesandbox.io/embed/react-usememo-example2-n4zjwj?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useMemo_example2"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<p>這時候就可以用 <code>useMemo</code> 解救這個問題！<br><br><br><br></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> evenNumbers = useMemo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span> &amp;&amp; <span class="built_in">String</span>(i).includes(<span class="string">&quot;2&quot;</span>)) &#123;</span><br><span class="line">      result.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;evenNumbers&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;, [count]);</span><br></pre></td></tr></table></figure>
<p>我們用了 useMemo ，讓 evenNumbers 只在 count 有變動時才會渲染，現在可以看到，即使計時器一直變動，evenNumbers 也不會再重新 render 囉！<br><br></p>
<iframe src="https://codesandbox.io/embed/react-usememo-example3-0zt8uh?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useMemo_example3"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<h2 id="2-useEffect-的-dependencies-為物件或陣列"><a href="#2-useEffect-的-dependencies-為物件或陣列" class="headerlink" title="2. useEffect 的 dependencies 為物件或陣列"></a>2. useEffect 的 dependencies 為物件或陣列</h2><p>在 JavaScript 用相同的物件或陣列做比對時，你會發現</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#125; &#x3D;&#x3D;&#x3D; &#123;&#125; &#x2F;&#x2F; false</span><br><span class="line">[] &#x3D;&#x3D;&#x3D; [] &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>
<p>因為 <code>object</code> 跟 <code>Array</code> 非基本型態，比較都是 by reference，雖然內容一樣，但實際上是不一樣的 object、Array，所以如果我們把 object、Array 當作 <code>dependencies</code>，還是會每次都再重新渲染一次，這樣是沒有意義的<br><br><br><br><br><br></p>
<h3 id="［範例］"><a href="#［範例］" class="headerlink" title="［範例］"></a>［範例］</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> style = &#123;</span><br><span class="line">    backgroundColor: state ? <span class="string">&quot;black&quot;</span> : <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">    width: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">    height: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">		margin: <span class="string">&quot;auto&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Change Color&quot;</span>);</span><br><span class="line">  &#125;, [style]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div style=&#123;style&#125;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input</span><br><span class="line">        value=&#123;inputValue&#125;</span><br><span class="line">        onChange=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          setInputValue(e.target.value);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        placeholder=<span class="string">&quot;輸入文字&quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          setState(<span class="function">(<span class="params">state</span>) =&gt;</span> !state);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        Change Color</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>簡單說明一下情境：</p>
<ul>
<li>這邊有一個輸入文字框</li>
<li>跟換顏色的按鈕</li>
<li>預期顏色變換後才執行 side effect (style 變更將印出 “Change Color”)<br>

</li>
</ul>
<iframe src="https://codesandbox.io/embed/render-usememo-reference-vp2rvq?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="render-useMemo-reference"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>
目前只有一開始執行的 useEffect，看起來沒什麼大問題

<p>試著輸入文字將會發現</p>
<p><img src="https://imgur.com/WMabrmb.jpg" alt="usememo"><br><br><br><br><br><br></p>
<p>還是執行了 side effect！！<br><br><br><br><br><br></p>
<p>這就是因為物件或陣列即使做了比對，但因為是 <code>by reference</code>，所以還是會被認定為不一樣，進而呼叫 side effect</p>
<p>我們只要用 <code>useMemo</code> 包起來，就可以解決這個問題</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> style = useMemo(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    backgroundColor: state ? <span class="string">&quot;black&quot;</span> : <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">    width: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">    height: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">    margin: <span class="string">&quot;auto&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [state]);</span><br></pre></td></tr></table></figure>

<p>現在即使輸入了文字，也不會再執行 side effect 囉！</p>
<iframe src="https://codesandbox.io/embed/render-usememo-reference2-tpw1j5?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="render-useMemo-reference2"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<p>其實遇到這種情況，eslint 也會跳出建議訊息，防止開發者沒注意到這個問題</p>
<blockquote>
<p>The ‘style’ object makes the dependencies of useEffect Hook (at line 17) change on every render. To fix this, wrap the initialization of ‘style’ in its own useMemo() Hook. (react-hooks/exhaustive-deps)eslint</p>
</blockquote>
<br>
<br>
<br>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p><code>useMemo</code> 替我們節省了很多效能，但也不要濫用 <code>useMemo</code> ，過多的記憶體，也是會造成效能上的問題，所以我們要用在適當的情境使用，如會頻繁的渲染就較不適合，最好是用在執行速度很慢、變動性不大的函式，以減少重新渲染的目的。<br><br><br><br><br><br></p>
<h2 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h2><p><a href="https://www.joshwcomeau.com/react/usememo-and-usecallback/">Understanding useMemo and useCallback</a><br><a href="https://blog.webdevsimplified.com/2020-05/memoization-in-react/">How To Use Memoization To Drastically Increase React Performance</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>useMemo</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 20】useRef 儲存資料與指定 DOM 元素</title>
    <url>/2022/11/16/react-useRef/</url>
    <content><![CDATA[<p><img src="https://imgur.com/g8E0aCz.jpg" alt="cover"></p>
<a id="more"></a>
<h1 id="認識-useRef"><a href="#認識-useRef" class="headerlink" title="認識 useRef"></a>認識 useRef</h1><p>在寫原生 JavaScript 時，我們常常會用 <code>document.querySelector</code> 來獲取 DOM 元素，在 React 你可以使用 useRef 直接在元素上做綁定，已達到指定 DOM 的行為動作。除了訪問 DOM，useRef 還可以用來儲存資料、抓取以前的值。</p>
<p>useRef 會自己建立一個 mutable <code>ref object</code>，裡面會有一個 <code>current</code> 屬性設為相應的 DOM 節點或資料，不會隨著元件 re-render 被重新創造，所以 useRef 每次都會返回同一個 ref object</p>
<blockquote>
<p><code>Mutable object</code>：以傳址（by reference）方式被儲存，物件被創造後，參考固定，但參考的記憶體內容可以改變，如 JavaScript 的參考型別 Object、Array、Function 等</p>
</blockquote>
<blockquote>
<p><code>Immutable object</code>：以傳值（by value）方式被儲存，物件被創造後，其 value 無法被改變，如 JavaScript 的原始型別 number、string、null、undefined、boolean 等</p>
</blockquote>
<hr>
<h1 id="useRef-使用方法"><a href="#useRef-使用方法" class="headerlink" title="useRef 使用方法"></a>useRef 使用方法</h1><ul>
<li>從 react 中載入 useRef</li>
<li>設定 useRef 初始值</li>
<li>抓取 useRef 的值<br>
<br>
<br>

</li>
</ul>
<h2 id="1-從-react-中載入-useRef"><a href="#1-從-react-中載入-useRef" class="headerlink" title="1. 從 react 中載入 useRef"></a>1. 從 react 中載入 useRef</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br></pre></td></tr></table></figure>
<br>
<br>
<br>

<h2 id="2-設定-useRef-初始值"><a href="#2-設定-useRef-初始值" class="headerlink" title="2. 設定 useRef 初始值"></a>2. 設定 useRef 初始值</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> refContainer = useRef(initialValue);</span><br></pre></td></tr></table></figure>
<p>refContainer 為自定義變數</p>
<p>initialValue 為初始值，可以為任何值<br><br><br><br><br><br></p>
<h2 id="3-抓取-useRef-的值"><a href="#3-抓取-useRef-的值" class="headerlink" title="3. 抓取 useRef 的值"></a>3. 抓取 useRef 的值</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">refContainer.current</span><br></pre></td></tr></table></figure>
<p>從 <code>.current</code> 取得 ref object 的值，實際操作會在使用情境做說明<br><br><br><br><br><br></p>
<h1 id="useRef-使用情境"><a href="#useRef-使用情境" class="headerlink" title="useRef 使用情境"></a>useRef 使用情境</h1><ul>
<li>指定 DOM 元素做操作</li>
<li>計算渲染次數</li>
<li>儲存不會導致畫面渲染的資料 (如抓取以前的值)<br>
<br>
<br>

</li>
</ul>
<h2 id="1-指定-DOM-元素做操作"><a href="#1-指定-DOM-元素做操作" class="headerlink" title="1. 指定 DOM 元素做操作"></a>1. 指定 DOM 元素做操作</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> myInput = useRef();</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    myInput.current.focus();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label&gt;Name：&lt;/label&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;myInput&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>情境說明：</p>
<ul>
<li>指定 input 在一開始渲染後游標會自動跑到輸入欄位</li>
</ul>
<p><img src="https://imgur.com/4NmNkWx.jpg" alt="useRef"></p>
<p>操作說明：</p>
<ul>
<li>在指定的 input 加上 ref 屬性，自訂變數名稱</li>
<li>創建 useRef 指向自訂變數名稱</li>
<li>從 .current 獲取 dom元素 <code>&lt;input type=&quot;text&quot; /&gt;</code>，並在 useEffect 操作 .focus 動作<blockquote>
<p>更新 useRef 是 side Effect 的行為，因此要在 useEffect 或 event handler 裡執行</p>
</blockquote>
</li>
</ul>
<iframe src="https://codesandbox.io/embed/react-useref-dom-l6l3gj?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useRef-dom"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<h2 id="2-計算渲染次數"><a href="#2-計算渲染次數" class="headerlink" title="2. 計算渲染次數"></a>2. 計算渲染次數</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> renderCount = useRef(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    renderCount.current += <span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">        value=&#123;name&#125;</span><br><span class="line">        onChange=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">          setName(e.target.value);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;p&gt;I rendered &#123;renderCount.current&#125; times！&lt;/p&gt;;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>情境說明：</p>
<ul>
<li>在輸入框輸入文字，useRef 會計算每次渲染的次數</li>
</ul>
<p><img src="https://imgur.com/Selcxx8.jpg" alt="useRef"></p>
<p>操作說明：</p>
<ul>
<li>設定一個綁定 useState 的輸入框</li>
<li>創建 useRef，初始值為 1</li>
<li>useEffect 沒有 dependencies，所以每次 re-render 時都會執行 <code>renderCount.current += 1</code></li>
</ul>
<iframe src="https://codesandbox.io/embed/react-useref-rendertimes-gb5pbz?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useRef-renderTimes"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<h2 id="3-儲存不會導致畫面渲染的資料"><a href="#3-儲存不會導致畫面渲染的資料" class="headerlink" title="3. 儲存不會導致畫面渲染的資料"></a>3. 儲存不會導致畫面渲染的資料</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> previousName = useRef(name);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    previousName.current = name;</span><br><span class="line">    <span class="built_in">console</span>.log(previousName.current);</span><br><span class="line">  &#125;, [name]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">        value=&#123;name&#125;</span><br><span class="line">        onChange=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> setName(e.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        My name is &lt;span&gt;&#123;name&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        My previous name is</span><br><span class="line">        &lt;span&gt;&#123;previousName.current&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>情境說明：</p>
<ul>
<li>輸入框輸入文字後，會顯示出輸入後、上一次輸入的文字</li>
</ul>
<p><img src="https://imgur.com/PgvQPuY.jpg" alt="useRef"></p>
<p>操作說明：</p>
<ul>
<li>設定一個綁定 useState 的輸入框</li>
<li>創建 useRef，初始值為 name，也就是空字串</li>
<li>所以每次更新 name 時都會執行 <code>previousName.current = name</code></li>
</ul>
<p>ref 與 state 的差異就是 <strong>ref 更新不會觸發 re-render，state 才會</strong>，所以即使 ref 已更新成輸入後的 name，畫面也不會隨著渲染，會在下一次 useState re-render 後出現</p>
<iframe src="https://codesandbox.io/embed/react-useref-previous-1q6bjb?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="react-useRef-previous"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>
<br>
<br>
<br>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>之前比較常看到 useRef 用來操作 dom，原來也可以定義不會導致畫面重新渲染的資料，理解了 ref 跟 state 的使用上是差在 ref 不會觸發 re-render，今天到這邊結束，明天再繼續吧！！<br><br><br><br><br><br></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.youtube.com/watch?v=t2ypzz6gJm0">Learn useRef in 11 Minutes</a><br><a href="https://www.youtube.com/watch?v=q0C5g4WIrKU">一個範例讓你搞懂useState, useRef, useEffect | 5分鐘快速教學</a></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>useRef</tag>
      </tags>
  </entry>
  <entry>
    <title>透過「小行動」打開大腦的行動開關《一本書終結你的拖延症》</title>
    <url>/2024/02/15/read-procrastination/</url>
    <content><![CDATA[<p><img src="https://imgur.com/inxcSjb.jpg" alt="procrastination"></p>
<p>今天讀了最近很紅的暢銷書，光看書名就直接打中我的點！<br>很多人都有拖延症卻不知道怎麼改善，總會有一些藉口，<br/><br>「今天好累，明天再開始好了」<br/><br>「等有靈感再開始好了」<br/><br>「少做一次應該還好吧」<br/><br>「等我瘦了再去健身房運動」<br/><br>但其實這些藉口是有辦法避免的，以下是我閱讀這本書後，整理出的一些重點，好讓拖延症又復發時提醒自己💪</p>
<a id="more"></a>
<br/>
<br/>

<p>2024-01-01~2024-02-29 在墊腳石還可以享有一般書79折優惠唷!<br><a href='https://aftck.com/track/clicks/8118/ce2bc2bf900125deff9cbd2e8d2b891473624acd70ebe3e25826bf0d660557?subid_1=&subid_2=&subid_3=&subid_4=&subid_5=&t=https%3A%2F%2Fwww.tcsb.com.tw%2Fv2%2Factivity%2F30913'><img src='https://aftck.com/track/imp/img/190516/ce2bc2bf900125deff9cbd2e8d2b891473624acd70ebe3e25826bf0d660557?subid_1=&subid_2=&subid_3=&subid_4=&subid_5=' border='0' /></a><br><br/><br><br/></p>
<h1 id="為何會有拖延症"><a href="#為何會有拖延症" class="headerlink" title="#為何會有拖延症"></a>#為何會有拖延症</h1><p>拖延症不是因為「懶」，並不是我們的意志力不夠，而是因為大腦的防衛本能會抗拒改變，只要刺激大腦的「伏隔核」，就可以刺激提高熱情、讓自己感到愉悅的「多巴胺」分泌，而多巴胺就是行動力的源頭。</p>
<p>要刺激多巴胺有很多方式，在我們工作毫無思緒時可以起來身體活動，伸個懶腰，甚至是一個微笑都可以產生多巴胺。<br><br/><br><br/></p>
<h1 id="如何成為行動派"><a href="#如何成為行動派" class="headerlink" title="#如何成為行動派"></a>#如何成為行動派</h1><p>為了讓自己行動起來，我們可以先從簡單的事情做起。</p>
<ul>
<li><p><strong>初步決定、初步行動</strong><br>依循先重「量」再重「質」的順序。重點在於最先要增加「行動量」，接著再提升「行動品質」。</p>
<br/>
</li>
<li><p><strong>10 秒行動</strong><br>先試著從 10 秒就能做到的事情開始動起，沒有人會在這 10 秒行動階段失敗，正因為「不會失敗」，就容易接續下一個行動。</p>
<br/>
</li>
<li><p><strong>把時間以 15 分鐘為單位切分</strong><br>任何工作只要設定時限，就能增加專注力，在最短的時間內完成。<br>一天要確保兩次「認真的三十分鐘」</p>
<br/>
</li>
<li><p><strong>想要培養新習慣時，就把它和既有習慣綁在一起</strong><br>如已經習慣每天泡一杯咖啡，可設立「泡完咖啡→寫企劃」的目標。</p>
<br/>
</li>
<li><p><strong>麻煩的事情在前一天就先做一點</strong><br>在工作結束前，先看一下隔天的工作，讓心裡有個底，大腦會因為已知要做的事情，隔天就比較不會覺得麻煩並抗拒</p>
<br/>
<br/>

</li>
</ul>
<h1 id="如何完成自己設立的任務"><a href="#如何完成自己設立的任務" class="headerlink" title="#如何完成自己設立的任務"></a>#如何完成自己設立的任務</h1><p>『 把和自己的約定當作 VIP 』</p>
<p>我們與客戶交流時，一定會有交付期限，其實與自己也要設定「期限」</p>
<p>我們必須重視自己的約定，把自己當作 VIP 客戶，將規劃記錄在行事曆上，將會更重視自己的目標。</p>
<p>當怎樣都無法行動時，就將最糟的狀況具體化，列出</p>
<ul>
<li>不做會怎麼樣</li>
<li>做了會怎麼樣<br/>
<br/>

</li>
</ul>
<h1 id="掌握自己花最多時間在什麼事情"><a href="#掌握自己花最多時間在什麼事情" class="headerlink" title="#掌握自己花最多時間在什麼事情"></a>#掌握自己花最多時間在什麼事情</h1><p>『 你不是沒有時間，是浪費了太多時間 』</p>
<p>每個人的一天都是 24 小時，換算為秒數就是 86,400 秒，如果把它比喻為金錢的話，我們每個人一天都有 86,400 元可以使用，且如果沒使用到，這些錢之後也不能用了，我們需要記下這些錢應該分別使用在哪邊，而時間就跟資金的控管一樣，也是需要記帳。</p>
<p>時間的分配可以分為三項：</p>
<ul>
<li><p><strong>投資</strong><br>促使自己進步所花費的時間，如學習領域知識、閱讀、健身</p>
</li>
<li><p><strong>消費</strong><br>維持生活的時間，如睡眠、吃飯、洗澡</p>
</li>
<li><p><strong>浪費</strong><br>漫無目標的花費時間，如滑手機、發呆、裝忙、無意義加班</p>
</li>
</ul>
<p>我們不需要把浪費的時間都歸 0，在越忙、越疲累時，我們越需要撥點時間來浪費，但還是要努力提升投資的時間，因為「如果沒有<strong>投資</strong>，我們只能維持現狀」<br><br/><br><br/></p>
<h1 id="目標執行規劃"><a href="#目標執行規劃" class="headerlink" title="#目標執行規劃"></a>#目標執行規劃</h1><h2 id="1-訂定目標"><a href="#1-訂定目標" class="headerlink" title="1. 訂定目標"></a>1. 訂定目標</h2><p>設定一個異想天開的目標<br><br/></p>
<h2 id="2-設定目的"><a href="#2-設定目的" class="headerlink" title="2. 設定目的"></a>2. 設定目的</h2><p>理解自己的價值觀後，就能看見真正的目的，而目的有分為三種</p>
<ul>
<li>與他人的連結：喜歡回饋給需要的人</li>
<li>成就：想達成自己規劃的成就</li>
<li>追求技術：希望在技術領域深入鑽研<br/>

</li>
</ul>
<h2 id="3-明確訂出實際執行的內容"><a href="#3-明確訂出實際執行的內容" class="headerlink" title="3. 明確訂出實際執行的內容"></a>3. 明確訂出實際執行的內容</h2><p>明確訂出實際執行的內容，設置三個里程碑，也可以設置五個，但最少要有三個，並再從里程碑中細分出要做的任務。<br>例如我的目標是轉職為前端工程師，並設立了四個里程碑</p>
<ul>
<li>三個月學會 HTML、CSS</li>
<li>在半年內學會 JavaScript</li>
<li>一年內學會 Vue 框架</li>
<li>準備履歷、面試</li>
</ul>
<p>接著再列出要完成這些里程碑，需要做哪些事情，把任務細分，讓大腦不覺得麻煩，也可以一步步朝著我們的目標前進<br><br/><br><br/></p>
<h1 id="定期回顧目標"><a href="#定期回顧目標" class="headerlink" title="#定期回顧目標"></a>#定期回顧目標</h1><p><strong>一週</strong>定期回顧一次目標，除了察看進度外，也可以適時的修正路線<br>回顧內容包含以下四點</p>
<ol>
<li>實際執行內容</li>
<li>辦到的事情、沒辦到的事情</li>
<li>煩惱、課題</li>
<li>修正路線的行動計劃<br/>
<br/>

</li>
</ol>
<p>你也是個有拖延症的人嗎？推薦《一本書終結你的拖延症》來終結你的拖延症哦！<br>2024-01-01~2024-02-29 在墊腳石還可以享有一般書79折優惠唷！<br><a href='https://aftck.com/track/clicks/8118/ce2bc2bf900125deff9cbd2e8d2b891473624acd70ebe3e25826bf0d660557?subid_1=&subid_2=&subid_3=&subid_4=&subid_5=&t=https%3A%2F%2Fwww.tcsb.com.tw%2Fv2%2Factivity%2F30913'><img src='https://aftck.com/track/imp/img/190516/ce2bc2bf900125deff9cbd2e8d2b891473624acd70ebe3e25826bf0d660557?subid_1=&subid_2=&subid_3=&subid_4=&subid_5=' border='0' /></a><br><br/><br><br/></p>
]]></content>
      <categories>
        <category>閱讀札記</category>
      </categories>
      <tags>
        <tag>一本書終結你的拖延症</tag>
        <tag>拖延症</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 10】useState 狀態更新，我要加 1 再加 1！</title>
    <url>/2022/10/27/react-useState/</url>
    <content><![CDATA[<p><img src="https://imgur.com/fQ8Bovi.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境任務］</strong></p>
<p>叮咚~!! 有客人進門了！</p>
<p>解師傅：歡迎光臨～這是我們的菜單，要點餐再跟我們說一下～</p>
<p>客人：老闆，你們這菜單怎麼連個數量都沒有啊！！叫我怎麼點呢！</p>
<p>解師傅：阿～～不好意思，我馬上調整！！</p>
<p>上回我們把菜單都給列出來了，但客人想要不只一盤啊！來做個數量欄位吧！</p>
<hr>
<h1 id="認識-useState"><a href="#認識-useState" class="headerlink" title="認識 useState"></a>認識 useState</h1><p>State 代表狀態，useState 是用於管理狀態的 Hook，你可以宣告 state 初始值，並對它進行變更修改，使用 state 進行操作達成想要呈現的畫面<br><br/><br><br/></p>
<h1 id="useState-使用方法"><a href="#useState-使用方法" class="headerlink" title="useState 使用方法"></a>useState 使用方法</h1><ul>
<li>從 react 中載入 <code>useState</code></li>
<li>宣告狀態變數、設定狀態的函式</li>
<li>變更 <code>state</code> 狀態</li>
<li>如狀態為集合型態，需合併沒更新的 <code>state</code><br/>
<br/>
<br/>

</li>
</ul>
<h2 id="1-從-react-中載入-useState"><a href="#1-從-react-中載入-useState" class="headerlink" title="1. 從 react 中載入 useState"></a>1. 從 react 中載入 useState</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>引入 <code>useState</code> 讓整個組件可以使用 useState hook<br><br/><br><br/></p>
<h2 id="2-宣告狀態變數、設定狀態的函式"><a href="#2-宣告狀態變數、設定狀態的函式" class="headerlink" title="2. 宣告狀態變數、設定狀態的函式"></a>2. 宣告狀態變數、設定狀態的函式</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = useState(initValue);</span><br></pre></td></tr></table></figure>
<p><code>state</code>：狀態變數</p>
<p><code>setState</code>：改變 state 值的函式，可以為任何命名，不過一般會以「<code>set + 狀態變數</code>」的規則命名</p>
<p><code>initValue</code>：狀態初始值，可以是任何型態</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [couter, setCouter] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [userName, setUserName] = useState(<span class="string">&#x27;Lala&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [animal, setAnimal] = useState([</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;cat&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;dog&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;mouse&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span>&#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>透過解構將 <code>useState</code> 陣列中的值個別取出來，<code>useState</code> 因執行順序，通常會放在函式的最上面，一個組件可以有多個 <code>useState</code><br><br/><br><br/></p>
<h2 id="3-變更-state-狀態"><a href="#3-變更-state-狀態" class="headerlink" title="3. 變更 state 狀態"></a>3. 變更 state 狀態</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">setState(<span class="number">2</span>);</span><br><span class="line">setState(<span class="literal">true</span>);</span><br><span class="line">setState(<span class="string">&quot;Lala&quot;</span>);</span><br><span class="line">setState(<span class="function"><span class="params">prevValue</span> =&gt;</span> prevValue + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p><code>setState</code> 裡面會傳入「變更後的值」，可以是一個純值，也可以是一個函式的回傳</p>
<p>為什麼要用函式回傳？</p>
<p>如果我們需要前一次 state 的值，那就需要用函式的方式回傳<br>由於 <strong><code>setState</code> 是「非同步操作」</strong>，我們不能期待連續的 setState 內容會立刻更新，因此將原本傳入的狀態初始值改成傳入一個函式，這個函式參數吃的是原來的 state，以上面的範例來看，state 會等於<code>「原來的 state」 + 1</code><br><br/><br><br/></p>
<h2 id="4-如狀態為集合型態，需合併沒更新的-state"><a href="#4-如狀態為集合型態，需合併沒更新的-state" class="headerlink" title="4. 如狀態為集合型態，需合併沒更新的 state"></a>4. 如狀態為集合型態，需合併沒更新的 state</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; useState &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">const App &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [&#123;count1, count2&#125;, setCount] &#x3D; useState(&#123;count1: 0, count2: 10&#125;);</span><br><span class="line">  const addCount1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    setCount(state &#x3D;&gt; (&#123;...state, count1: state.count1 + 1&#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123; count1 &#125;&lt;&#x2F;h1&gt;</span><br><span class="line">			&lt;h1&gt;&#123; count2&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;addCount1&#125;&gt;add&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>
<p>特別注意的是，如果狀態為一個集合 (object、Array)</p>
<p><strong><code>setState</code> 需要把原本沒使用到的 state 也合併，否則會出錯</strong><br><br/><br><br/></p>
<p><strong>［任務解題］</strong></p>
<p>幫菜單加上數量欄位，我要加 1 再加 1</p>
<p>試著做一個計數器，在 components 資料夾新增一個 <code>Counter.js</code> 組件</p>
<p>components/Counter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="function"><span class="params">state</span> =&gt;</span> state + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reduceCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="function"><span class="params">state</span> =&gt;</span> state - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">      &lt;button type=<span class="string">&#x27;button&#x27;</span> onClick=&#123;addCount&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;button type=<span class="string">&#x27;button&#x27;</span> onClick=&#123;reduceCount&#125;&gt;-&lt;/button&gt;</span><br><span class="line">	  &lt;span&gt;&#123;count&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure>
<p>組件裡面有 <code>+</code> 跟 <code>-</code> 的按鈕，用點擊來控制數量<br><br/><br><br/></p>
<p>components/List.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">&quot;./Counter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> List = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, price, index &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;span&gt;&#123;index + <span class="number">1</span>&#125;.&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;name&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;$&#123;price&#125;&lt;/span&gt;</span><br><span class="line">      &lt;Counter /&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<p>因為每個項目都需要數量，在 List 的地方引入 Counter<br><br/><br><br/></p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./components/List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> menu = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;蘆筍沙拉&quot;</span>, <span class="attr">price</span>: <span class="number">100</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;辣炒空心菜&quot;</span>, <span class="attr">price</span>: <span class="number">120</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;雞蛋豆腐&quot;</span>, <span class="attr">price</span>: <span class="number">150</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;鳳梨蝦球&quot;</span>, <span class="attr">price</span>: <span class="number">300</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;糖醋雞丁&quot;</span>, <span class="attr">price</span>: <span class="number">200</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;砂鍋魚頭&quot;</span>, <span class="attr">price</span>: <span class="number">500</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;竹筍炒肉絲&quot;</span>, <span class="attr">price</span>: <span class="number">150</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;梨山高麗菜&quot;</span>, <span class="attr">price</span>: <span class="number">120</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;五更腸旺&quot;</span>, <span class="attr">price</span>: <span class="number">250</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;客家小炒&quot;</span>, <span class="attr">price</span>: <span class="number">250</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;三杯杏鮑菇&quot;</span>, <span class="attr">price</span>: <span class="number">180</span> &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;h1&gt;React 熱炒店&lt;/h1&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;menu.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">          &lt;List</span><br><span class="line">            key=&#123;item.name&#125;</span><br><span class="line">            name=&#123;item.name&#125;</span><br><span class="line">            price=&#123;item.price&#125;</span><br><span class="line">            index=&#123;index&#125;</span><br><span class="line">          &gt;&lt;/List&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>App 原先就有引入 List，維持不變<br><br/><br><br/></p>
<iframe src="https://codesandbox.io/embed/render-list-usestate-wx8evg?fontsize=14&hidenavigation=1&theme=light"
  style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
  title="render-List-useState"
  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
></iframe>

<br/>
數量要多少都可以，這下子可以順利的點餐了！祝福 React 熱炒店生意欣隆!
<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>useState 可以定義狀態、更新狀態，且可以為任何型態，管理起來方便很多，明天我們再繼續吧！</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>useState</tag>
      </tags>
  </entry>
  <entry>
    <title>設定 OG 分享網址連結，讓你的網站更吸引人</title>
    <url>/2022/03/21/seo-og-image/</url>
    <content><![CDATA[<p><img src="https://imgur.com/SlR0x2P.jpg" alt="og"></p>
<p>你有沒有遇過，當你分享網站連結到 Facebook 時，出現了詭異的縮圖，甚至連縮圖、介紹都沒有，不寫個訊息的話，完全不會讓人想點進去，有人可能還會以為你被盜了😅</p>
<a id="more"></a>

<p><img src="https://imgur.com/bBfZShO.png" alt="無設定og"></p>
<p>這不是被盜！是你應該設定 OG，給用戶理解和信任的網站體驗。</p>
<br/>

<h1 id="OG-是什麼"><a href="#OG-是什麼" class="headerlink" title="OG 是什麼"></a>OG 是什麼</h1><p>OG 是由 Facebook 提出的設定，全名為 Open Graph Protocol，官方中文翻譯為「<a href="https://developers.facebook.com/docs/sharing/webmasters?locale=zh_TW">開放社交關係圖</a>」。<br>OG 可以輕鬆的標記網頁的結構化訊息、包含標題、描述、圖片等，以呈現顯示分享連結的預覽內容，現在主流的社群網站平台都支援 OG，例如：Facebook、Line、Twitter 等。<br>OG 可以呈現網站明確的模樣，增加用戶的信任與好的網站體驗，相對的也會有比較好的點閱率。</p>
<br/>

<h1 id="設定-OG"><a href="#設定-OG" class="headerlink" title="設定 OG"></a>設定 OG</h1><p>要設定 OG 其實很簡單，首先了解每個 og 屬性的意義</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:url&quot;</span> <span class="attr">content</span>=<span class="string">&quot;你的網址&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:locale&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網站語系，ex:zh_TW，預設為 en_US&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;類型，ex：website&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網站的標題&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網站內容描述&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;縮圖圖片連結&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;圖像的 MIME 類型，可為 image/jpeg、image/gif 或 image/png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:width&quot;</span> <span class="attr">content</span>=<span class="string">&quot;縮圖寬度&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:height&quot;</span> <span class="attr">content</span>=<span class="string">&quot;縮圖高度&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中縮圖的寬、高度依<a href="https://developers.facebook.com/docs/games/services/sharing">官方</a>建議的比例，對高解析度裝置使用至少 1080 像素的寬度以獲得最佳顯示，至少使用寬度為 600 像素的圖像以顯示圖像連結廣告。<br>🔸 正方形：比例 1:1，如 600 x 600 像素<br>🔸 長方形：比例 1.91:1，如 600 x 314 像素</p>
<br/>

<p>接著設定到自己的網站</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:url&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://happy9990929.github.io/gtplay&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:locale&quot;</span> <span class="attr">content</span>=<span class="string">&quot;zh_TW&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;website&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;GTPLAY吉他館&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;販賣各式弦樂器，吉他、電吉他、烏克莉莉等，歡迎洽詢!&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://happy9990929.github.io/gtplay/logo.png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;image/png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:width&quot;</span> <span class="attr">content</span>=<span class="string">&quot;1080&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:height&quot;</span> <span class="attr">content</span>=<span class="string">&quot;565&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="檢查-OG"><a href="#檢查-OG" class="headerlink" title="檢查 OG"></a>檢查 OG</h1><p>可以透過 <a href="https://developers.facebook.com/tools/debug/">Facebook分享偵錯工具</a> 來檢查你的 OG，輸入網址，就可以預覽你的成果囉！</p>
<br/>
設定完 og 後，到 Facebook 建立貼文，就可以看到清楚的網站資訊啦！<br/>
是不是看起來漂亮多了呢🤩快把你的網站也設定一下吧！
<br/>
<br/>

<p><img src="https://imgur.com/L4oYvxB.jpg" alt="OG完成"></p>
<hr>
<h3 id="Facebook-官方文件"><a href="#Facebook-官方文件" class="headerlink" title="Facebook 官方文件:"></a>Facebook 官方文件:</h3><p><a href="https://developers.facebook.com/docs/sharing/webmasters?locale=zh_TW">Facebook 開放社交關係圖</a><br><a href="https://developers.facebook.com/docs/sharing/best-practices#images">Facebook 分享最佳作法</a></p>
<hr>
]]></content>
      <categories>
        <category>SEO</category>
      </categories>
      <tags>
        <tag>og image</tag>
        <tag>分享連結圖片</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 dart-sass 取代 node-sass</title>
    <url>/2022/03/18/sass-dart-sass/</url>
    <content><![CDATA[<p><img src="https://imgur.com/Gh27Ew9.jpg" alt="sass"></p>
<p>今天在更新網站時，github actions 在 npm install 時發生了錯誤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm ERR! code 1</span><br><span class="line">npm ERR! path &#x2F;home&#x2F;runner&#x2F;work&#x2F;portfolio&#x2F;portfolio&#x2F;node_modules&#x2F;node-sass</span><br><span class="line">&#x2F;&#x2F; ...中間太多省略</span><br><span class="line">Error: Process completed with exit code 1.</span><br></pre></td></tr></table></figure>
<p>根據資訊推測是 node-sass 的問題，爬了一下文發現，</p>
<a id="more"></a>
<p><a href="https://sass-lang.com/blog/libsass-is-deprecated">Sass 官方已在 2020-10-26 正式宣布棄用 LibSass，並推薦使用 Dart Sass</a></p>
<p>LibSass 顯然沒有足夠的工程帶寬來跟上 Sass 語言的最新發展，且 node-sass 底層依賴 LibSass，常常導致很多使用者安裝的特別的困難，sass 官方已經將 dart-sass 作為未來主要的的開發方向，效能更好。</p>
<p>如果你是 Node Sass 的用戶，遷移到 Dart Sass 很簡單：只需在你的 package.json 文件中將 node-sass 替換為 sass. 這兩個包都公開了相同的 JavaScript API。</p>
<br>

<h1 id="安裝-Dart-Sass-步驟"><a href="#安裝-Dart-Sass-步驟" class="headerlink" title="安裝 Dart Sass 步驟"></a>安裝 Dart Sass 步驟</h1><p>1.如果安裝了 node-sass 首先需要解除安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm remove node-sass</span><br></pre></td></tr></table></figure>
<p>2.安装 dart-sass</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install sass sass-loader -D</span><br></pre></td></tr></table></figure>
<p>3、如果專案之前用到/deep/需要替換為<code>::v-deep</code>，否則會報錯</p>
<h1 id="安裝錯誤"><a href="#安裝錯誤" class="headerlink" title="安裝錯誤"></a>安裝錯誤</h1><p>在安裝的過程中，如果遇到下面錯誤😨</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm ERR! code EBADPLATFORM</span><br><span class="line">npm ERR! notsup Unsupported platform for fsevents@2.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line">npm ERR! notsup Valid OS:    darwin</span><br><span class="line">npm ERR! notsup Valid Arch:  undefined</span><br><span class="line">npm ERR! notsup Actual OS:   win32</span><br><span class="line">npm ERR! notsup Actual Arch: x64</span><br></pre></td></tr></table></figure>
<p>不要緊張! 把 <code>package-lock.json</code> 移除掉，再 npm install 重新生成，<br>再安裝一次 dart-sass 就成功啦!!</p>
<hr>
<p>重新裝了 dart-sass 後，github actions 就跑成功啦！真是可喜可賀😀🌟🌟🌟</p>
]]></content>
      <categories>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
        <tag>node-sass</tag>
        <tag>dart-sass</tag>
        <tag>Process completed with exit code 1</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Vue transition 製作動畫過渡組件</title>
    <url>/2021/03/14/transitions/</url>
    <content><![CDATA[<h1 id="Enter-amp-Leave-Transitions"><a href="#Enter-amp-Leave-Transitions" class="headerlink" title="Enter &amp; Leave Transitions"></a>Enter &amp; Leave Transitions</h1><p>Vue.js 將過場漸變的效果包裝成一個獨立的 transition 元件， 再由開發者自行定義元素的進場 (Enter) 、退場 (Leave) 以及動畫過程漸變 (Transitions) 的樣式。動畫執行完後才會把 DOM 元素拔掉</p>
<a id="more"></a>

<p><img src="https://i.imgur.com/1AHgsrN.png" alt="transition圖片解說"><br>元素進場 (顯示) ：<br>v-enter-from: 進入的開始狀態。在插入元素之前添加，在插入元素之後刪除一幀。<br>v-enter-active: 進入的活動狀態。在整個進入階段應用。在插入元素之前添加，在過渡/動畫結束時將其刪除。此類可用於定義進入過渡的持續時間，延遲和緩和曲線。<br>v-enter-to: 進入的結束狀態。元素插入後添加了一幀（同時 v-enter-from 刪除），過渡/動畫結束後刪除。</p>
<p>元素退場 (消失) ：<br>v-leave-from: 離開的開始狀態。觸發離開過渡時立即添加，在一幀後移除。<br>v-leave-active: 離開的活動狀態。在整個離開階段應用。觸發離開過渡時立即添加，當過渡/動畫結束時將其移除。此類可用於定義離開過渡的持續時間，延遲和緩和曲線。<br>v-leave-to: 離開的結束狀態。觸發離開過渡（同時 v-leave-from 刪除）後添加一幀，在過渡/動畫結束時刪除。</p>
<h2 id="範例一-淡入淡出"><a href="#範例一-淡入淡出" class="headerlink" title="範例一: 淡入淡出"></a>範例一: 淡入淡出</h2><p>transition 定義 name=”fade”，style 將會加入 fade 樣式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isAmin = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAmin,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isAmin = !isAmin&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isAmin&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-from</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="範例二-使用-keyframes-做-bounce-動畫"><a href="#範例二-使用-keyframes-做-bounce-動畫" class="headerlink" title="範例二: 使用 keyframes 做 bounce 動畫"></a>範例二: 使用 keyframes 做 bounce 動畫</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isAmin = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAmin,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isAmin = !isAmin&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isAmin&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bounce-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: bounce-in <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bounce-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: bounce-in <span class="number">0.5s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> bounce-in &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.25</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="有-v-for-時需用-transition-group"><a href="#有-v-for-時需用-transition-group" class="headerlink" title="有 v-for 時需用 transition-group"></a>有 v-for 時需用 transition-group</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>transition</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE 的 SSR 原理</title>
    <url>/2021/08/29/vue-SSR/</url>
    <content><![CDATA[<p><img src="https://imgur.com/mRrJH3R.jpg" alt="Imgur"><br>SPA 跟 SSR 各有好壞，因應專案需求來決定我們需要的是 SPA 還是 SSR 的網站</p>
<a id="more"></a>

<h1 id="什麼是-CSR"><a href="#什麼是-CSR" class="headerlink" title="什麼是 CSR?"></a>什麼是 CSR?</h1><p>CSR (Client-Side Rendering) 客戶端渲染，通常是講 SPA (Single Page Application)居多，SPA 指的是單頁式應用，內容交由 client 的瀏覽器去處理，HTML 透過 JavaScript 渲染上去。</p>
<p>優點: 減少 server 端的壓力、頁面切換速度快<br>缺點: 首屏顯示慢、SEO 較差<br>適合用在較不需 SEO 或需高頻操作的網站，如: 後台系統、活動頁面等</p>
<h1 id="什麼是-SSR"><a href="#什麼是-SSR" class="headerlink" title="什麼是 SSR?"></a>什麼是 SSR?</h1><p>SSR (Sever-Side Rendering) 伺服器端渲染，由 Server 端的 CPU 收到請求後，解析完整的 HTML 返回到使用者接收端，然後呈現網頁。</p>
<p>優點: 首屏顯示快，不用下載大量的 javascript、SEO 效果好<br>缺點: server 端承受比較大的壓力、點擊別頁時，整個畫面需重新繪製，如網路不好，使用者體驗會較差<br>適合用在很需要 SEO 的網站，如: 平台網站、新聞媒體網站</p>
<h1 id="什麼是-NUXT"><a href="#什麼是-NUXT" class="headerlink" title="什麼是 NUXT"></a>什麼是 NUXT</h1><p>提供 SSR 的功能、更方便去做 Vue.js 的開發的 framework</p>
<h1 id="Nuxt-SSR-原理解析"><a href="#Nuxt-SSR-原理解析" class="headerlink" title="Nuxt SSR 原理解析"></a>Nuxt SSR 原理解析</h1><p>Nuxt.js 是建構在 Node.js 的環境之上，要 run Nuxt 時，需要起一個 Node.js 的 server<br>Nuxt 在 bundle 時，會 bundle 兩份檔案:</p>
<ol>
<li>Server 端的檔案 =&gt; 給搜尋引擎爬蟲，提高 SEO</li>
<li>Client 端的檔案 =&gt; 給 User 看的檔案內容</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>SSR</tag>
        <tag>SPA</tag>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>環境建置 &amp; Vue-cli專案</title>
    <url>/2021/03/08/vue-cli/</url>
    <content><![CDATA[<h1 id="Node-js-環境建置"><a href="#Node-js-環境建置" class="headerlink" title="Node.js 環境建置"></a>Node.js 環境建置</h1><h2 id="下載-NVM"><a href="#下載-NVM" class="headerlink" title="下載 NVM"></a>下載 NVM</h2><p>nvm 是 Node.js 的版本管理器 (version manager)，可在同一台主機上安裝多個版本的 Node.js 環境，因為不同專案可能會使用不同的 Node.js 版本，那就需要透過一個版本管理器來切換不同的 Node.js 版本。<br><br>NVM install - 點選右邊的 releases<br><a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></p>
<a id="more"></a>

<p>NVM 常用指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm list // 列出目前電腦有安裝的 nodejs 版本</span><br><span class="line">nvm list available // 目前網路上可用的 nodejs 版本列表</span><br><span class="line">nvm install v12.19.0 // 該 nodejs 版本下載安裝</span><br><span class="line">nvm uninstall v12.19.0 // 移除該 nodejs 版本</span><br><span class="line">nvm use v12.19.0 // 使用該 nodejs 版本</span><br><span class="line">nvm -v // 目前該 nvm 版本</span><br></pre></td></tr></table></figure>
<h2 id="下載-node-js"><a href="#下載-node-js" class="headerlink" title="下載 node.js"></a>下載 node.js</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install v12.19.0 // 該 nodejs 版本下載安裝</span><br><span class="line">nvm use v12.19.0 // 使用該 nodejs 版本</span><br><span class="line">node -v // 目前該 node 版本</span><br></pre></td></tr></table></figure>
<h2 id="檢查-npm-是否安裝成功"><a href="#檢查-npm-是否安裝成功" class="headerlink" title="檢查 npm 是否安裝成功"></a>檢查 npm 是否安裝成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v // 目前該 npm 版本</span><br></pre></td></tr></table></figure>
<p>npm 常用指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v // 查看目前npm的版本</span><br><span class="line">npm install &lt;package&gt; // 安裝npm套件</span><br><span class="line">npm install &lt;package&gt;  -D // 安裝開發階段套件</span><br><span class="line">npm install &lt;package&gt;  -S // 安裝上線階段套件</span><br><span class="line">npm rm &lt;package&gt; // 移除該套件</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="安裝-Vue-cli"><a href="#安裝-Vue-cli" class="headerlink" title="安裝 Vue-cli"></a>安裝 Vue-cli</h1><p>Vue CLI 是一個基於 Vue.js 進行快速開發的完整系統，確保各種構建工具能夠平穩銜接，使開發人員可以專注在撰寫應用上，而不必花好幾天去糾結配置的問題。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>
<h1 id="建構一個新的-Vue-專案"><a href="#建構一個新的-Vue-專案" class="headerlink" title="建構一個新的 Vue 專案"></a>建構一個新的 Vue 專案</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create my-project // my-project 為要創建的資料夾名稱</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">vue ui // ui介面設定</span><br></pre></td></tr></table></figure>
<br>
Please pick a preset: (請選擇一個預設)

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Manually select features //手動選擇功能</span><br></pre></td></tr></table></figure>
<br>
Check the features needed for your project: (檢查項目所需的功能)

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Choose Vue version //選擇 Vue 版本</span><br><span class="line">Babel //JavaScript 轉譯器，可將 ES6+ 程式碼轉為等效的 ES5 程式碼</span><br><span class="line">Router // 路由</span><br><span class="line">CSS pre-processors //CSS 預處理器</span><br></pre></td></tr></table></figure>
<br>
Choose a version of Vue.js that you want to start the project with (選擇Vue版本)

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3.x (Preview)</span><br></pre></td></tr></table></figure>
<br>
Use history mode for router?

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Y</span><br></pre></td></tr></table></figure>
<br>
Pick a CSS pre-processor

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sass/SCSS (with dart-sass)</span><br></pre></td></tr></table></figure>
<br>
Where do you prefer placing config for Babel, ESLint, etc.?

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">In package.json</span><br></pre></td></tr></table></figure>
<br>
Save this as a preset for future projects?

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Y</span><br></pre></td></tr></table></figure>
<p>Save preset as: 直接 ENTER<br><br></p>
<p>建立完後啟動 serve</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-project // 進入資料夾</span><br><span class="line">npm run serve // 開啟serve</span><br><span class="line">npm run build // 建立dist</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Vue-cli-專案結構解析"><a href="#Vue-cli-專案結構解析" class="headerlink" title="Vue-cli 專案結構解析"></a>Vue-cli 專案結構解析</h1><p>node_modules：透過 npm 下載的套件跟工具都會放在這個資料夾裡面<br><br>package.json：關於這整包專案所有的資訊，包含安裝套件版本、專案版本、npm 指令都可以在這個 json 檔案裡面找得到，之後要搬移專案重新安裝套件也需要靠這個 json 檔案<br><br>package-lock.json：專門紀錄 package.json 裡面更細節的內容，例如安裝的套件的詳細版本，或是確認你的 dependency (依賴)是被哪個函式庫所要求的等等<br><br>babel.config.js: babel 轉換 JS 時所用的套件</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>Vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition API 共用邏輯的封裝</title>
    <url>/2021/03/21/vue-composition-api/</url>
    <content><![CDATA[<h1 id="Vue-處理共用邏輯的方式"><a href="#Vue-處理共用邏輯的方式" class="headerlink" title="Vue 處理共用邏輯的方式"></a>Vue 處理共用邏輯的方式</h1><p>以往用 Vue2 處理共用邏輯有幾種方式</p>
<p>🔸 Mixins<br>🔸 Higher-order Components ( HOC )<br>🔸 Renderless Components</p>
<p>但 Vue2 存在著一些問題，命名衝突、產生多餘的元件實體、資料難以追蹤來源，就會有一些狀況產生。<br>隨著 Vue3 的升級，Vue3 Composition API 解決了 Vue2 的問題</p>
<a id="more"></a>

<p>🔸 資料追蹤清晰<br>🔸 不會有命名衝突的問題<br>🔸 不需要產生多餘的元件</p>
<h1 id="取得-Composition-API-的值"><a href="#取得-Composition-API-的值" class="headerlink" title="取得 Composition API 的值"></a>取得 Composition API 的值</h1><p>從共用邏輯封裝的 Composition API 取值</p>
<h2 id="範例-顯示滑鼠座標"><a href="#範例-顯示滑鼠座標" class="headerlink" title="範例: 顯示滑鼠座標"></a>範例: 顯示滑鼠座標</h2><h3 id="封裝邏輯的-JS"><a href="#封裝邏輯的-JS" class="headerlink" title="封裝邏輯的 JS"></a>封裝邏輯的 JS</h3><p>不同 components 可能會共用的 JS</p>
<p>composition-api/useMousePosition.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> y = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> positionUpdate = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    x.value = e.pageX;</span><br><span class="line">    y.value = e.pageY;</span><br><span class="line">  &#125;;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h3 id="整合封裝好的-JS"><a href="#整合封裝好的-JS" class="headerlink" title="整合封裝好的 JS"></a>整合封裝好的 JS</h3><p>所有封裝的 JS 都在 index.js 做整合，component 只需引入這支就好</p>
<p>composition-api/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;./useMousePosition.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMousePosition = mousePosition;</span><br></pre></td></tr></table></figure>
<br>

<h3 id="index-js-引入到-component"><a href="#index-js-引入到-component" class="headerlink" title="index.js 引入到 component"></a>index.js 引入到 component</h3><p>MousePosition.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = useMousePosition();</span><br><span class="line">    <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mouse Position<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>x: &#123;&#123;x&#125;&#125; y: &#123;&#123;y&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h3 id="解構取出-reactive-的物件"><a href="#解構取出-reactive-的物件" class="headerlink" title="解構取出 reactive 的物件"></a>解構取出 reactive 的物件</h3><p>組件透過解構要取出 reactive 的物件時，解構出來的變數會變成單純的變數(不具備綁定功能)，要讓 reactive 的變數被綁定有兩種方法:</p>
<p>1️⃣ 不使用解構，直接 return reactive 物件</p>
<p>composition-api/useMousePosition.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, reactive, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> position = reactive(&#123;</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> positionUpdate = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    position.x = e.pageX;</span><br><span class="line">    position.y = e.pageY;</span><br><span class="line">  &#125;;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>MousePosition.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> position = useMousePosition();</span><br><span class="line">    <span class="keyword">return</span> &#123; position &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mouse Position<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>x: &#123;&#123; position.x &#125;&#125; y: &#123;&#123; position.y &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<p>2️⃣ 使用 toRefs</p>
<p>只要把 reactive 物件用 toRefs 包起來，就可以讓解構的值具備資料綁定的效果</p>
<p>composition-api/useMousePosition.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> position = reactive(&#123;</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> positionUpdate = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    position.x = e.pageX;</span><br><span class="line">    position.y = e.pageY;</span><br><span class="line">  &#125;;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> toRefs(position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>MousePosition.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = useMousePosition();</span><br><span class="line">    <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mouse Position<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>x: &#123;&#123;x&#125;&#125; y: &#123;&#123;y&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<p>🔡 如要 return 更多的變數可使用展開運算子的方式</p>
<p>useMousePosition.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = ref(<span class="string">&quot;bobee&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> position = reactive(&#123;</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> positionUpdate = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    position.x = e.pageX;</span><br><span class="line">    position.y = e.pageY;</span><br><span class="line">  &#125;;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123; ...toRefs(position), name &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>MousePosition.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y, name &#125; = useMousePosition();</span><br><span class="line">    <span class="keyword">return</span> &#123; x, y, name &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mouse Position<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>x: &#123;&#123;x&#125;&#125; y: &#123;&#123;y&#125;&#125; &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這麼一來就可以取出多個值了！</p>
<br>

<h1 id="設定-Composition-API-的值"><a href="#設定-Composition-API-的值" class="headerlink" title="設定 Composition API 的值"></a>設定 Composition API 的值</h1><h2 id="範例-點擊按鈕改變值"><a href="#範例-點擊按鈕改變值" class="headerlink" title="範例: 點擊按鈕改變值"></a>範例: 點擊按鈕改變值</h2><p>useState.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">stateAdd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> idx = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> addState = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    idx.value++;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; idx, addState &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;./useMousePosition.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; stateAdd &#125; <span class="keyword">from</span> <span class="string">&quot;./useState.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMousePosition = mousePosition;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useState = stateAdd;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; idx, addState &#125; = useState();</span><br><span class="line">    <span class="keyword">return</span> &#123; idx, addState &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>number: &#123;&#123;idx&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addState&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>封裝的內容都是 priviate 的，即使複製兩個 components 也不會影響到各別的值</p>
<br>

<h1 id="封裝非同步處理的狀態"><a href="#封裝非同步處理的狀態" class="headerlink" title="封裝非同步處理的狀態"></a>封裝非同步處理的狀態</h1><p>useFetch.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchs</span>(<span class="params">API_url = <span class="string">&quot;&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLoad = ref(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fetchData = reactive(&#123; <span class="attr">data</span>: [] &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> errorMsg = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  axios</span><br><span class="line">    .get(API_url)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      isLoad.value = <span class="literal">true</span>;</span><br><span class="line">      fetchData.data = res.data;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      isLoad.value = <span class="literal">true</span>;</span><br><span class="line">      errorMsg.value = error.request.statusText;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123; isLoad, fetchData, errorMsg &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;./useMousePosition.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; stateAdd &#125; <span class="keyword">from</span> <span class="string">&quot;./useState.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchs &#125; <span class="keyword">from</span> <span class="string">&quot;./useFetch.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMousePosition = mousePosition;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useState = stateAdd;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useFetch = fetchs;</span><br></pre></td></tr></table></figure>
<br>

<p>FetchData.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useFetch &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isLoad, fetchData, errorMsg &#125; = useFetch(</span><br><span class="line">      <span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> &#123; isLoad, fetchData, errorMsg &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;!isLoad&quot;</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../assets/load.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--errorMsg不等於空時才會出現--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;errorMsg&quot;</span>&gt;</span>ERROR: &#123;&#123; errorMsg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isLoad&quot;</span> <span class="attr">class</span>=<span class="string">&quot;imgBlock&quot;</span>&gt;</span></span><br><span class="line">    &lt;img</span><br><span class="line">      v-for=&quot;item in fetchData.data&quot;</span><br><span class="line">      :key=&quot;item.url&quot;</span><br><span class="line">      :src=&quot;item.url&quot;</span><br><span class="line">      alt=&quot;&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>Composition API</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 自定義模板 directive</title>
    <url>/2021/03/14/vue-directive/</url>
    <content><![CDATA[<h1 id="全局-directive"><a href="#全局-directive" class="headerlink" title="全局 directive"></a>全局 directive</h1><p>透過 directive 可以讓每頁都使用共用語法，在 main.js 中添加全局 directive<br>directive mounted 生命週期等同於 onMounted, 但這裡為純 js 並非 vue 的週期裡，所以這樣使用</p>
<a id="more"></a>

<p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定義變數名稱focus</span></span><br><span class="line">app.directive(<span class="string">&quot;focus&quot;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(el);</span><br><span class="line">    el.focus(); <span class="comment">// 有v-focus名稱的都會有focus()效果</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>template</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span> // 自定義變數名稱前面須加上前綴v-XXX</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="範例-將數字轉千分位"><a href="#範例-將數字轉千分位" class="headerlink" title="範例: 將數字轉千分位"></a>範例: 將數字轉千分位</h2><p>tool.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> numPrice = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> n = num + <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> numArr = n.split(<span class="string">&quot;&quot;</span>).reverse();</span><br><span class="line">  <span class="keyword">const</span> overArr = [];</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  numArr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">3</span>) &#123;</span><br><span class="line">      i = <span class="number">1</span>;</span><br><span class="line">      overArr.push(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    overArr.push(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  overArr.reverse();</span><br><span class="line">  <span class="keyword">return</span> overArr.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>main.js<br>mounted(el, val) // 第二個參數為 v-xxx=”丟進去的值”</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; numPrice &#125; <span class="keyword">from</span> <span class="string">&quot;@/lib/tools.js&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line">app.directive(<span class="string">&quot;price&quot;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> p = numPrice(binding.value);</span><br><span class="line">    el.innerHTML = p;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>template</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-price</span>=<span class="string">&quot;15555000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="加上-v-model-時需-updated"><a href="#加上-v-model-時需-updated" class="headerlink" title="加上 v-model 時需 updated"></a>加上 v-model 時需 updated</h3><p>因為 mounted 只會執行一次，如需動態綁定，需再加上 updated<br>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.directive(<span class="string">&quot;price&quot;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> p = numPrice(binding.value);</span><br><span class="line">    el.innerHTML = p;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">updated</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> p = numPrice(binding.value);</span><br><span class="line">    el.innerHTML = p;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>components</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">1233211234567</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-price</span>=<span class="string">&quot;num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>directive</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 動態路由設定</title>
    <url>/2021/03/16/vue-dynamic-router/</url>
    <content><![CDATA[<h1 id="設定動態網址"><a href="#設定動態網址" class="headerlink" title="設定動態網址"></a>設定動態網址</h1><a id="more"></a>

<p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/About.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/courses&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Courses&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Courses/index.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/courses/:id&quot;</span>, <span class="comment">// 加上:id</span></span><br><span class="line">    name: <span class="string">&quot;Courses_id&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Courses/_id.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h1 id="設定外層的nav"><a href="#設定外層的nav" class="headerlink" title="設定外層的nav"></a>設定外層的nav</h1><p>useRoute: 用來獲取網址上面的參數<br>useRouter: 提供處理轉址相關的操作API</p>
<p>點擊選單，會根據路由去加上active，由於動態選單不會被加上router-link-active，所以使用監聽的方式去綁定class</p>
<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> route = useRoute();</span><br><span class="line">    <span class="keyword">const</span> reouteArr = reactive([<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;courses&#x27;</span>]); <span class="comment">// 每個選單的路由</span></span><br><span class="line">    <span class="keyword">const</span> index = ref(<span class="number">0</span>);</span><br><span class="line">    watch(</span><br><span class="line">      ()=&gt;route.path, <span class="comment">// 取得現在的路由</span></span><br><span class="line">      ()=&gt;&#123;</span><br><span class="line">        reouteArr.forEach(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> rp = route.path.substr(<span class="number">1</span>).split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>]; <span class="comment">// 移除斜線</span></span><br><span class="line">          <span class="comment">// substr() 方法返回一個字符串中從指定位置開始到指定字符數的字符。</span></span><br><span class="line">          <span class="comment">// split() 指定的字串分割，返回一個新Array</span></span><br><span class="line">          <span class="keyword">if</span> (item === rp) &#123;</span><br><span class="line">            index.value = idx;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> &#123; index &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:index === 0&#125;&quot;</span>&gt;</span> Home <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:index === 1&#125;&quot;</span>&gt;</span> About <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/courses&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:index === 2&#125;&quot;</span>&gt;</span> Courses <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">  <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">  a &#123;</span><br><span class="line">    <span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span><br><span class="line">    &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#42b983</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="內層的選單"><a href="#內層的選單" class="headerlink" title="內層的選單"></a>內層的選單</h1><p>如要切換選單時做更多的效果可以不使用router-link<br>router.push可以指向要去的頁面<br>router.push(‘/路徑’) or router.push({ path: ‘/路徑’ })<br>router.go(-1);回上一頁</p>
<p>滑鼠中鍵沒辦法讓router.push跳出視窗<br>可以使用router.resolve儲存路徑，再用純JS開啟路徑的視窗</p>
<p>/Courses/index.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onMounted, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> coursesList = reactive(&#123; <span class="attr">data</span>:&#123;&#125; &#125;); <span class="comment">// 儲存API回來的data</span></span><br><span class="line">    <span class="keyword">const</span> router = useRouter();</span><br><span class="line">    <span class="keyword">const</span> goNewRouter = <span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">      router.push(&#123;<span class="attr">path</span>: <span class="string">`/courses/<span class="subst">$&#123;id&#125;</span>`</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 滑鼠中鍵沒辦法讓router.push跳出視窗</span></span><br><span class="line">    <span class="keyword">const</span> openNewTab = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> saveUrl = router.resolve(&#123; <span class="attr">path</span>: <span class="string">`/courses/<span class="subst">$&#123;id&#125;</span>`</span> &#125;); <span class="comment">// router.resolve可儲存路徑</span></span><br><span class="line">      <span class="built_in">window</span>.open(saveUrl.href);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      axios.get(<span class="string">&#x27;https://vue-lessons-api.herokuapp.com/courses/list&#x27;</span>).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        coursesList.data = res.data;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      coursesList, goNewRouter, openNewTab</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果 @click事件有兩個就要加修飾符，才知道點的是要觸發哪一個Funtion<br>@click.left 滑鼠左鍵 @click.middle 滑鼠中鍵</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in coursesList.data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click.left</span>=<span class="string">&quot;goNewRouter(item.id)&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click.middle</span>=<span class="string">&quot;openNewTab(item.id)&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.photo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;teacher-box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;teach-img&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item.teacher.img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.teacher.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>NTD: &#123;&#123; item.money &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#courses</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">318px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>($color: #<span class="number">000000</span>, $alpha: <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.2s</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">231</span>, <span class="number">231</span>, <span class="number">231</span>);</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">opacity</span>: 1;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    &gt; h1 &#123;</span><br><span class="line">      <span class="selector-tag">font-size</span>: 14<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">text-align</span>: <span class="selector-tag">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.teacher-box</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">      &gt; h2 &#123;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 13<span class="selector-tag">px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.teach-img</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        &gt; img &#123;</span><br><span class="line">          <span class="selector-tag">border-radius</span>: 25<span class="selector-tag">px</span>;</span><br><span class="line">          <span class="selector-tag">margin-right</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="設定內頁"><a href="#設定內頁" class="headerlink" title="設定內頁"></a>設定內頁</h1><p>/Courses/_id.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRoute, useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> route = useRoute();</span><br><span class="line">    <span class="keyword">const</span> router = useRouter();</span><br><span class="line">    <span class="keyword">const</span> courses = reactive(&#123; <span class="attr">data</span>:&#123;&#125; &#125;);</span><br><span class="line">    <span class="keyword">const</span> isError = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      axios.get(<span class="string">`https://vue-lessons-api.herokuapp.com/courses/<span class="subst">$&#123;route.params.id&#125;</span>`</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        courses.data = res.data.data[<span class="number">0</span>];</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        isError.value = <span class="literal">true</span>;</span><br><span class="line">        courses.data[<span class="string">&#x27;errorMsg&#x27;</span>] = error.response.data.error_message;</span><br><span class="line">        <span class="comment">// 設定三秒會跳回原頁面</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          router.push(&#123;<span class="attr">path</span>:<span class="string">&#x27;/courses&#x27;</span>&#125;);</span><br><span class="line">          <span class="comment">// router.push(&#x27;/courses&#x27;)</span></span><br><span class="line">          <span class="comment">// router.go(-1); // 回上一頁</span></span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 離開此組件要執行的動作</span></span><br><span class="line">    onUnmounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      courses, isError</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>物件第二層初始時會是空的(undefined)，用v-if包住，等有資料時才會出現</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!isError&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; courses.data.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>NTD: &#123;&#123; courses.data.money &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;courses.data.photo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Object.keys(courses.data).length !== 0&quot;</span>&gt;</span><span class="comment">&lt;!--等有資料時才會出現--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;courses.data.teacher.img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="comment">&lt;!--物件第二層初始時會是空的--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; courses.data.teacher.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- error_message --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;isError&quot;</span>&gt;</span>&#123;&#123; courses.data.errorMsg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 的環境變量</title>
    <url>/2022/01/01/vue-env/</url>
    <content><![CDATA[<p><img src="https://imgur.com/lY6VKQe.png" alt="Vue"></p>
<p>有時候我們在開發專案時，會遇到開發環境跟正式環境資料不一樣的狀況，比較常見的就是域名不同，<br>最近我遇到的需求是，上正式站時，某個連結網址要換成正式站網址，但開發環境要用測試連結，那我們可以怎麼做呢?<br>像這種時候，可以使用環境變量，簡單解決各個環境的問題。</p>
<a id="more"></a>

<h1 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h1><p>在開發的過程中，通常會有三種階段: 開發環境、測試環境、生產環境(正式環境)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">development  <span class="comment">// 模式用于 vue-cli-service serve</span></span><br><span class="line">production   <span class="comment">// 模式用于 vue-cli-service build 和 vue-cli-service test:e2e</span></span><br><span class="line">test         <span class="comment">// 模式用于 vue-cli-service test:unit</span></span><br></pre></td></tr></table></figure>
<br/>
設定每個環境下的模式，serve、build 本身就有預設值，如沒要特別改，可省略--mode，你也可以自己定義模式環境，比如新建一個叫的staging模式，是用於構建生產環境的，但一些變量不同

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>, <span class="comment">// 等同vue-cli-service serve --mode development</span></span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>, <span class="comment">// 等同vue-cli-service build --mode production</span></span><br><span class="line">  <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span>,</span><br><span class="line">  <span class="string">&quot;staging&quot;</span> :<span class="string">&quot;vue-cli-service build --mode staging&quot;</span> <span class="comment">// 自訂 staging 模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="環境變量"><a href="#環境變量" class="headerlink" title="環境變量"></a>環境變量</h1><p>Cli-3.0總共提供了四種方式來制定環境變量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.env                <span class="comment">// 在所有的環境中被載入</span></span><br><span class="line">.env.local          <span class="comment">// 在所有的環境中被載入，只會在本地，會被 git 忽略</span></span><br><span class="line">.env.[mode]         <span class="comment">// 只在指定的模式中被載入</span></span><br><span class="line">.env.[mode].local   <span class="comment">// 只在指定的模式中被載入，只會在本地，會被 git 忽略</span></span><br></pre></td></tr></table></figure>
<p>不同的文件會在不同環境中被載入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.env                      <span class="comment">// 會在所有的環境中被載入</span></span><br><span class="line">.env.local                <span class="comment">// 會在所有環境中載入，但只限於本地</span></span><br><span class="line">.env.development          <span class="comment">// 只在開發環境中被載入</span></span><br><span class="line">.env.production           <span class="comment">// 只在生產環境中被載入</span></span><br><span class="line">.env.development.local    <span class="comment">// 會在本地開發環境中載入</span></span><br></pre></td></tr></table></figure>
<br/>

<p>運行相關命令的時候，會根據不同環境載入不同的文件，以至於能正確讀到文件裡的變量。載入的優先級別是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.env.[ mode ].local &gt; .env.[ mode ] &gt; .env</span><br></pre></td></tr></table></figure>
<br/>

<p>在文件中，我們只需要以key=value的方式就可以設置變量了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">FOO=bar</span><br><span class="line">VUE_APP_SECRET=secret</span><br></pre></td></tr></table></figure>
<p>設置完環境變量之後就可以在我們的項目中使用這兩個變量了。<br/><br>請注意，只有NODE_ENV，BASE_URL和以 VUE_APP_ 開頭的變量將通過 webpack.DefinePlugin 靜態地嵌入到客戶端側的代碼中。這是為了避免意外公開機器上可能具有相同名稱的私鑰。<br>在webpack配置中使用，沒什麽限制，可以直接通過process.env.XXX來使用<br><br/></p>
<h1 id="示例：建立-Staging-模式"><a href="#示例：建立-Staging-模式" class="headerlink" title="示例：建立 Staging 模式"></a>示例：建立 Staging 模式</h1><p>首先在項目根目錄下新建.env.staging文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">NODE_ENV=production</span><br><span class="line">VUE_APP_TITLE=My App (staging)</span><br></pre></td></tr></table></figure>
<br/>
package.json 設定 --mode staging

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span>,</span><br><span class="line">  <span class="string">&quot;staging&quot;</span> :<span class="string">&quot;vue-cli-service build --mode staging&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p>下指令<br><code>npm run staging</code><br>會在staging 模式下加載可能存在的.env、.env.staging和 .env.staging.local 文件然後構建出生產環境應用</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html">官方-模式和環境變量</a><br><a href="http://www.qianduan8.com/1704.html">vue-cli3.0入门-环境变量和模式配置</a></p>
<h3 id="nuxt-js-配置參考"><a href="#nuxt-js-配置參考" class="headerlink" title="nuxt.js 配置參考"></a>nuxt.js 配置參考</h3><p><a href="https://www.itread01.com/content/1547462292.html">nuxt.js配置基本域名和NODE_ENV環境變數</a></p>
<hr>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>env</tag>
        <tag>env環境變量</tag>
        <tag>環境變數</tag>
        <tag>環境變量</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 的 $event 事件回傳</title>
    <url>/2021/03/14/vue-event-return/</url>
    <content><![CDATA[<h1 id="event-事件回傳"><a href="#event-事件回傳" class="headerlink" title="$event 事件回傳"></a>$event 事件回傳</h1><p>取得事件的 target</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clickFn = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.target);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      clickFn,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickFn($event)&quot;</span>&gt;</span>CLICK<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如有多個參數，$event 事件需放在最後面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clickFn = <span class="function">(<span class="params">num, e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num, e.target);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      clickFn,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickFn(100, $event)&quot;</span>&gt;</span>CLICK<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>event</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 表單元件處理</title>
    <url>/2021/03/21/vue-form/</url>
    <content><![CDATA[<h1 id="表單綁定"><a href="#表單綁定" class="headerlink" title="表單綁定"></a>表單綁定</h1><p>表單開發是 Web 開發中最常見的需求之一，幾個基本的 Vue 表單處理如下</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>E-MAIL<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入email&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>PASSWORD<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入密碼&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>我已閱讀使用者條款<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handSubmit&quot;</span>&gt;</span>送出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> email = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> password = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> checkbox = ref(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> handSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(email, password, checkbox);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; email, password, checkbox, handSubmit &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="複選的-checkbox"><a href="#複選的-checkbox" class="headerlink" title="複選的 checkbox"></a>複選的 checkbox</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in courseslist.tags&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.tag&quot;</span>&gt;</span></span><br><span class="line">      &lt;input</span><br><span class="line">        :id=&quot;item.tag&quot;</span><br><span class="line">        type=&quot;checkbox&quot;</span><br><span class="line">        :value=&quot;item.tag&quot;</span><br><span class="line">        v-model=&quot;courseslist.listArray&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">:for</span>=<span class="string">&quot;item.tag&quot;</span>&gt;</span>&#123;&#123; item.tag &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handSubmit&quot;</span>&gt;</span>送出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> courseslist = reactive(&#123;</span><br><span class="line">      listArray: [],</span><br><span class="line">      tags: [</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;JavaScript&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Html&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Css&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Html5&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Vuejs&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;React&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Sass&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Css3&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Canvas&quot;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> handSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(courseslist.listArray);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; courseslist, handSubmit &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="下拉選單-select"><a href="#下拉選單-select" class="headerlink" title="下拉選單 select"></a>下拉選單 select</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;select-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;cityActive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>請選擇縣市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in twZip.city&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;areaActive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>請選擇區域<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in twZip.area&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handSubmit&quot;</span>&gt;</span>送出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; onMounted, reactive, ref, watch &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> twZip = reactive(&#123; <span class="attr">city</span>: [], <span class="attr">area</span>: [] &#125;);</span><br><span class="line">    <span class="keyword">const</span> cityActive = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> areaActive = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    watch(cityActive, <span class="function">(<span class="params">newCity</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 透過filter把特定縣市資料拉出來</span></span><br><span class="line">      <span class="keyword">const</span> newArr = twZip.city.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.name === newCity);</span><br><span class="line">      areaActive.value = <span class="string">&quot;&quot;</span>; <span class="comment">// 每次變換時清空，才會顯示請選擇區域</span></span><br><span class="line">      twZip.area = newArr[<span class="number">0</span>].area;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(cityActive.value);</span><br><span class="line">      <span class="built_in">console</span>.log(areaActive.value);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      axios</span><br><span class="line">        .get(<span class="string">&quot;https://vue-lessons-api.herokuapp.com/city/list&quot;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          twZip.city = res.data.twzip.city;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; twZip, cityActive, areaActive, handSubmit &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="register-註冊"><a href="#register-註冊" class="headerlink" title="register 註冊"></a>register 註冊</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!isRegister&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &lt;input</span><br><span class="line">      type=&quot;text&quot;</span><br><span class="line">      placeholder=&quot;輸入使用者名稱&quot;</span><br><span class="line">      v-model=&quot;registered.username&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;error_message.username&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; error_message.username &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>PASSWORD<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &lt;input</span><br><span class="line">      type=&quot;password&quot;</span><br><span class="line">      placeholder=&quot;輸入密碼&quot;</span><br><span class="line">      v-model=&quot;registered.password&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;error_message.password&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; error_message.password &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>E-MAIL<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入email&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;registered.email&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;error_message.email&quot;</span>&gt;</span>&#123;&#123; error_message.email &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年齡<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入年齡&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;registered.age&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;registered.sex&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>boy<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;registered.sex&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;girl&quot;</span>&gt;</span>girl<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;registered.terms&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>我已閱讀使用者條款<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handClick&quot;</span>&gt;</span>送出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isRegister&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>註冊成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive, ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isRegister = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">const</span> registered = reactive(&#123;</span><br><span class="line">      username: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      sex: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      email: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      age: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      terms: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> error_message = reactive(&#123;&#125;);</span><br><span class="line">    <span class="keyword">const</span> handError = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 把 error 的值傳進 error_message</span></span><br><span class="line">      <span class="built_in">Object</span>.keys(error).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> (error_message[item] = error[item]));</span><br><span class="line">      <span class="built_in">console</span>.log(error_message);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      axios</span><br><span class="line">        .post(</span><br><span class="line">          <span class="string">&quot;https://vue-lessons-api.herokuapp.com/auth/registered&quot;</span>,</span><br><span class="line">          registered</span><br><span class="line">        )</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          isRegister.value = <span class="literal">true</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          handError(error.response.data.error_message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; registered, isRegister, handClick, error_message &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.createApp(app).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的各種常用修飾符/語法糖</title>
    <url>/2021/03/21/vue-modifiers/</url>
    <content><![CDATA[<h1 id="事件修飾符"><a href="#事件修飾符" class="headerlink" title="事件修飾符"></a>事件修飾符</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.prevent <span class="comment">// 防止做原本預設的動作</span></span><br><span class="line">.stop <span class="comment">// 阻止事件冒泡到父元素，阻止任何父事件處理程序被執行</span></span><br><span class="line">.self <span class="comment">// 只在自己的層級處理自己的程序</span></span><br><span class="line">.once <span class="comment">// 只處理一次</span></span><br><span class="line">.native <span class="comment">// 在元件的根元素上監聽一個原生事件</span></span><br><span class="line">.sync</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="按鍵修飾符"><a href="#按鍵修飾符" class="headerlink" title="按鍵修飾符"></a>按鍵修飾符</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@keydown.enter  <span class="comment">// 按下enter做某事</span></span><br><span class="line">@keydown.a.prevent <span class="comment">// 防止A做原本預設動作</span></span><br><span class="line">@keydown<span class="number">.13</span>  <span class="comment">// 按下enter做某事，也可直接寫成keyCode碼</span></span><br></pre></td></tr></table></figure>
<h1 id="v-model-修飾符"><a href="#v-model-修飾符" class="headerlink" title="v-model 修飾符"></a>v-model 修飾符</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.lazy <span class="comment">// 打完文字後，焦點移出後才會反應</span></span><br><span class="line">.number <span class="comment">// 把輸入值當成數字</span></span><br><span class="line">.trim <span class="comment">// 裁掉文字前後的空格</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 嵌套路由，幫網站設定 layout</title>
    <url>/2021/03/16/vue-nested-routes/</url>
    <content><![CDATA[<h1 id="嵌套路由-Nested-Routes"><a href="#嵌套路由-Nested-Routes" class="headerlink" title="嵌套路由(Nested Routes)"></a>嵌套路由(Nested Routes)</h1><p>父層有 router-view 可以切換，內層也有自己的 router-view 可以切換</p>
<a id="more"></a>

<p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&quot;../views/About.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Changelog <span class="keyword">from</span> <span class="string">&quot;../views/About/Changelog.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> GitHub <span class="keyword">from</span> <span class="string">&quot;../views/About/GitHub.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Guide <span class="keyword">from</span> <span class="string">&quot;../views/About/Guide.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> aboutIndex <span class="keyword">from</span> <span class="string">&quot;../views/About/index.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Reference <span class="keyword">from</span> <span class="string">&quot;../views/About/Reference.vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">    component: About,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;&quot;</span>, <span class="comment">// children裡的路徑不需要斜線/</span></span><br><span class="line">        component: aboutIndex</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;changelog&quot;</span>,</span><br><span class="line">        component: Changelog</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;gitHub&quot;</span>,</span><br><span class="line">        component: GitHub</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;guide&quot;</span>,</span><br><span class="line">        component: Guide</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;reference&quot;</span>,</span><br><span class="line">        component: Reference</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h2 id="內層加上-router-view"><a href="#內層加上-router-view" class="headerlink" title="內層加上 router-view"></a>內層加上 router-view</h2><p>about.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/changelog&quot;</span>&gt;</span>changelog<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/gitHub&quot;</span>&gt;</span>gitHub<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/guide&quot;</span>&gt;</span>guide<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/reference&quot;</span>&gt;</span>reference<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.about</span> &#123;</span><br><span class="line">  &gt; nav &#123;</span><br><span class="line">    &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">      &amp;.router-link-exact-active &#123;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-tag">rebeccapurple</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需注意的是，嵌套路由的router-link，class會自動產生router-link-active，router-link-active的下一層也會產生router-link-exact-active，可以利用此類別來設定active</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt 錯誤頁面處理</title>
    <url>/2021/09/13/vue-nuxt-error/</url>
    <content><![CDATA[<p><img src="https://imgur.com/dq0PWCR.jpg" alt="Imgur"></p>
<p>使用者網址輸入錯誤，或頁面發生錯誤的時候，會在畫面上給一個 404 的頁面，在 Nuxt 我們也需要設置 404 的頁面</p>
<a id="more"></a>

<p>在 layouts 新增一個 error.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;error.statusCode === 404&quot;</span>&gt;</span>Page not found<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>An error occurred<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home page<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">&#x27;error&#x27;</span>], <span class="comment">// 如頁面發生錯誤，會傳遞叫 error 的 props</span></span><br><span class="line">  layout: <span class="string">&#x27;blog&#x27;</span>, <span class="comment">// you can set a custom layout for the error page</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt 快速安裝及設定</title>
    <url>/2021/08/30/vue-nuxt-install/</url>
    <content><![CDATA[<p><img src="https://imgur.com/mRrJH3R.jpg" alt="Imgur"></p>
<h1 id="安裝-Nuxt"><a href="#安裝-Nuxt" class="headerlink" title="安裝 Nuxt"></a>安裝 Nuxt</h1><p>安裝 Nuxt 前，先檢查 Nodejs 最少需要 v10.13 的版本，如小於此版本，請升級 Nodejs</p>
<a id="more"></a>

<p>以下步驟請依專案而定</p>
<p>安裝 nuxt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-nuxt-app &lt;project-name&gt;</span><br></pre></td></tr></table></figure>
<br>

<p>Project name: 直接 Enter</p>
<br>

<p>Programming language:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JavaScript</span><br></pre></td></tr></table></figure>
<br>

<p>Package manager:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm</span><br></pre></td></tr></table></figure>
<br>

<p>UI framework:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>
<br>

<p>Nuxt.js modules: (可先安裝的功能)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Axios - Promise based HTTP client</span><br></pre></td></tr></table></figure>
<br>

<p>Linting tools: 直接 Enter</p>
<br>

<p>Testing framework: 直接 Enter</p>
<br>

<p>Rendering mode:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Universal (SSR / SSG)</span><br></pre></td></tr></table></figure>
<br>

<p>Deployment target:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server (Node.js hosting)</span><br></pre></td></tr></table></figure>
<br>

<p>Development tools:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jsconfig.json (Recommended <span class="keyword">for</span> VS Code <span class="keyword">if</span> you<span class="string">&#x27;re not using typescript)</span></span><br></pre></td></tr></table></figure>
<br>

<p>What is your GitHub username?</p>
<br>

<p>Version control system:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>
<br>

<h2 id="Nuxt-2-14-6-安裝出現錯誤"><a href="#Nuxt-2-14-6-安裝出現錯誤" class="headerlink" title="Nuxt 2.14.6 安裝出現錯誤"></a>Nuxt 2.14.6 安裝出現錯誤</h2><p><img src="https://imgur.com/aJWOh3A.jpg" alt="Imgur"><br>這是目前只有在 Nuxt 2.14.6 會出現錯誤，可以在 nuxt.config.js 裡面的 build 新增以下設定解決這個錯誤</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  babel: &#123;</span><br><span class="line">    plugins: [[<span class="string">&#x27;@babel/plugin-proposal-private-methods&#x27;</span>, &#123; <span class="attr">loose</span>: <span class="literal">true</span> &#125;]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="安裝-SASS"><a href="#安裝-SASS" class="headerlink" title="安裝 SASS"></a>安裝 SASS</h1><p>Nuxt 預設是沒有辦法使用 SASS 的，如需要可以 npm 安裝 SASS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev sass sass-loader fibers</span><br></pre></td></tr></table></figure>
<h1 id="components-false"><a href="#components-false" class="headerlink" title="components: false"></a>components: false</h1><p>這個功能是 nuxt v2.13 時候所導入的功能，可以讓你不需要 import 就可以載入組件，但是這會造成不知道組件的正確路徑以及可能會有命名的相關問題，所以不推薦使用<br>在 nuxt.config.js 裡面把 components 這個欄位設定成 false，或是砍掉這個設定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components: <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>nuxt 教學</tag>
      </tags>
  </entry>
  <entry>
    <title>了解 Nuxt 架構解析</title>
    <url>/2021/09/09/vue-nuxt-layout/</url>
    <content><![CDATA[<p><img src="https://imgur.com/wcFw6fe.jpg" alt="Imgur"></p>
<h1 id="nuxt-指令"><a href="#nuxt-指令" class="headerlink" title="nuxt 指令"></a>nuxt 指令</h1><p>在 package.json 有一些指令可以操作 nuxt</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;nuxt&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;nuxt build&quot;,</span><br><span class="line">  &quot;start&quot;: &quot;nuxt start&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p><code>npm run dev</code> 開發環境時使用<br><code>npm run build</code> 打包專案，分別有 Client 端與 Server 端<br><code>npm run start</code> 用 Node.js 起一個 Server</p>
<h1 id="資料夾功能"><a href="#資料夾功能" class="headerlink" title="資料夾功能"></a>資料夾功能</h1><p>pages - 放頁面的地方，新增頁面後，會自動產生新頁面名稱的 router<br>layouts - 頁面共用的版型，像 header、footer 會重複的部分，可以寫在 default.vue，供每頁共用</p>
<p>layouts/default.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Nuxt</span> /&gt;</span>  // Nuxt 為 pages 裡面的頁面，像是 Vue Cli 的 router-view</span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>components - 頁面的最小單位組件<br>assets - 需要經過 Nuxt 編譯打包、壓縮的檔案，如 CSS、圖片等<br>static - 不需經過 Nuxt 編譯的檔案，如 favicon、音樂、Zip、自己寫的 json 等<br>store - 操作 Vuex 的地方<br>middleware - 進入頁面前需要做的中間層，如驗證檢查等<br>plugins - 自定義的 Global nuxt 套件，會從 nuxt.config.js 自動注入</p>
<p>🔸create-nuxt-app v3.7.1 安裝完後沒有 layout 以及 assets 目錄可以自己新增</p>
]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt 生命週期及執行順序</title>
    <url>/2021/09/10/vue-nuxt-lifecycle-hooks/</url>
    <content><![CDATA[<p><img src="https://imgur.com/btmMqMY.jpg" alt="Imgur"></p>
<p>因為 Nuxt 又有牽扯到 Server 的部分，所以 Nuxt 的生命週期會跟 Vue 的 Nuxt 有一點不太一樣</p>
<a id="more"></a>

<p><img src="https://imgur.com/Myy3gry.jpg" alt="nuxt"></p>
<h1 id="asyncData"><a href="#asyncData" class="headerlink" title="asyncData"></a>asyncData</h1><p>在 Server 執行階段，瀏覽器渲染之前的生命週期，Server 端處理非同步時，如 API 需要做到 SEO，需在 asyncData 處理，asyncData 只會執行一次。<br>🔸 asyncData 只有在頁面選染前才會執行，所以只有在 <code>pages</code> 裡的 component 才能使用 asyncData，如其他資料夾的 component 也需要 SEO，需把資料往下傳遞或是存進 Vuex 渲染<br>🔸 不能使用 this，在 Server 階段執行還沒產生 Vue 實體<br>🔸 不能使用瀏覽器有關的 API，如 windiw.alert、document 等，因在 Server 階段執行還沒建構出網站內容</p>
<p>asyncData 的內容如跟 data 同名 ，asyncData 會覆蓋掉 data</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123;name&#125;&#125;  // Bobee</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">asyncData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;Bobee&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">&#x27;Lala&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如想修改 asyncData 裡面的值，由於 asyncData 只會執行一次，所以不能被其他 methods 給抓取，直接在 data 新增一樣的內容，再去做控制就可以改變了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;name = &#x27;Lala&#x27;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">asyncData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;Bobee&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>官方有提到，想確保 API 的資料已經回來，可使用 <code>async await</code> 的方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-for</span>=<span class="string">&quot;item in res&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.url&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item.url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">asyncData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(</span><br><span class="line">    <span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    res: res.data,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打開檢查原始碼將會發現，這些圖片都被 Server render 到畫面上來了</p>
<h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><p>nuxt 2.12+的新功能，fetch 跟 asyncData 一樣都是由 Server 端執行，並 render 到畫面上來，不過有以下幾點跟 asyncData 不太一樣<br>🔸 可在任何一個 component 執行<br>🔸 可取得 this，因在 created 之後<br>🔸 不行 return 資料到 template，只能透過覆寫的方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;name&#125;&#125; // 這邊會被覆寫為Bobee</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: <span class="string">&quot;Lala&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">fetch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;Bobee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>fetchOnServer</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fetchOnServer: <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<p>如果把 fetchOnServer 設定成 false，那這樣 fetch 就只會在 client 端被執行，在檢視原始碼裡面就不會找到 fetch 的資料</p>
<br/>

<p><strong>keep-alive</strong><br>可以把內容緩存起來，不用重複 render 造成效能問題，只有用 keep-alive 時才可以調用 activated 生命週期，每當重新進入頁面都會觸發 activated</p>
<br/>

<p><strong>Fetch 提供的參數</strong><br>$fetchState.pending ( true  |  false ) :  讓你在 client 端去判斷 API 載入完成沒有<br>$fetchState.error ( null | { } ) : 當發生畫面上的內容發生錯誤的時候，去判斷錯誤的部分<br>$fetchState.timestamp ( Integer ) : 顯示最後一次非同步處理的時間</p>
<p>範例:<br>layouts/default.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Nuxt</span> <span class="attr">keep-alive</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>pages/index.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;$fetchState.pending&quot;</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;$fetchState.error&quot;</span>&gt;</span>ERROR &#123;&#123;$fetchState.error&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-for</span>=<span class="string">&quot;item in res&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.url&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item.url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      res: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  fetchOnServer: <span class="literal">false</span>,</span><br><span class="line">  <span class="function"><span class="title">activated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 判斷上次執行的 timestamp 跟現在的時間如相差超過 10 秒，將會重新執行 fetch</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.$fetchState.timestamp &lt;= <span class="built_in">Date</span>.now() - <span class="number">10000</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.$fetch();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">fetch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.res = <span class="keyword">await</span> axios.get(<span class="string">&#x27;https://vue-lessons-api.herokuapp.com/photo/list&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.data);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="生命週期執行順序"><a href="#生命週期執行順序" class="headerlink" title="生命週期執行順序"></a>生命週期執行順序</h1><p>將生命週期 console.log 出來</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">asyncData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;asyncData&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;beforeCreate&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;created&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;mounted&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">fetch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;fetch&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>順序為<br>asyncData → <code>beforeCreate</code> → <code>created</code> → fetch → <code>beforeCreate</code> → <code>created</code> → mounted<br>將會發現 beforeCreate、created 會被執行兩次，原因是 Server 端和 Client 端都會有 beforeCreate、created，所以需要再做一些判斷或處理，不然有可能重複的東西會被執行兩次。</p>
]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>asyncData</tag>
        <tag>fetch</tag>
        <tag>keep-alive</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Nuxt 重新包裝 cookie 與 localStorage 等方法</title>
    <url>/2021/10/12/vue-nuxt-localStorage/</url>
    <content><![CDATA[<p><img src="https://imgur.com/mRrJH3R.jpg" alt="Imgur"></p>
<p>在開發網頁時，或多或少會用到 localStorage 的方法去存取資料，在取得物件時，需做一些 JSON 的轉換，便能將資料取出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;data&#x27;</span>, <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">name</span>: <span class="string">&#x27;bobee&#x27;</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;data&#x27;</span>)));</span><br></pre></td></tr></table></figure>
<p>但每次都要這樣轉換其實有點麻煩，如果有很多地方都要使用這個方法，就必須寫一堆 JSON.stringify、JSON.parse，為了更方便使用，可以將方法包裝，供全站使用。</p>
<a id="more"></a>

<h1 id="包裝-localStorage"><a href="#包裝-localStorage" class="headerlink" title="包裝 localStorage"></a>包裝 localStorage</h1><h2 id="新增-localStorage-js，自行注入-localStorage-方法"><a href="#新增-localStorage-js，自行注入-localStorage-方法" class="headerlink" title="新增 localStorage.js，自行注入 localStorage 方法"></a>新增 localStorage.js，自行注入 localStorage 方法</h2><p>plugins/localStorage.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app &#125;, inject) =&gt; &#123;</span><br><span class="line">  inject(<span class="string">&#x27;localStorage&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 設定 key</span></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">key = <span class="string">&#x27;&#x27;</span>, val = &#123;&#125;</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">localStorage</span>.setItem(key, <span class="built_in">JSON</span>.stringify(val));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取得 key</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">key = <span class="string">&#x27;&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> obj = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(key));</span><br><span class="line">      <span class="comment">// 如果 obj 沒有東西，回傳空物件，此寫法在程式上會比較好判斷，也可減少錯誤發生</span></span><br><span class="line">      <span class="keyword">if</span> (!obj) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 移除 key</span></span><br><span class="line">    <span class="function"><span class="title">remove</span>(<span class="params">key = <span class="string">&#x27;&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">localStorage</span>.removeItem(key);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 移除所有 key</span></span><br><span class="line">    <span class="function"><span class="title">removeAll</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">localStorage</span>.clear();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>別忘了 nuxt.config.js 也要加上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [<span class="string">&quot;~/plugins/localStorage.js&quot;</span>],</span><br></pre></td></tr></table></figure>
<br>

<h2 id="調用-localStorage"><a href="#調用-localStorage" class="headerlink" title="調用 $localStorage"></a>調用 $localStorage</h2><p>inject localStorage 的方法後，就可以在全站隨心所欲的使用 this.$localStorage 了!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$localStorage.set(<span class="string">&quot;data&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;bobee&quot;</span> &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$localStorage.get(<span class="string">&quot;data&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="包裝-cookies"><a href="#包裝-cookies" class="headerlink" title="包裝 cookies"></a>包裝 cookies</h1><p>cookie 也是同包裝 localStorage 的作法，而 cookie 可以使用 <a href="https://github.com/js-cookie/js-cookie">Js-cookie</a> 套件更方便操作</p>
<h2 id="安裝-Js-cookie"><a href="#安裝-Js-cookie" class="headerlink" title="安裝 Js-cookie"></a>安裝 Js-cookie</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i js-cookie -S</span><br></pre></td></tr></table></figure>
<br>

<h2 id="新增-cookie-js，自行注入-cookies-方法"><a href="#新增-cookie-js，自行注入-cookies-方法" class="headerlink" title="新增 cookie.js，自行注入 cookies 方法"></a>新增 cookie.js，自行注入 cookies 方法</h2><p>plugins/cookie.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app &#125;, inject) =&gt; &#123;</span><br><span class="line">  inject(<span class="string">&#x27;cookies&#x27;</span>, &#123;</span><br><span class="line">    set: <span class="function">(<span class="params">name, value = &#123;&#125;, expires = &#123; expires: <span class="number">365</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      Cookies.set(name, value, expires);</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> val = Cookies.get(name);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(val);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      Cookies.remove(name);</span><br><span class="line">    &#125;,</span><br><span class="line">    removeAll: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> NodeList = <span class="built_in">Object</span>.keys(Cookies.get());</span><br><span class="line">      NodeList.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> Cookies.remove(el));</span><br><span class="line">      <span class="built_in">window</span>.location.replace(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [<span class="string">&quot;~/plugins/cookie.js&quot;</span>],</span><br></pre></td></tr></table></figure>
<br>

<h2 id="調用-cookies"><a href="#調用-cookies" class="headerlink" title="調用 $cookies"></a>調用 $cookies</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$cookies.set(<span class="string">&quot;bobee&quot;</span>, &#123; <span class="attr">age</span>: <span class="number">11</span> &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$cookies.get(<span class="string">&quot;bobee&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="筆記來源-2021-Vue3-專業職人-進階篇"><a href="#筆記來源-2021-Vue3-專業職人-進階篇" class="headerlink" title="筆記來源: 2021 Vue3 專業職人 | 進階篇"></a>筆記來源: 2021 Vue3 專業職人 | 進階篇</h3>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>cookie</tag>
        <tag>localStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Nuxt 設定 loading 效果</title>
    <url>/2021/09/13/vue-nuxt-loading/</url>
    <content><![CDATA[<p><img src="https://imgur.com/MUS8ao2.jpg" alt="Imgur"></p>
<h1 id="loading-開關"><a href="#loading-開關" class="headerlink" title="loading 開關"></a>loading 開關</h1><p>預設 loading 開關為 true，如想關閉 loading 可在 nuxt.config.js 設定</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  loading: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="修改-loading-樣式"><a href="#修改-loading-樣式" class="headerlink" title="修改 loading 樣式"></a>修改 loading 樣式</h1><p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  loading: &#123;</span><br><span class="line">    color: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    height: <span class="string">&#x27;5px&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="客製-loading"><a href="#客製-loading" class="headerlink" title="客製 loading"></a>客製 loading</h1><p>在 components 目錄新增一個 loading.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">&quot;html&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-page&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">finish</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.loading-page</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 nuxt.config.js 設定 loading 的組件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  loading: <span class="string">&#x27;~/components/loading.vue&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="點擊開關-loading"><a href="#點擊開關-loading" class="headerlink" title="點擊開關 loading"></a>點擊開關 loading</h1><p>可以從 this.$nuxt 的物件，去抓 $loading，$loading 就是 components/loading.vue 的組件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;openLoading&quot;</span>&gt;</span>loading<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">openLoading</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$nuxt.$loading.start(); <span class="comment">// 啟動 loading</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$nuxt.$loading.finish(); <span class="comment">// 關閉 loading</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>loading</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Nuxt 使用 Plugins</title>
    <url>/2021/10/11/vue-nuxt-plugins/</url>
    <content><![CDATA[<p><img src="https://imgur.com/ig2CVFl.jpg" alt="Plugins"><br>我們常常會使用到套件，幫助網站快速達到想要的效果，在 NUXT 要怎麼自行撰寫套件、如何整合現有的套件、或是整合第三方套件呢?</p>
<a id="more"></a>

<h1 id="自己撰寫的-Plugins"><a href="#自己撰寫的-Plugins" class="headerlink" title="自己撰寫的 Plugins"></a>自己撰寫的 Plugins</h1><p>自己撰寫 Plugins 起手式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app &#125;, inject) =&gt; &#123;</span><br><span class="line">  inject(<span class="string">&#x27;EventName&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 想做的事情</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>inject 會把你所寫的東西，注入到整個環境，<br>EventName 是自定義的方法名稱，可以在頁面呼叫<code>this.$EventName</code>使用。</p>
<h2 id="1-在-plugins-資料夾新增自定義的-js"><a href="#1-在-plugins-資料夾新增自定義的-js" class="headerlink" title="1.在 plugins 資料夾新增自定義的 js"></a>1.在 plugins 資料夾新增自定義的 js</h2><p>/plugins/demo.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app &#125;, inject) =&gt; &#123;</span><br><span class="line">  inject(<span class="string">&#x27;EventName&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">log</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;EventName=&gt;&#x27;</span>, val);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="2-載入-demo-js"><a href="#2-載入-demo-js" class="headerlink" title="2.載入 demo.js"></a>2.載入 demo.js</h2><p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [<span class="string">&#x27;~/plugins/demo.js&#x27;</span>];</span><br></pre></td></tr></table></figure>
<br>

<h2 id="3-調用自定義的方法"><a href="#3-調用自定義的方法" class="headerlink" title="3.調用自定義的方法"></a>3.調用自定義的方法</h2><p>index.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SSR 沒有 this，直接調用 $EventName</span></span><br><span class="line"><span class="function"><span class="title">asyncData</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">  context.$EventName.log(<span class="string">&quot;asyncData&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSR 沒有 this，直接調用 $EventName</span></span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$EventName.log(<span class="string">&quot;mounted&quot;</span>));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<br>

<h1 id="整合現有的-Nuxt-Plugins"><a href="#整合現有的-Nuxt-Plugins" class="headerlink" title="整合現有的 Nuxt Plugins"></a>整合現有的 Nuxt Plugins</h1><p>以 <a href="https://axios.nuxtjs.org/">axios</a> 做為範例</p>
<h2 id="1-安裝-nuxt-axios"><a href="#1-安裝-nuxt-axios" class="headerlink" title="1.安裝 nuxt axios"></a>1.安裝 nuxt axios</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @nuxtjs/axios</span><br></pre></td></tr></table></figure>
<br>

<h2 id="2-設定-modules"><a href="#2-設定-modules" class="headerlink" title="2.設定 modules"></a>2.設定 modules</h2><p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">modules: [<span class="string">&quot;@nuxtjs/axios&quot;</span>],</span><br></pre></td></tr></table></figure>
<p>設定 modules 後，就可以用 context.$axios 去做操作了，<br>也可使用解構的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">asyncData</span>(<span class="params">&#123; $axios &#125;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> $axios.get(</span><br><span class="line">    <span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<br>

<h2 id="3-封裝-axios-的錯誤處理"><a href="#3-封裝-axios-的錯誤處理" class="headerlink" title="3.封裝 axios 的錯誤處理"></a>3.封裝 axios 的錯誤處理</h2><p>在 plugins 新增 axios.js，用來處理 onError</p>
<p>plugins/axios.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">&#123; $axios, redirect &#125;</span>) </span>&#123;</span><br><span class="line">  $axios.onError(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//axios 如發生錯誤，onError 可依內容去做後續處理</span></span><br><span class="line">    <span class="keyword">if</span> (error.response.status === <span class="number">500</span>) &#123;</span><br><span class="line">      redirect(<span class="string">&#x27;/sorry&#x27;</span>); <span class="comment">// 跳轉頁面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (error.response.status === <span class="number">404</span>) &#123;</span><br><span class="line">      redirect(<span class="string">&#x27;/404&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>並在 nuxt.config.js 新增 plugins</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [<span class="string">&quot;~/plugins/axios.js&quot;</span>],</span><br></pre></td></tr></table></figure>
<p>這麼一來整個 global 都可以使用到這個 axios 的錯誤處理</p>
<br>

<h1 id="第三方套件整合-Nuxt"><a href="#第三方套件整合-Nuxt" class="headerlink" title="第三方套件整合 Nuxt"></a>第三方套件整合 Nuxt</h1><p>通常使用 Nuxt 製作時，會找可以直接在 Nuxt 使用的套件，如果想使用的套件不是 Nuxt 專用，我們需要將一般的 VUE 套件，包裝成 NUXT 再做使用，需注意套件有沒有支援 SSR</p>
<p>以 Vue.js <a href="https://github.com/euvl/vue-notification#readme">notifications</a> 套件做為範例，是一個彈出通知訊息的套件</p>
<h2 id="1-安裝-notifications"><a href="#1-安裝-notifications" class="headerlink" title="1.安裝 notifications"></a>1.安裝 notifications</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save vue-notification</span><br></pre></td></tr></table></figure>
<p>先將 notifications 安裝起來</p>
<br>

<h2 id="2-新增-notifications-js-並引用"><a href="#2-新增-notifications-js-並引用" class="headerlink" title="2.新增 notifications.js 並引用"></a>2.新增 notifications.js 並引用</h2><p>在 plugins 新增 notification.js<br>notification.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">// import Notifications from &#x27;vue-notification&#x27; 此為 CSR 使用</span></span><br><span class="line"><span class="keyword">import</span> Notifications <span class="keyword">from</span> <span class="string">&#x27;vue-notification/dist/ssr.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Notifications);</span><br></pre></td></tr></table></figure>
<p>本來在 CSR 時是放在 main.js 的引入，NUXT 是放在 notification.js，使用 SSR 的方式引入</p>
<p>在 nuxt.config.js 新增 plugins</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="string">&quot;~/plugins/notification.js&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<br>

<h2 id="3-使用套件方法"><a href="#3-使用套件方法" class="headerlink" title="3.使用套件方法"></a>3.使用套件方法</h2><p>由於此套件屬於全站皆可使用的，所以放在 layouts，訊息 position 可以依需求調整</p>
<p>layouts/default.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">notifications</span> <span class="attr">position</span>=<span class="string">&quot;bottom right&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>pages/index.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showNotice&quot;</span>&gt;</span>CLICK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">showNotice</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// using options</span></span><br><span class="line">    <span class="built_in">this</span>.$notify(&#123;</span><br><span class="line">      title: <span class="string">&quot;Important message&quot;</span>,</span><br><span class="line">      text: <span class="string">&quot;Hello user!&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<br>

<h2 id="4-匯入-CSS"><a href="#4-匯入-CSS" class="headerlink" title="4.匯入 CSS"></a>4.匯入 CSS</h2><p>NUXT 套件整合，可能會遇到吃不到 CSS 的情況，需自行匯入 CSS<br>在 assets 新增 notifications.css，並全域匯入</p>
<p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">css: [<span class="string">&#x27;~/assets/notifications.css&#x27;</span>];</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="筆記來源-2021-Vue3-專業職人-進階篇"><a href="#筆記來源-2021-Vue3-專業職人-進階篇" class="headerlink" title="筆記來源: 2021 Vue3 專業職人 | 進階篇"></a>筆記來源: 2021 Vue3 專業職人 | 進階篇</h3>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>plugins</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt 自動化 Router 配置</title>
    <url>/2021/09/12/vue-nuxt-router/</url>
    <content><![CDATA[<p><img src="https://imgur.com/kyou2GQ.jpg" alt="Imgur"></p>
<p>Nuxt 設置路由非常方便，只要新增好 component 就會自動設定好頁面</p>
<h1 id="Router-更換頁面的進入點"><a href="#Router-更換頁面的進入點" class="headerlink" title="Router 更換頁面的進入點"></a>Router 更換頁面的進入點</h1><p>在 layouts 可以放進每頁共用的部分，與一個隨著 pages 變化內容的進入點，相當於在 Vue Cli 的 router-view ，在 Nuxt 的進入點用 Nuxt</p>
<a id="more"></a>

<p>layouts/default.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Nuxt</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="嵌套-router-所更換頁面的進入點"><a href="#嵌套-router-所更換頁面的進入點" class="headerlink" title="嵌套 router 所更換頁面的進入點"></a>嵌套 router 所更換頁面的進入點</h1><p>About 下面還有子路由，只要在 pages 新增 About 資料夾，再放進 component，就會自動生成底下的路由啦！</p>
<p><img src="https://imgur.com/w5m1vIX.jpg" alt="Imgur"></p>
<p>嵌套路由的進入點為 NuxtChild，而不是用原本的 router-view，這樣在識別的時候也會比較好識別這個組件是不是用嵌套網址<br>pages/About.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about/guide&quot;</span>&gt;</span>Guide<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about/reference&quot;</span>&gt;</span>API Reference<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about/changelog&quot;</span>&gt;</span>Changelog <span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about/gitHub&quot;</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtChild</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="Nuxt-切換頁面的超連結元件"><a href="#Nuxt-切換頁面的超連結元件" class="headerlink" title="Nuxt 切換頁面的超連結元件"></a>Nuxt 切換頁面的超連結元件</h1><p>在 Vue Cli 為 router-link，在 Nuxt 要寫 NuxtLink，用法跟 router-link 一模一樣，雖然在 Nuxt 裡 router-link 也可以執行，但以防萬一非預期的錯誤，在 Nuxt 還是用 NuxtLink 吧！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about page<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="動態-Router-配置"><a href="#動態-Router-配置" class="headerlink" title="動態 Router 配置"></a>動態 Router 配置</h1><p>在要設置動態路由的資料夾，新增一個名為<code>_id.vue</code> 的 component，id 為自定義的名字，主要前面要加底線</p>
<p><img src="https://imgur.com/HItJoSV.jpg" alt="Imgur"></p>
<p>asyncData 會回傳一個 context 物件，context.params.id 可取得動態路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">asyncData</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(context.params.id);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      id: context.params.id,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt 的 SEO 設定</title>
    <url>/2021/09/12/vue-nuxt-seo/</url>
    <content><![CDATA[<p><img src="https://imgur.com/s07cfNA.jpg" alt="Imgur"></p>
<p>做好 SEO，可以增強網站的自然搜尋排名，不同的頁面通常會有不同的 title、關鍵字，Nuxt 可以幫我們做到這件事。</p>
<h1 id="Global-Settings"><a href="#Global-Settings" class="headerlink" title="Global Settings"></a>Global Settings</h1><p>設定整個網站的 SEO，在這裡你可以定義所有的 meta</p>
<a id="more"></a>

<p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">head: &#123;</span><br><span class="line">  title: <span class="string">&quot;一文前端大小事&quot;</span>,</span><br><span class="line">  htmlAttrs: &#123;</span><br><span class="line">    lang: <span class="string">&quot;en&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  meta: [</span><br><span class="line">    &#123; <span class="attr">charset</span>: <span class="string">&quot;utf-8&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;viewport&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;width=device-width, initial-scale=1&quot;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      hid: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">      name: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">      content: <span class="string">&quot;一起鑽研前端技術吧^^&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;format-detection&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;telephone=no&quot;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  link: [&#123; <span class="attr">rel</span>: <span class="string">&quot;icon&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;image/x-icon&quot;</span>, <span class="attr">href</span>: <span class="string">&quot;/favicon.ico&quot;</span> &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h1 id="Local-Settings"><a href="#Local-Settings" class="headerlink" title="Local Settings"></a>Local Settings</h1><p>要設定每頁的 SEO 也很簡單，只要把 head 搬去要設定的頁面就可以了<br>pages/about.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  head: &#123;</span><br><span class="line">    title: <span class="string">&#x27;關於我們&#x27;</span>,</span><br><span class="line">    htmlAttrs: &#123;</span><br><span class="line">      lang: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    meta: [</span><br><span class="line">      &#123; <span class="attr">charset</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;viewport&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;width=device-width, initial-scale=1&#x27;</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        hid: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        content: <span class="string">&#x27;關於我們的頁面&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;format-detection&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;telephone=no&#x27;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    link: [&#123; <span class="attr">rel</span>: <span class="string">&#x27;icon&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;image/x-icon&#x27;</span>, <span class="attr">href</span>: <span class="string">&#x27;/favicon.ico&#x27;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>
如果要利用 data 的資料，改變 head 的內容，可以把 head 變成函式的方式 return

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    title: <span class="string">&quot;data的關於我們&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">head</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    title: <span class="built_in">this</span>.title,</span><br><span class="line">    htmlAttrs: &#123;</span><br><span class="line">      lang: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    meta: [</span><br><span class="line">      &#123; <span class="attr">charset</span>: <span class="string">&quot;utf-8&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;viewport&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;width=device-width, initial-scale=1&quot;</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        hid: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">        content: <span class="string">&quot;關於我們的頁面&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;format-detection&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;telephone=no&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    link: [&#123; <span class="attr">rel</span>: <span class="string">&quot;icon&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;image/x-icon&quot;</span>, <span class="attr">href</span>: <span class="string">&quot;/favicon.ico&quot;</span> &#125;],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h1 id="SSR-設定"><a href="#SSR-設定" class="headerlink" title="SSR 設定"></a>SSR 設定</h1><p>Nuxt 的 SSR 預設是開啟，實際上 Nuxt 也可以開發 SPA 模式，打包時就只會輸出 Client 端的部分</p>
<p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ssr: <span class="literal">false</span>, <span class="comment">// 關閉 SSR，使用 SPA 開發模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Nuxt 管理 vuex 狀態</title>
    <url>/2021/10/16/vue-nuxt-vuex/</url>
    <content><![CDATA[<p><img src="https://imgur.com/mRrJH3R.jpg" alt="Imgur"></p>
<p>要在 Nuxt 使用 vuex ，直接在 store 新增 index.js，並用函式的方式回傳 state，加入 actions、mutations、getters，即可直接使用。</p>
<a id="more"></a>

<h1 id="Nuxt-操作-vuex"><a href="#Nuxt-操作-vuex" class="headerlink" title="Nuxt 操作 vuex"></a>Nuxt 操作 vuex</h1><p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  idx: <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">handAddCount</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;addCount&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="function"><span class="title">addCount</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    state.idx++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="function"><span class="title">getIdx</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`count: <span class="subst">$&#123;state.idx&#125;</span>`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>

<p>index.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickBtn&quot;</span>&gt;</span>ADD<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">clickBtn</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;handAddCount&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">count</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.getIdx;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="asyncData-取得-store-資料"><a href="#asyncData-取得-store-資料" class="headerlink" title="asyncData 取得 store 資料"></a>asyncData 取得 store 資料</h1><p>想在 asyncData 取得 store，可從 context 去抓取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; asyncCount &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">asyncData</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">asyncCount</span>: context.app.store.state.idx &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="拆分-module"><a href="#拆分-module" class="headerlink" title="拆分 module"></a>拆分 module</h1><h2 id="寫在同一支的-module"><a href="#寫在同一支的-module" class="headerlink" title="寫在同一支的 module"></a>寫在同一支的 module</h2><p>在 store 新增 User 資料夾，等於直接創建了一個 User 的 module</p>
<p>store/User/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  name: <span class="string">&#x27;bobee&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">log</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getters = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>直接 this.$store.state.User 就可以取得到 User 裡的資料</p>
<p>index.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$store.state.User.name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;User/log&quot;</span>));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<br>

<h2 id="拆分四支檔案的-module"><a href="#拆分四支檔案的-module" class="headerlink" title="拆分四支檔案的 module"></a>拆分四支檔案的 module</h2><p>也可以把 state、actions、mutations、getters 拆分成四支檔案，取得資料的方法也是同樣的</p>
<p>store/User/state.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (&#123;</span><br><span class="line">  title: <span class="string">&#x27;nuxt&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>store/User/actions.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>store/User/mutations.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>store/User/getters.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="Plugins-注入-Vuex"><a href="#Plugins-注入-Vuex" class="headerlink" title="Plugins 注入 Vuex"></a>Plugins 注入 Vuex</h1><p>已載入全域的 plugins，只有在 nuxt 上可以使用，vuex 上沒辦法調用，<br>所以需要將套件的方法注入到 Vuex 裡面，假如我們已經在專案上安裝好了 vue-notification 套件，在layout的地方注入方法</p>
<p>layout/defalut.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$store.$notify = <span class="built_in">this</span>.$notify</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這麼一來，就可以在 store 使用 this.$notify 了!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">handAddCount</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&quot;AddCount&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">handApiData</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> apiGetPhotoData();</span><br><span class="line">      commit(<span class="string">&quot;AddCount&quot;</span>, &#123; <span class="attr">data</span>: res.data &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 錯誤處理</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;錯誤處理:&quot;</span>, error);</span><br><span class="line">      <span class="built_in">this</span>.$notify(&#123;</span><br><span class="line">        group: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">        title: <span class="string">&quot;API資料錯誤&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">        text: error</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="筆記來源-2021-Vue3-專業職人-進階篇"><a href="#筆記來源-2021-Vue3-專業職人-進階篇" class="headerlink" title="筆記來源: 2021 Vue3 專業職人 | 進階篇"></a>筆記來源: 2021 Vue3 專業職人 | 進階篇</h3>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 setup、CSS新寫法</title>
    <url>/2021/03/21/vue-other-issues/</url>
    <content><![CDATA[<p>Vue3 還有很多新功能官方正在進行中，目前有幾個差不多定案的新功能</p>
<a id="more"></a>

<h1 id="Script-Setup"><a href="#Script-Setup" class="headerlink" title="Script Setup"></a>Script Setup</h1><p><b>原本寫法</b></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = ref(<span class="string">&quot;Bobee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<p><b>新寫法</b><br>直接將 Setup 寫在 script 上，不用 export、return<br>如果沒有在 template 寫變數，就自動不會 return 出來</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref&#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">const name = ref(<span class="string">&quot;Bobee&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="變數綁定-CSS"><a href="#變數綁定-CSS" class="headerlink" title="變數綁定 CSS"></a>變數綁定 CSS</h1><p>用 v-bind 綁定 JS 變數，可以直接變換屬性的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">const name = ref(<span class="string">&quot;Bobee&quot;</span>);</span><br><span class="line">const colorBlue = ref(<span class="string">&quot;#000FFF&quot;</span>);</span><br><span class="line">const changeColor = () =&gt; &#123;</span><br><span class="line">  colorBlue.value = <span class="string">&quot;#FF0000&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeColor&quot;</span>&gt;</span>changeColor<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">v-bind</span>(colorBlue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>Composition API</tag>
      </tags>
  </entry>
  <entry>
    <title>Pinia 的全域資料管理</title>
    <url>/2022/12/23/vue-pinia/</url>
    <content><![CDATA[<p><img src="https://imgur.com/XYpshsj.jpg" alt="Pinia"><br>在 Vue2 時我們常常使用 Vuex 來做共用邏輯，組件之間的溝通，在 Vue 升級後，Vue3 官方有意將 Vuex 換成 Pinia</p>
<p>Pinia 相對來說沒有太多複雜的邏輯，你可以把它當成是沒有 mutations 的 Vuex，當然，在 Vue3 還是可以使用 Vuex 來操作，但 Pinia 的出現，你可以省去很多學習成本，又可以直接在 store 裡使用 composition API。</p>
<p>事不宜遲，來使用看看吧！</p>
<a id="more"></a>

<br>
<br>

<h1 id="安裝-Pinia"><a href="#安裝-Pinia" class="headerlink" title="安裝 Pinia"></a>安裝 Pinia</h1><p>選擇自己喜歡的方式安裝</p>
<p>NPM</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure>
<p>YARN</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">yarn add pinia</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="引入-Pinia"><a href="#引入-Pinia" class="headerlink" title="引入 Pinia"></a>引入 Pinia</h1><p>main.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = createPinia();</span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line">app.use(pinia);</span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>引入後就可以來操作 Pinia 囉！<br><br><br><br></p>
<h1 id="建立-stores-檔案"><a href="#建立-stores-檔案" class="headerlink" title="建立 stores 檔案"></a>建立 stores 檔案</h1><p>在 src 底下建立 stores 資料夾，裡面可以依專案需求來放置檔案</p>
<p>範例先使用 counter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = defineStore(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">	<span class="comment">// more...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>defineStore 第一個參數為 id，給 pinia 做 store 和 devtools 的連接</li>
<li>會以 <code>use</code> 來做變數開頭命名</li>
</ul>
<p>Pinia 可以用操作起來像 Vuex 一樣的 <strong>Option Store</strong>，也可以使用 <strong>Setup Store</strong>，兩種操作起來不太一樣，以下為兩者介紹<br><br><br><br></p>
<h1 id="Option-Store"><a href="#Option-Store" class="headerlink" title="Option Store"></a><strong>Option Store</strong></h1><p>stores/counter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = defineStore(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  state: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount: <span class="function">(<span class="params">state</span>) =&gt;</span> state.counter * <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">addCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>Pinia 沒有 Vuex 的 mutations</li>
<li>actions 要用 this 指向 state</li>
</ul>
<p>App.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&quot;./stores/counter&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = useCounterStore();</span><br><span class="line"><span class="keyword">const</span> clickAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  store.addCount();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;store.counter&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button type=<span class="string">&quot;button&quot;</span> @click=<span class="string">&quot;clickAdd&quot;</span>&gt;</span><br><span class="line">    add</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>Pinia 取出 stores 值時，不需要再寫 state、dispatch、getters，可以直接取得值<br>
<br>

</li>
</ul>
<h1 id="Setup-Store"><a href="#Setup-Store" class="headerlink" title="Setup Store"></a><strong>Setup Store</strong></h1><p>使用 Composition API 可以像 Vue3 使用 Component 的方式，使用 ref、reactive、computed 等等，並將要用的資料 return 出去給外面的檔案使用</p>
<p>stores/counter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = defineStore(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> counter = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> doubleCount = computed(<span class="function">() =&gt;</span> counter.value * <span class="number">2</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    counter.value++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; counter, doubleCount, addCount &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>第二個參數為 function，裡面直接可以使用 Composition API</li>
</ul>
<p>App.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&quot;./stores/counter&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = useCounterStore();</span><br><span class="line"><span class="keyword">const</span> clickAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  store.addCount();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;store.counter&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button type=<span class="string">&quot;button&quot;</span> @click=<span class="string">&quot;clickAdd&quot;</span>&gt;</span><br><span class="line">    add</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>如此一來會跟 Options API 寫法的結果是一模一樣的，且無需處理 this 指向，與使用 Components 的 codeing style 也是一致的，寫法也更清楚簡潔<br><br><br><br></p>
<h1 id="Setup-Store-取-API"><a href="#Setup-Store-取-API" class="headerlink" title="Setup Store 取 API"></a><strong>Setup Store</strong> 取 API</h1><p>在 <strong>Setup Store</strong> 取 API 也是非常簡單，用 axios 取得 API 資料後，再從外部取得</p>
<p>stores/counter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = defineStore(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = ref(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fetchName = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(<span class="string">&#x27;https://randomuser.me/api/&#x27;</span>);</span><br><span class="line">      name.value = res.data.results[<span class="number">0</span>].name;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; name, fetchName &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>App.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&quot;./stores/counter&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> store = useCounterStore();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; store.name.first &#125;&#125; &#123;&#123; store.name.last &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button type=<span class="string">&quot;button&quot;</span> @click=<span class="string">&quot;store.fetchName&quot;</span>&gt;</span><br><span class="line">    fetchName</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="Pinia-解構，storeToRefs-包裝資料"><a href="#Pinia-解構，storeToRefs-包裝資料" class="headerlink" title="Pinia 解構，storeToRefs 包裝資料"></a>Pinia 解構，<code>storeToRefs</code> 包裝資料</h1><p>上面的範例，會看到很多都是 store 出來的，這時可以使用解構，讓程式碼簡潔一點，不過要注意的是，因 store 是用 reactive 包裝的對象，資料如果從 store 解構出來，將會破壞響應性，所以~</p>
<p>Pinia 的 function 可以直接從 store 解構出來，但純資料解構需使用 <code>storeToRefs</code> 包裝起來</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line">  <span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&quot;./stores/counter&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> store = useCounterStore();</span><br><span class="line">  <span class="keyword">const</span> &#123; addCount, fetchName &#125; = store;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, counter &#125; = storeToRefs(store);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;counter&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button type=<span class="string">&quot;button&quot;</span> @click=<span class="string">&quot;addCount&quot;</span>&gt;</span><br><span class="line">    add</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h1&gt;&#123;&#123; name.first &#125;&#125; &#123;&#123; name.last &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button type=<span class="string">&quot;button&quot;</span> @click=<span class="string">&quot;fetchName&quot;</span>&gt;</span><br><span class="line">    fetchName</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="Store-之間的傳遞"><a href="#Store-之間的傳遞" class="headerlink" title="Store 之間的傳遞"></a>Store 之間的傳遞</h1><p>store 之間有可能也會傳遞資料，import store 直接就可以使用，如以下範例，我們傳遞了 aboutStore 的 user 給 counterStore 做使用</p>
<p>store/about.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useAboutStore = defineStore(<span class="string">&#x27;about&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = ref(<span class="string">&#x27;Lala&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; user &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>stores/counter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore, storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useAboutStore &#125; <span class="keyword">from</span> <span class="string">&quot;./about&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = defineStore(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> aboutStore = useAboutStore();</span><br><span class="line">  <span class="keyword">const</span> &#123; user &#125; = storeToRefs(aboutStore);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> counter = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> doubleCount = computed(<span class="function">() =&gt;</span> counter.value * <span class="number">2</span> + user.value)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    counter.value++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = ref(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fetchName = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(<span class="string">&#x27;https://randomuser.me/api/&#x27;</span>);</span><br><span class="line">      name.value = res.data.results[<span class="number">0</span>].name;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; counter, doubleCount, addCount, name, fetchName &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h1><p><a href="https://www.youtube.com/watch?v=_Vvi9EVtuW4">Vue3 + Vite 快速上手 Get Startrd EP6 - Pinia 的全域資料管理！</a><br><a href="https://pinia.vuejs.org/">Pinia 官方</a></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Pinia</tag>
        <tag>stores</tag>
        <tag>Option Store</tag>
        <tag>Setup Store</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Router 網址路由設定、History modes</title>
    <url>/2021/03/14/vue-router/</url>
    <content><![CDATA[<h1 id="單頁式應用"><a href="#單頁式應用" class="headerlink" title="單頁式應用"></a>單頁式應用</h1><p>single-page application，縮寫 SPA<br>透過 JS 動態渲染當前頁面來與使用者互動，而非傳統的從伺服器重新載入整個新頁面。這種方法避免了頁面之間切換打斷用戶體驗，使應用程式更像一個桌面應用程式。</p>
<h1 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h1><p>將會改變的區塊使用 router-view 顯示</p>
<a id="more"></a>

<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="設定路由"><a href="#設定路由" class="headerlink" title="設定路由"></a>設定路由</h1><p>將 Home、404 頁面直接一進入就 import，其他頁面使用動態 import 組件，點擊該頁面時，才會載入組件。<br>動態 import 組件 build 時每個頁面會是一支獨立的 JS。<br>如全部頁面直接一進入就 import，頁面一多時會影響效能; 但如果是小專案，頁面很少時，可以直接全部 import，減少 request 的數量。<br>大網站 =&gt; 動態載入，不吃效能<br>小網站 =&gt; 直接載入，減少 request 數量</p>
<p>router index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>; <span class="comment">// 直接 import</span></span><br><span class="line"><span class="keyword">import</span> NotFoundComponent <span class="keyword">from</span> <span class="string">&quot;../views/NotFoundComponent.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/rwd&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;rwd&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Rwd.vue&quot;</span>), <span class="comment">// 動態 import</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/vuejs&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;vuejs&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Vuejs.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/reactjs&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;reactjs&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Reactjs.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/html5&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;html5&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Html5.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/nodejs&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;nodejs&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Nodejs.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/:pathMatch(.*)&quot;</span>, <span class="attr">component</span>: NotFoundComponent &#125;, <span class="comment">// 需放最下面，上面的path都沒有時即顯示此頁面</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>
<h2 id="router-例外處理-404"><a href="#router-例外處理-404" class="headerlink" title="router 例外處理(404)"></a>router 例外處理(404)</h2><p>{ path: “/:pathMatch(.*)”, component: NotFoundComponent }<br>404 頁面的 path 需放最下面，載入時會從上到下開始跑，上面的 path 都沒有 Match 時即會顯示此頁面<br></p>
<h2 id="History-modes"><a href="#History-modes" class="headerlink" title="History modes"></a>History modes</h2><p><b>createWebHashHistory()</b><br>會透過 # 字號來當作網址切換的操作，但是會跟錨點相撞，對 SEO 有不利的影響<br><br><b>createWebHistory()</b><br>需要跟後端搭配重新配置根目錄下的 router，還要自己配置例外處理的頁面例如 404 等</p>
<br>

<h1 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h1><p>設定 router-link 指向連結頁面</p>
<p>header.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rwd&quot;</span>&gt;</span>RWD<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/vuejs&quot;</span>&gt;</span>VUEJS<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/reactjs&quot;</span>&gt;</span>REACTJS<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/html5&quot;</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/nodejs&quot;</span>&gt;</span>NODEJS<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 的 Slot 插槽</title>
    <url>/2021/03/14/vue-slot/</url>
    <content><![CDATA[<h1 id="Slot-插槽"><a href="#Slot-插槽" class="headerlink" title="Slot 插槽"></a>Slot 插槽</h1><p>在子元件上面開個洞， 由外層元件將內容置放在至子層元件指定的位置中<br>可解決樣式一樣，但內容不一樣的組件</p>
<a id="more"></a>

<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SlotsTitle <span class="keyword">from</span> <span class="string">&quot;@/components/SlotsTitle.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    SlotsTitle,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>將組件用 html 寫法有頭有尾包起來，並用 kebab-case(全小寫&amp;dashed)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slots-title</span>&gt;</span>Sunday<span class="tag">&lt;/<span class="name">slots-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slots-title</span>&gt;</span>Monday<span class="tag">&lt;/<span class="name">slots-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slots-title</span>&gt;</span>Tuesday<span class="tag">&lt;/<span class="name">slots-title</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SlotsTitle.vue<br>父層的內容將會插入<slot></slot>之中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../assets/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>Slot</tag>
      </tags>
  </entry>
  <entry>
    <title>透過ref綁定，取得DOM元素</title>
    <url>/2021/03/14/vue-template-refs/</url>
    <content><![CDATA[<h1 id="透過-ref-綁定，取得-DOM-元素"><a href="#透過-ref-綁定，取得-DOM-元素" class="headerlink" title="透過 ref 綁定，取得 DOM 元素"></a>透過 ref 綁定，取得 DOM 元素</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> inputText = ref(<span class="literal">null</span>); <span class="comment">// 變數需跟綁定的ref一樣名稱</span></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      inputText.value.focus(); <span class="comment">// 回傳後即可使用inputText</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      inputText, <span class="comment">// 回傳inputText</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;inputText&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span> // 綁定ref</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>ref</tag>
      </tags>
  </entry>
  <entry>
    <title>vee-validate 4.0 教學，表單驗證套件應用</title>
    <url>/2022/03/29/vue-vee-validate/</url>
    <content><![CDATA[<p><img src="https://imgur.com/0WQXAft.png" alt="vee-validate"></p>
<p>填寫表單時，需要驗證是否必填(require)、或是格式是否正確，自己手刻很複雜，可能也會不夠全面，用套件來做驗證是最省事又快速的。在 Vue2 框架時，我偏好使用 vee-validate 來做驗證，因為它簡單又好用，但到了 Vue3，veeValidate4 怎麼好像是另一個世界惹😱，vee-validate4 該怎麼使用呢</p>
<a id="more"></a>

<h1 id="安裝-vee-validate"><a href="#安裝-vee-validate" class="headerlink" title="安裝 vee-validate"></a>安裝 vee-validate</h1><p>首先先安裝 vee-validate</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add vee-validate</span><br><span class="line"># or</span><br><span class="line">npm i vee-validate --save</span><br></pre></td></tr></table></figure>
<br/>

<p>另外 yup 也是個簡單卻強大的驗證 library，vee-validate 可以結合 yup 一起使用</p>
<p>安裝 yup</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add yup</span><br><span class="line"># or</span><br><span class="line">npm i yup --save</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="使用-vee-validate"><a href="#使用-vee-validate" class="headerlink" title="使用 vee-validate"></a>使用 vee-validate</h1><p>vee-validate 提供了兩種方法，可以使用 components 或是 composition API<br>components: 適合簡單的 UI 組件和具有自定義樣式的原生 HTML 元素，使用 Field、Form 和 ErrorMessage<br>composition API: 適合構建複雜的 UI 表單組件和通用數據驗證，使用 useField、useForm<br>這兩種方式都可以混合使用</p>
<p>我這邊使用的是 composition API + yup 來做驗證</p>
<br/>

<hr>
<p>製作需求:<br>1.取得 API 資料後，會自動把資料帶入到表單<br>2.表單驗證<br>3.取得表單值</p>
<hr>
<h2 id="引入驗證-js、input-元件"><a href="#引入驗證-js、input-元件" class="headerlink" title="引入驗證 js、input 元件"></a>引入驗證 js、input 元件</h2><p>在 main.js 引入全局 (global) 驗證、表單 component input，如果表單只有一頁，可以直接引用在表單頁面<br>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入全局驗證、表單 component input</span></span><br><span class="line"><span class="keyword">import</span> &#123; schema &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/validate.js&#x27;</span>;</span><br><span class="line">app.provide(<span class="string">&#x27;schema&#x27;</span>, schema);</span><br><span class="line"><span class="keyword">import</span> FormInput <span class="keyword">from</span> <span class="string">&#x27;@/components/FormInput.vue&#x27;</span>;</span><br><span class="line">app.component(<span class="string">&#x27;FormInput&#x27;</span>, FormInput);</span><br><span class="line"></span><br><span class="line">app.use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="用-yup-處理驗證格式的-js"><a href="#用-yup-處理驗證格式的-js" class="headerlink" title="用 yup 處理驗證格式的 js"></a>用 yup 處理驗證格式的 js</h2><p>.required 必填<br>.matches 客製驗證格式<br>.oneOf 確認 key 是否相同<br>.min 最少幾位數<br>.max 最多幾位數<br>.nullable 接受 key 為 null</p>
<p>utils/validate.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; object, string, ref, array &#125; <span class="keyword">from</span> <span class="string">&#x27;yup&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> required = <span class="string">&#x27;必填&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> phoneRegExp = <span class="regexp">/^((\\+[1-9]&#123;1,4&#125;[ \\-]*)|(\\([0-9]&#123;2,3&#125;\\)[ \\-]*)|([0-9]&#123;2,4&#125;)[ \\-]*)*?[0-9]&#123;3,4&#125;?[ \\-]*[0-9]&#123;3,4&#125;?$/</span>;</span><br><span class="line"><span class="keyword">const</span> passwordRegExp = <span class="regexp">/[a-zA-Z0-9]/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> schema = object().shape(&#123;</span><br><span class="line">  email: string().required(required).email(<span class="string">&#x27;E-mail輸入錯誤&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  password: string()</span><br><span class="line">    .required(required)</span><br><span class="line">    .min(<span class="number">8</span>, <span class="string">&#x27;密碼最少8位&#x27;</span>)</span><br><span class="line">    .max(<span class="number">20</span>, <span class="string">&#x27;密碼最多20位&#x27;</span>)</span><br><span class="line">    .matches(passwordRegExp, <span class="string">&#x27;請輸入不含符號的半形英文、數字&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  confirmPassword: string()</span><br><span class="line">    .oneOf([ref(<span class="string">&#x27;password&#x27;</span>)], <span class="string">&#x27;輸入密碼不相同&#x27;</span>)</span><br><span class="line">    .required(required),</span><br><span class="line"></span><br><span class="line">  phone: string().matches(phoneRegExp, <span class="string">&#x27;手機輸入錯誤&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  userName: string().nullable().required(required),</span><br><span class="line"></span><br><span class="line">  link: array().of(string().required(<span class="string">&#x27;請輸入標題&#x27;</span>)),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="建立-input-元件"><a href="#建立-input-元件" class="headerlink" title="建立 input 元件"></a>建立 input 元件</h2><p>設定從父層來的 props</p>
<p>components/FormInput.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;input</span><br><span class="line">    :id=&quot;id&quot;</span><br><span class="line">    v-model=&quot;inputValue&quot;</span><br><span class="line">    :name=&quot;name&quot;</span><br><span class="line">    :type=&quot;type&quot;</span><br><span class="line">    :placeholder=&quot;placeholder&quot;</span><br><span class="line">    :maxlength=&quot;maxlength&quot;</span><br><span class="line">    class=&quot;form-control&quot;</span><br><span class="line">    :class=&quot;&#123; &#x27;is-invalid&#x27;: errorMessage &#125;&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>並設定 useField 的值 (value) 跟錯誤訊息 (errorMessage)，會由 name 來判定驗證格式是否正確，watch 是為了取得 API 資料後，會自動把資料帶入到表單，如沒有這個需求可以拿掉</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useField &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    id: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    type: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    modelValue: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    maxlength: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">Infinity</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; <span class="attr">value</span>: inputValue, errorMessage &#125; = useField(</span><br><span class="line">      props.name,</span><br><span class="line">      <span class="literal">undefined</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 設定預設值，如未設定值為 undefined</span></span><br><span class="line">        initialValue: props.modelValue,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得 API 資料後，會自動把資料帶入到表單</span></span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; props.modelValue,</span><br><span class="line">      val =&gt; &#123;</span><br><span class="line">        inputValue.value = val;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      inputValue,</span><br><span class="line">      errorMessage,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="表單頁面"><a href="#表單頁面" class="headerlink" title="表單頁面"></a>表單頁面</h2><p>插入 input component，設定好要傳入的 props</p>
<p>Form.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;FormInput</span><br><span class="line">        :id=&quot;&#x27;userName&#x27;&quot;</span><br><span class="line">        v-model=&quot;memberInfo.data.name&quot;</span><br><span class="line">        :name=&quot;&#x27;userName&#x27;&quot;</span><br><span class="line">        :type=&quot;&#x27;text&#x27;&quot;</span><br><span class="line">        :placeholder=&quot;&#x27;輸入&#x27;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密碼：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;FormInput</span><br><span class="line">        :id=&quot;&#x27;password&#x27;&quot;</span><br><span class="line">        v-model=&quot;password.password&quot;</span><br><span class="line">        :name=&quot;&#x27;password&#x27;&quot;</span><br><span class="line">        :type=&quot;&#x27;password&#x27;&quot;</span><br><span class="line">        :placeholder=&quot;&#x27;輸入&#x27;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;confirmPassword&quot;</span>&gt;</span>確認密碼：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;FormInput</span><br><span class="line">        :id=&quot;&#x27;confirmPassword&#x27;&quot;</span><br><span class="line">        v-model=&quot;password.confirmPassword&quot;</span><br><span class="line">        :name=&quot;&#x27;confirmPassword&#x27;&quot;</span><br><span class="line">        :type=&quot;&#x27;password&#x27;&quot;</span><br><span class="line">        :placeholder=&quot;&#x27;輸入&#x27;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>e-mail：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;FormInput</span><br><span class="line">        :id=&quot;&#x27;email&#x27;&quot;</span><br><span class="line">        v-model=&quot;memberInfo.data.email&quot;</span><br><span class="line">        :name=&quot;&#x27;email&#x27;&quot;</span><br><span class="line">        :type=&quot;&#x27;text&#x27;&quot;</span><br><span class="line">        :placeholder=&quot;&#x27;輸入&#x27;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, idx) in fields&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">:for</span>=<span class="string">&quot;`link$&#123;idx&#125;`&quot;</span>&gt;</span>link&#123;&#123;idx+1&#125;&#125;：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          &lt;FormInput</span><br><span class="line">          :id=&quot;`link[$&#123;idx&#125;]`&quot;</span><br><span class="line">          :name=&quot;`link[$&#123;idx&#125;].url`&quot;</span><br><span class="line">          :type=&quot;&#x27;text&#x27;&quot;</span><br><span class="line">          :placeholder=&quot;&#x27;輸入&#x27;&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;remove(idx)&quot;</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;push(&#123;url: &#x27;&#x27;&#125;)&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Form 表單取值：</span><br><span class="line">    &#123;&#123; values &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>

<p>設定 useForm、useFieldArray<br>useForm 是整個 Form 表單，設定驗證並取值，取到的值 submit 到後端，就資料完成送出啦！<br>useFieldArray 用來設定陣列的 input，可使用內建方法：移除 (remove)、取代 (replace)、新增資料 (push)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useForm, useFieldArray &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> schema = inject(<span class="string">&#x27;schema&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整個 Form 表單</span></span><br><span class="line">    <span class="keyword">const</span> &#123; values &#125; = useForm(&#123;</span><br><span class="line">      validationSchema: schema,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 設定多筆資料的陣列、陣列方法</span></span><br><span class="line">    <span class="keyword">const</span> &#123; replace, remove, push, fields &#125; = useFieldArray(<span class="string">&#x27;link&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> password = reactive(&#123;</span><br><span class="line">      password: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      confirmPassword: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得 API 的資料</span></span><br><span class="line">    <span class="keyword">const</span> publicPath = process.env.BASE_URL;</span><br><span class="line">    <span class="keyword">const</span> getMemberInfo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> axios.get(<span class="string">`<span class="subst">$&#123;publicPath&#125;</span>data/info.json`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> memberInfo = reactive(&#123;</span><br><span class="line">      data: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    getMemberInfo().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      memberInfo.data = res.data;</span><br><span class="line">      <span class="comment">// 取得資料後，將空陣列資料取代為取得後的資料</span></span><br><span class="line">      replace(memberInfo.data.link);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      password,</span><br><span class="line">      memberInfo,</span><br><span class="line">      values,</span><br><span class="line">      remove, push, fields</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.form-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p>資料格式<br>data/info.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;lala9990929@gmail.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;link&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://happy9990929.github.io&quot;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://happy9990929.github.io/gtplay&quot;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- 文章內廣告 -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="5051618728"></ins></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>vee-validate4.0 跟之前的版本差異真的很大，我也是研究了一陣子，如果有哪邊有問題或是有更好的寫法，歡迎路過的大大指正噢🧐<br>👉 附上我的 <a href="https://github.com/happy9990929/vee-validate4">vee-validate4 範例</a><br>最後用可愛的 bobee 做結尾吧！<br><br/><br><img src="https://imgur.com/wXW0AKf.jpg" alt="bobee"></p>
<hr>
<h1 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h1><p><a href="https://vee-validate.logaretm.com/v4/guide/overview">vee-validate 官方</a></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>vee-validate4</tag>
        <tag>veeValidate4 教學</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex &amp; API 資料流整合</title>
    <url>/2021/03/21/vue-vuex-api-example/</url>
    <content><![CDATA[<h1 id="圖片切換範例"><a href="#圖片切換範例" class="headerlink" title="圖片切換範例"></a>圖片切換範例</h1><h2 id="API-抽離管理，清楚管理資料"><a href="#API-抽離管理，清楚管理資料" class="headerlink" title="API 抽離管理，清楚管理資料"></a>API 抽離管理，清楚管理資料</h2><p>axios create 的物件會變成 axios 的實體<br>axios interceptors 攔截器，可以做驗證檢查</p>
<a id="more"></a>

<p>@/api/photoRequest.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create的物件會變成axios的實體</span></span><br><span class="line"><span class="keyword">const</span> photoRequest = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">&quot;https://vue-lessons-api.herokuapp.com/&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios 攔截器，可以做驗證檢查</span></span><br><span class="line"><span class="comment">// 發出 request以前執行</span></span><br><span class="line">photoRequest.interceptors.request.use(</span><br><span class="line">  (config) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">throw</span> &#123; <span class="attr">response</span>: &#123; <span class="attr">data</span>: <span class="string">&quot;資料不得為空&quot;</span> &#125; &#125;;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接到 response 之前執行</span></span><br><span class="line">photoRequest.interceptors.response.use(</span><br><span class="line">  (response) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPhotoRequest = <span class="function">() =&gt;</span> photoRequest.get(<span class="string">&quot;/photo/list&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="api-模組入口"><a href="#api-模組入口" class="headerlink" title="api 模組入口"></a>api 模組入口</h2><p>index.js 做各模組的分類，當成模組的入口，方便管理，components 只需引入 index.js</p>
<p>@/api/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getPhotoRequest &#125; <span class="keyword">from</span> <span class="string">&quot;./photoRequest.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiGetPhotoRequest = getPhotoRequest;</span><br></pre></td></tr></table></figure>
<h2 id="資料管理"><a href="#資料管理" class="headerlink" title="資料管理"></a>資料管理</h2><p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; apiGetPhotoRequest &#125; <span class="keyword">from</span> <span class="string">&quot;../api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    photoArr: [],</span><br><span class="line">    idx: <span class="number">0</span>,</span><br><span class="line">    isLoad: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="comment">// 為確保API資料拿回再進行handImgLoad()，需回傳Promise，axios本身就是一個Promise的回傳</span></span><br><span class="line">    <span class="comment">// async / await 接近同步呼叫</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">handInit</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> apiGetPhotoRequest();</span><br><span class="line">        commit(<span class="string">&quot;init&quot;</span>, res.data);</span><br><span class="line">        <span class="keyword">return</span> res.data;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error.response.data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 上面async等於</span></span><br><span class="line">    <span class="comment">// handInit(&#123; commit &#125;) &#123;</span></span><br><span class="line">    <span class="comment">//   const res = apiGetPhotoRequest();</span></span><br><span class="line">    <span class="comment">//   return res.then((response) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     commit(&quot;init&quot;, response.data);</span></span><br><span class="line">    <span class="comment">//     return response.data;</span></span><br><span class="line">    <span class="comment">//   &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="function"><span class="title">handLoadState</span>(<span class="params">&#123; commit &#125;, bool</span>)</span> &#123;</span><br><span class="line">      commit(<span class="string">&quot;loadState&quot;</span>, bool);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">handAdd</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      commit(<span class="string">&quot;Add&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">handRemove</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      commit(<span class="string">&quot;Remove&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">init</span>(<span class="params">state, payload</span>)</span> &#123;</span><br><span class="line">      state.photoArr = payload;</span><br><span class="line">      <span class="built_in">console</span>.log(state.photoArr);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">loadState</span>(<span class="params">state, bool</span>)</span> &#123;</span><br><span class="line">      state.isLoad = bool;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">Add</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.idx++;</span><br><span class="line">      <span class="keyword">if</span> (state.idx &gt; state.photoArr.length - <span class="number">1</span>) &#123;</span><br><span class="line">        state.idx = <span class="number">0</span>; <span class="comment">// 大於總數量時返回第一張</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">Remove</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.idx--;</span><br><span class="line">      <span class="keyword">if</span> (state.idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        state.idx = state.photoArr.length - <span class="number">1</span>; <span class="comment">//小於0時返回最後一張</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="function"><span class="title">isLoad</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.isLoad;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">photoArr</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.photoArr;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">idx</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.idx;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="組件"><a href="#組件" class="headerlink" title="組件"></a>組件</h2><p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ImageBox <span class="keyword">from</span> <span class="string">&quot;./components/ImageBox/index.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> LoadingBar <span class="keyword">from</span> <span class="string">&quot;./components/LoadingBar.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    LoadingBar,</span><br><span class="line">    ImageBox,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handImgLoad = <span class="function">(<span class="params">imgArr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">      imgArr.forEach(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newImage = <span class="keyword">new</span> Image();</span><br><span class="line">        newImage.src = image.url;</span><br><span class="line">        newImage.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          i++;</span><br><span class="line">          store.dispatch(<span class="string">&quot;handLoadState&quot;</span>, i === imgArr.length);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> init = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(<span class="string">&quot;handInit&quot;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        handImgLoad(res); <span class="comment">// res為handInit回傳的資料</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      init();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">LoadingBar</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ImageBox</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>loading 組件<br>components/LoadingBar.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isLoad = computed(<span class="function">() =&gt;</span> store.getters.isLoad);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; isLoad &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-show</span>=<span class="string">&quot;!isLoad&quot;</span> <span class="attr">class</span>=<span class="string">&quot;load&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../assets/load.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>圖片組件<br>components/ImageBox/index.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ImgShow <span class="keyword">from</span> <span class="string">&quot;./ImgShow.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ChangeBtn <span class="keyword">from</span> <span class="string">&quot;./ChangeBtn.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ImgShow,</span><br><span class="line">    ChangeBtn,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isLoad = computed(<span class="function">() =&gt;</span> store.getters.isLoad);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; isLoad &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isLoad&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ImgShow</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChangeBtn</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>圖片切換按鈕<br>components/ImageBox/ChangeBtn.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> addImg = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(<span class="string">&quot;handAdd&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> removeImg = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(<span class="string">&quot;handRemove&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; addImg, removeImg &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btnbox&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;removeImg&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>上一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;addImg&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>下一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>圖片顯示組件<br>components/ImageBox/ImgShow.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> photoArr = computed(<span class="function">() =&gt;</span> store.getters.photoArr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> idx = computed(<span class="function">() =&gt;</span> store.getters.idx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; photoArr, idx &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &lt;img</span><br><span class="line">    class=&quot;img&quot;</span><br><span class="line">    v-for=&quot;(item, s) in photoArr&quot;</span><br><span class="line">    v-show=&quot;idx === s&quot;</span><br><span class="line">    :key=&quot;item.url&quot;</span><br><span class="line">    :src=&quot;item.url&quot;</span><br><span class="line">    alt=&quot;&quot;</span><br><span class="line">  /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex 資料流，設定Vuex與modules管理</title>
    <url>/2021/03/16/vue-vuex/</url>
    <content><![CDATA[<h1 id="什麼是-Vuex"><a href="#什麼是-Vuex" class="headerlink" title="什麼是 Vuex?"></a>什麼是 Vuex?</h1><p>Vuex 是 Vue 應用程式的狀態管理，組件常會跨結構的傳遞狀態、需要全域狀態的管理，用 Vuex 可以更容易的控管你的資料流。</p>
<a id="more"></a>

<p>沒有用Vuex<br><img src="https://i.imgur.com/yAFf3sQ.png" alt="Imgur"></p>
<p>使用Vuex<br><img src="https://i.imgur.com/Bogdlvu.png" alt="Imgur"></p>
<h1 id="Vuex-的前置作業"><a href="#Vuex-的前置作業" class="headerlink" title="Vuex 的前置作業"></a>Vuex 的前置作業</h1><p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  mutations: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App)</span><br><span class="line">  .use(store) <span class="comment">// 使用store</span></span><br><span class="line">  .mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="State-Getters-Mutations-Actions"><a href="#State-Getters-Mutations-Actions" class="headerlink" title="State Getters Mutations Actions"></a>State Getters Mutations Actions</h1><p>State:<br>🔸 存放資料狀態</p>
<p>Getters:<br>🔸 取得狀態，類似 computed 重組資料<br>🔸 components 不要直接取得 state，先用 getters 去處理資料邏輯，再回傳資料。</p>
<p>Mutations:<br>🔸 唯一改變 state 的方法<br>🔸 只能做同步操作，mutations 不能做非同步操作<br>🔸 mutations 需用 commit 呼叫</p>
<p>Actions:<br>🔸 actions 觸發 mutations，commit 會發送事件給 mutations<br>🔸 actions 才做非同步操作<br>🔸 需用 dispatch 呼叫<br>🔸 不能更改 state</p>
<p>流程: components ➜ dispatch ➜ <code>actions</code> ➜ commit ➜ <code>mutations</code> ➜ <code>state</code> ➜ <code>getters</code> ➜ components</p>
<h2 id="Vuex-範例"><a href="#Vuex-範例" class="headerlink" title="Vuex 範例"></a>Vuex 範例</h2><p>側邊選單收合</p>
<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MenuBtn <span class="keyword">from</span> <span class="string">&quot;../src/components/MenuBtn.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> MenuSlid <span class="keyword">from</span> <span class="string">&quot;../src/components/MenuSlid.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MenuBtn,</span><br><span class="line">    MenuSlid,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MenuBtn</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MenuSlid</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft JhengHei&quot;</span>, <span class="string">&quot;Heiti TC&quot;</span>, <span class="string">&quot;sans-serif&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &gt; .content &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    <span class="selector-tag">height</span>: 100%;</span><br><span class="line">    <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(&quot;<span class="selector-tag">https</span>://<span class="selector-tag">source</span><span class="selector-class">.unsplash</span><span class="selector-class">.com</span>/<span class="selector-tag">WLUHO9A_xik</span>/1600<span class="selector-tag">x900</span>&quot;);</span><br><span class="line">    <span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span>;</span><br><span class="line">    <span class="selector-tag">background-position</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line">    <span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    <span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    isOpen: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// actions觸發mutations，commit會發送事件給mutations</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">handMenuOpen</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// context.state等於store的state</span></span><br><span class="line">      <span class="keyword">const</span> openBool = !context.state.isOpen;</span><br><span class="line">      <span class="comment">// 傳入openBool參數給mutations</span></span><br><span class="line">      context.commit(<span class="string">&#x27;handOpenState&#x27;</span>, openBool);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 只有mutations可以修改state</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 接收actions給的參數openBool，再去改變state的值</span></span><br><span class="line">    <span class="function"><span class="title">handOpenState</span>(<span class="params">state, openBool</span>)</span> &#123;</span><br><span class="line">      state.isOpen = openBool;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 類似computed重組資料，不要直接取得state，先用getters去處理資料邏輯，再回傳資料</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="function"><span class="title">isOpen</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.isOpen;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<p>MenuSlid.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>; <span class="comment">// 所有跟vuex有關的內容</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line">    <span class="comment">// 用computed取得isOpen資料，不要把整個store return出來</span></span><br><span class="line">    <span class="keyword">const</span> isOpen = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> store.getters.isOpen</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> handClickMenu = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(<span class="string">&#x27;handMenuOpen&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; handClickMenu, isOpen &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;menu&#x27;, &#123;open: isOpen&#125; ]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;closeBtn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handClickMenu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-times fa-3x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>abous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>content<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>user<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>address<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>
MenuBtn.vue

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = useStore();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line">    <span class="comment">// 用dispatch觸發一個事件到actions</span></span><br><span class="line">    <span class="keyword">const</span> handClickMenu = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(<span class="string">&#x27;handMenuOpen&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; handClickMenu &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menuBtn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handClickMenu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bars fa-3x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.menuBtn</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="Vuex-結構拆分"><a href="#Vuex-結構拆分" class="headerlink" title="Vuex 結構拆分"></a>Vuex 結構拆分</h1><p>當 Vuex 內容越來越多時，可以拆分檔案，比較好管理</p>
<p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">&#x27;./state.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">&#x27;./actions.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&#x27;./mutations.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state, actions, mutations, getters</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>store/state.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  isOpen: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>store/getters.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">isOpen</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.isOpen;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>store/mutations.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">handOpenState</span>(<span class="params">state, openBool</span>)</span> &#123;</span><br><span class="line">    state.isOpen = openBool;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>store/actions.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">handMenuOpen</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> openBool = !context.state.isOpen;</span><br><span class="line">    context.commit(<span class="string">&#x27;handOpenState&#x27;</span>, openBool);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Vuex-modules"><a href="#Vuex-modules" class="headerlink" title="Vuex modules"></a>Vuex modules</h1><p>module可以依照功能來區分資料<br>設定namespaced在不同的modules可以有一樣的名稱，依照modules名稱做判斷</p>
<p>store/Auth/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    token: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">handSetToken</span>(<span class="params">context, token</span>)</span> &#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;setToken&#x27;</span>, token);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">setToken</span>(<span class="params">state, token</span>)</span> &#123;</span><br><span class="line">      state.token = token;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="function"><span class="title">getToken</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.token;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 因為設定namespaced，前面要加modules名稱Auth/</span></span><br><span class="line">      store.dispatch(<span class="string">&#x27;Auth/handSetToken&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(store.getters[<span class="string">&#x27;Auth/getToken&#x27;</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3基本操作-1</title>
    <url>/2021/03/02/vue3-base1/</url>
    <content><![CDATA[<h1 id="vue-js-的起手式"><a href="#vue-js-的起手式" class="headerlink" title="vue.js 的起手式"></a>vue.js 的起手式</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handAddInt&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> handAddInt = <span class="function">() =&gt;</span> msg.value++;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 變數回傳到模版</span></span><br><span class="line">      msg,</span><br><span class="line">      handAddInt,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">Vue.createApp(App).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>以往 VUE2 使用 new Vue 創建實體，VUE3 使用 createApp 來創建應用程式(App)的實體，並掛載到 DOM 上<br>setup() 放入所有跟 vue.js 相關的操作內容<br>return 放入要回傳到 HTML 的資料<br>透過 ref 讓資料做綁定，ref 需要透過.value 存取資料</p>
<h1 id="ref-amp-reactive"><a href="#ref-amp-reactive" class="headerlink" title="ref &amp; reactive"></a>ref &amp; reactive</h1><h2 id="選擇-ref-還是-reactive"><a href="#選擇-ref-還是-reactive" class="headerlink" title="選擇 ref 還是 reactive"></a>選擇 ref 還是 reactive</h2><p>在大多數情況下兩者可以互相替換使用，主要取決於個人喜好或者團隊習慣，根據具體情況去決定要使用哪個就好</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message.text&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = ref(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> message = reactive(&#123; <span class="attr">text</span>: <span class="string">&quot;hello&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg,</span><br><span class="line">      message,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="ref"><a href="#ref" class="headerlink" title="ref()"></a>ref()</h2><p>可以接受任何型態的資料，但是不會對物件或陣列內部的屬性變動做監聽，需要透過<code>.value</code>存取資料。</p>
<h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive()"></a>reactive()</h2><p>只能接受物件或陣列，可以做深層的監聽，以及訪問資料不需要<code>.value</code></p>
<hr>
<h1 id="v-model-資料雙向綁定"><a href="#v-model-資料雙向綁定" class="headerlink" title="v-model 資料雙向綁定"></a>v-model 資料雙向綁定</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message.text&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message.text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = ref(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> message = reactive(&#123; <span class="attr">text</span>: <span class="string">&quot;hello&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg,</span><br><span class="line">      message,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="v-on-Event-事件綁定"><a href="#v-on-Event-事件綁定" class="headerlink" title="v-on:Event 事件綁定"></a>v-on:Event 事件綁定</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reduceCount&quot;</span>&gt;</span>Reduce<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      count.value++;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> reduceCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      count.value--;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      addCount,</span><br><span class="line">      reduceCount,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h1><p>readonly  就是讓你的  ref  或是  reactive  的資料只可以讀取不可以被修改<br>非常適合用在參數傳遞的時候避免不小心被修改資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, readonly &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> copyCount = readonly(count);</span><br><span class="line">    <span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      copyCount.value++;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> reduceCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      copyCount.value--;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      addCount,</span><br><span class="line">      reduceCount,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>點擊按鈕時 copyCount 無法被修改</p>
<hr>
<h1 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, idx) in dogs&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span>&#123;&#123;idx+1&#125;&#125;-&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dogs = reactive([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;蝴蝶犬&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;柴犬&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;博美犬&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;哈士奇&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;法國鬥牛犬&quot;</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      dogs,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="KEY"><a href="#KEY" class="headerlink" title="KEY"></a>KEY</h2><p>為了不要重複渲染，v-for 必須加上 key，修改資料時就不會全部的 DOM 一起修改<br>使用 v-for 時一定要給 key<br>使用 v-for 時不要拿索引當 key<br>使用唯一的值當 key 的值</p>
<hr>
<h1 id="v-if-與-v-show"><a href="#v-if-與-v-show" class="headerlink" title="v-if 與 v-show"></a>v-if 與 v-show</h1><p>顯示、隱藏 DOM 元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handDomShow&quot;</span>&gt;</span>show text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isShow = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">const</span> text = ref(<span class="string">&quot;hello VUE!&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> handDomShow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isShow.value = !isShow.value;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShow,</span><br><span class="line">      text,</span><br><span class="line">      handDomShow,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>直接將 DOM 從頁面上移除跟加入<br>v-if 可以減少渲染速度的效能<br>可用於權限或一開始就不該出現的區塊<br>如果是 DOM 元素切換的功能，消耗的資源比較高，建議用 v-show</p>
<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>透過 CSS 的 display : none; 跟 display : block; 來顯示關閉<br>v-show 可以提升切換速度效能<br>適合做 tab 切換的功能</p>
<hr>
<h1 id="v-bind-attribute-屬性綁定"><a href="#v-bind-attribute-屬性綁定" class="headerlink" title="v-bind:attribute 屬性綁定"></a>v-bind:attribute 屬性綁定</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;(list, idx) in listArr&quot;</span><br><span class="line">    v-bind:class=&quot;list.status&quot;</span><br><span class="line">    v-bind:key=&quot;list.name&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123;idx + 1&#125;&#125;. &#123;&#123;list.name&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> listArr = reactive([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;蝴蝶犬&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;red&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;柴犬&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;blue&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;博美犬&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;red&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;哈士奇&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;red&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;法國鬥牛犬&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;blue&quot;</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      listArr,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如要綁定兩個以上的 class 可寫成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;[&#x27;box&#x27;, &#123;open: isOpen&#125;]&quot;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>ref</tag>
        <tag>reactive</tag>
        <tag>v-model</tag>
        <tag>v-on</tag>
        <tag>readonly</tag>
        <tag>v-for</tag>
        <tag>v-show</tag>
        <tag>v-if</tag>
        <tag>v-bind</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3基本操作-2</title>
    <url>/2021/03/04/vue3-base2/</url>
    <content><![CDATA[<h1 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h1><h2 id="範例-1-自動長出-menu-高度"><a href="#範例-1-自動長出-menu-高度" class="headerlink" title="範例 1: 自動長出 menu 高度"></a>範例 1: 自動長出 menu 高度</h2><p>計算屬性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;HandListShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>菜單<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: toggleH&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(list, idx) in listArr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;list&quot;</span>&gt;</span>&#123;&#123;list.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, computed &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isOpen = ref(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> listArr = reactive([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;蛋糕&quot;</span>, <span class="attr">money</span>: <span class="number">3200</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;紅茶拿鐵&quot;</span>, <span class="attr">money</span>: <span class="number">100</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;義大利麵&quot;</span>, <span class="attr">money</span>: <span class="number">500</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;玉米濃湯&quot;</span>, <span class="attr">money</span>: <span class="number">300</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;海鮮燉飯&quot;</span>, <span class="attr">money</span>: <span class="number">1600</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;夏威夷披薩&quot;</span>, <span class="attr">money</span>: <span class="number">900</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;牛肉麵&quot;</span>, <span class="attr">money</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;法國麵包&quot;</span>, <span class="attr">money</span>: <span class="number">1800</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> HandListShow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isOpen.value = !isOpen.value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> toggleH = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> isOpen.value ? <span class="string">`<span class="subst">$&#123;listArr.length * <span class="number">40</span>&#125;</span>px`</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isOpen,</span><br><span class="line">      listArr,</span><br><span class="line">      HandListShow,</span><br><span class="line">      toggleH,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Computed-跟-Methods"><a href="#Computed-跟-Methods" class="headerlink" title="Computed 跟 Methods"></a>Computed 跟 Methods</h3><p><strong>computed</strong></p>
<p>會依據計算的資料<strong>進行緩存</strong>，只要你的資料沒有重新被更改，你的 computed 不會被重新計算執行，如不須傳入參數，建議都使用 computed 計算</p>
<p><strong>methods</strong></p>
<p>雖可以達到一樣的效果，但 methods<strong>不會進行緩存</strong>，每次都會重新執行 ，可以<strong>傳入參數</strong>進行處理</p>
<h2 id="範例-2-計算資料"><a href="#範例-2-計算資料" class="headerlink" title="範例 2: 計算資料"></a>範例 2: 計算資料</h2><p>利用 computed 取得資料</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;HandListShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>菜單<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: toggleH&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(list, idx) in newMenu&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;list.menu&quot;</span>&gt;</span>&#123;&#123;list.menu&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, computed &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isOpen = ref(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> listArr = reactive([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;蛋糕&quot;</span>, <span class="attr">money</span>: <span class="number">3200</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;紅茶拿鐵&quot;</span>, <span class="attr">money</span>: <span class="number">100</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;義大利麵&quot;</span>, <span class="attr">money</span>: <span class="number">500</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;玉米濃湯&quot;</span>, <span class="attr">money</span>: <span class="number">300</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;海鮮燉飯&quot;</span>, <span class="attr">money</span>: <span class="number">1600</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;夏威夷披薩&quot;</span>, <span class="attr">money</span>: <span class="number">900</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;牛肉麵&quot;</span>, <span class="attr">money</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;法國麵包&quot;</span>, <span class="attr">money</span>: <span class="number">1800</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> HandListShow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isOpen.value = !isOpen.value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> toggleH = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> isOpen.value ? <span class="string">`<span class="subst">$&#123;listArr.length * <span class="number">40</span>&#125;</span>px`</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newMenu = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> map = listArr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">menu</span>: <span class="string">`<span class="subst">$&#123;item.name&#125;</span>, $: <span class="subst">$&#123;item.money&#125;</span>`</span> &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> map;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isOpen,</span><br><span class="line">      newMenu,</span><br><span class="line">      HandListShow,</span><br><span class="line">      toggleH,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="範例三-資料篩選-Data-Filter"><a href="#範例三-資料篩選-Data-Filter" class="headerlink" title="範例三: 資料篩選 Data Filter"></a>範例三: 資料篩選 Data Filter</h2><p>v-for 跟 v-if 官方不推薦一起使用，會有優先順序的問題，v-if 會先執行，v-for 的值會變 undefined<br>正確的做法應該要先透過 computed 把資料篩選出來後再進行 v-for<br>只要被 computed 重新包裝過後，須使用<code>.value</code>取得資料</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;HandListShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>課程列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: BoxHeight&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(list, idx) in filterData&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;list.money&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;idx + 1&#125;&#125;. &#123;&#123;list.name&#125;&#125; =&gt; $&#123;&#123;list.money&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, computed &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isOpen = ref(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> listArr = reactive([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;蛋糕&quot;</span>, <span class="attr">money</span>: <span class="number">3200</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;紅茶拿鐵&quot;</span>, <span class="attr">money</span>: <span class="number">100</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;義大利麵&quot;</span>, <span class="attr">money</span>: <span class="number">500</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;玉米濃湯&quot;</span>, <span class="attr">money</span>: <span class="number">300</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;海鮮燉飯&quot;</span>, <span class="attr">money</span>: <span class="number">1600</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;夏威夷披薩&quot;</span>, <span class="attr">money</span>: <span class="number">900</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;牛肉麵&quot;</span>, <span class="attr">money</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;法國麵包&quot;</span>, <span class="attr">money</span>: <span class="number">1800</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> filterData = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> filter = listArr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.money &gt; <span class="number">500</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(filter);</span><br><span class="line">      <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> BoxHeight = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 被 computed 重新包裝過後，須使用`.value`取得資料</span></span><br><span class="line">      <span class="keyword">return</span> isOpen.value ? <span class="string">`<span class="subst">$&#123;filterData.value.length * <span class="number">40</span>&#125;</span>px`</span> : <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> HandListShow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isOpen.value = !isOpen.value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isOpen,</span><br><span class="line">      filterData,</span><br><span class="line">      HandListShow,</span><br><span class="line">      BoxHeight,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h1><p>資料監控<br>可帶入兩個參數，如資料被改變會自動執行 callback</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch(要監控的資料, <span class="function">(<span class="params">新資料, 舊資料</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="監控-ref"><a href="#監控-ref" class="headerlink" title="監控 ref"></a>監控 ref</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> idx = ref(<span class="number">0</span>);</span><br><span class="line">    watch(idx, <span class="function">(<span class="params">newIdx, oldIdx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;newIdx:&quot;</span>, newIdx, <span class="string">&quot;oldIdx:&quot;</span>, oldIdx);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      idx.value++;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="監控-reactive"><a href="#監控-reactive" class="headerlink" title="監控 reactive"></a>監控 reactive</h2><p>watch 監控的值為 getter，只能被讀取的值，需透過函式回傳 reactive 的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = reactive(&#123; <span class="attr">idx</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; data.idx, <span class="comment">// watch監控的值為getter，只能被讀取的值</span></span><br><span class="line">      (newIdx, oldIdx) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;newIdx:&quot;</span>, newIdx, <span class="string">&quot;oldIdx:&quot;</span>, oldIdx);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      data.idx++;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="監控整個-Array-或-object"><a href="#監控整個-Array-或-object" class="headerlink" title="監控整個 Array 或 object"></a>監控整個 Array 或 object</h2><p>ref 不能監控整個物件的變動，只能監控單一值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> refObj = ref(&#123; <span class="attr">idx</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> reactiveObj = reactive(&#123; <span class="attr">idx</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    watch(refObj, <span class="function">(<span class="params">newIdx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;ref&quot;</span>, refObj);</span><br><span class="line">    &#125;);</span><br><span class="line">    watch(reactiveObj, <span class="function">(<span class="params">newIdx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;reactiveObj&quot;</span>, reactiveObj);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      refObj.value.idx++;</span><br><span class="line">      reactiveObj.idx++;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; refObj, reactiveObj &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如需使用 ref 做深層監控，可以使用 <strong>deep</strong>，但非常耗效能，不建議使用，建議監控單一值就好</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = ref(&#123; <span class="attr">user</span>: &#123;&#125; &#125;);</span><br><span class="line"></span><br><span class="line">    watch(</span><br><span class="line">      data,</span><br><span class="line">      (newVal) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newVal);</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      data.value.user[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;波比&quot;</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h1><p>不須傳入要監控的值，值在還沒變動時就會開始監控<br>有寫進 watchEffect 的資料都會被讀取，即使是沒有改變的值也會再被 show 出來</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watchEffect &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> numData = reactive(&#123; <span class="attr">idx</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num.value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      num.value++;</span><br><span class="line">      numData.idx++;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="停止-watchEffect-的監控"><a href="#停止-watchEffect-的監控" class="headerlink" title="停止 watchEffect 的監控"></a>停止 watchEffect 的監控</h2><p>給 watchEffect 自定義一個變數，並執行，將會停止 watchEffect</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watchEffect &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> numData = reactive(&#123; <span class="attr">idx</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> stop = watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num.value);</span><br><span class="line">      <span class="keyword">if</span> (num.value &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">        stop(); <span class="comment">// 停止watchEffect</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(timer); <span class="comment">// watchEffect關閉後不會停止setTimeout，需要再clearInterval</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      num.value++;</span><br><span class="line">      numData.idx++;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p>如果這篇筆記有幫助，麻煩請幫我按五下 Liker，給我一點鼓勵唷！按讚是免錢滴 😀</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>VueJs</tag>
        <tag>computed</tag>
        <tag>watch</tag>
        <tag>watchEffect</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuetify與TailwindCSS類別衝突，如何整合Vuetify utility</title>
    <url>/2023/07/15/vuetify-utility/</url>
    <content><![CDATA[<p><img src="https://imgur.com/dG5pAIN.jpg" alt="Vuetify"></p>
<p>Vuetify 是一個基於 Vue.js 的開源 UI 框架，它提供了一系列的預製組件和樣式，讓開發者能夠快速地建立美觀、功能豐富的網頁應用程式。Vuetify 的設計目標是簡化前端開發流程，同時提供一致性的外觀和使用者體驗。</p>
<a id="more"></a>
<br/>
<br/>

<p>近一年來，Vuetify 的下載量也是表現得不錯</p>
<p><img src="https://imgur.com/UiV19RZ.jpg" alt="Vuetify"></p>
<br/>
<br/>
於是我使用了 Vuetify3，並且搭配 TailwindCSS 來做這次的專案

<p>但卻遇到了一個問題．．．<br><br/><br><br/><br>Vuetify 與 TailwindCSS 的樣式互相衝突了！！！😱</p>
<p><img src="https://imgur.com/rtc8PsM.png" alt="Bobbe"></p>
<br/>
<br/>

<p>在設定 mb-1 時，會出現兩個 mb-1<br><br/></p>
<p><img src="https://imgur.com/CWQ0nDY.jpg" alt="Vuetify"><br><br/><br>Vuetify 的類別會被加上 <code>!important</code>，導致 TailwindCSS 都會被蓋掉了</p>
<br/>
<br/>

<p>搜尋了一下解法，TailwindCSS 有支援前綴的方式，如發生命名衝突時，這會是一個好方法，直接在設定檔加上 prefix</p>
<p>tailwind.config.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  prefix: <span class="string">&#x27;tw-&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<p>這麼一來，所有的樣式前面都會被加上 <code>tw-</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tw-text-left</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tw-text-center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tw-text-right</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<p>在加類名時就會變成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tw-text-lg md:tw-text-xl tw-bg-red-500 hover:tw-bg-blue-500&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>
<br/>
但這有個缺點，TailwindCSS 的類名本來就很長了，每個類名再加上 tw- 後，變得又臭又長，不是很美觀 😥

<p>所以我決定還是從 Vuetify 下手！！</p>
<br/>
<br/>

<p>好在爬了幾篇文章後解決了我的問題</p>
<p>只要三個步驟</p>
<ul>
<li>Vuetify 基本設定</li>
<li>安裝 vite-plugin-vuetify，設定 settings.scss 路徑</li>
<li>設定 vuetify utility</li>
</ul>
<br/>
<br/>
<br/>

<h1 id="Vuetify-基本設定"><a href="#Vuetify-基本設定" class="headerlink" title="Vuetify 基本設定"></a>Vuetify 基本設定</h1><p>首先先在進入點加入 Vuetify ，因為我專案需要有一些 icon，所以有加入一些 icon 的檔案，也有針對專案去做一些顏色、breakpoint 的客製設定，這些都可視專案情況加入</p>
<p>main.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./assets/scss/main.scss&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vuetify</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;vuetify/styles&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createVuetify &#125; <span class="keyword">from</span> <span class="string">&quot;vuetify&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> components <span class="keyword">from</span> <span class="string">&quot;vuetify/components&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> directives <span class="keyword">from</span> <span class="string">&quot;vuetify/directives&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fa &#125; <span class="keyword">from</span> <span class="string">&quot;vuetify/iconsets/fa&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; aliases, mdi &#125; <span class="keyword">from</span> <span class="string">&quot;vuetify/lib/iconsets/mdi&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@mdi/font/css/materialdesignicons.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@fortawesome/fontawesome-free/css/all.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vuetify = createVuetify(&#123;</span><br><span class="line">  theme: &#123;</span><br><span class="line">    themes: &#123;</span><br><span class="line">      light: &#123;</span><br><span class="line">        dark: <span class="literal">false</span>,</span><br><span class="line">        colors: &#123;</span><br><span class="line">          primary: <span class="string">&quot;#288a31&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  icons: &#123;</span><br><span class="line">    defaultSet: <span class="string">&quot;mdi&quot;</span>,</span><br><span class="line">    aliases,</span><br><span class="line">    sets: &#123;</span><br><span class="line">      mdi,</span><br><span class="line">      fa,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  display: &#123;</span><br><span class="line">    mobileBreakpoint: <span class="string">&quot;sm&quot;</span>,</span><br><span class="line">    thresholds: &#123;</span><br><span class="line">      xs: <span class="number">0</span>,</span><br><span class="line">      sm: <span class="number">640</span>,</span><br><span class="line">      md: <span class="number">768</span>,</span><br><span class="line">      lg: <span class="number">1024</span>,</span><br><span class="line">      xl: <span class="number">1280</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components,</span><br><span class="line">  directives,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.use(vuetify);</span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h1 id="安裝-vite-plugin-vuetify，設定-settings-scss-路徑"><a href="#安裝-vite-plugin-vuetify，設定-settings-scss-路徑" class="headerlink" title="安裝 vite-plugin-vuetify，設定 settings.scss 路徑"></a>安裝 vite-plugin-vuetify，設定 settings.scss 路徑</h1><p>接著要先安裝 vite-plugin-vuetify，並設定 styles 設定檔的路徑</p>
<p>vite.config.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vuetify <span class="keyword">from</span> <span class="string">&quot;vite-plugin-vuetify&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    vue(),</span><br><span class="line">    vuetify(&#123;</span><br><span class="line">      styles: &#123; <span class="attr">configFile</span>: <span class="string">&quot;src/assets/scss/settings.scss&quot;</span> &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br/>
<br/>

<h1 id="設定-vuetify-utility"><a href="#設定-vuetify-utility" class="headerlink" title="設定 vuetify utility"></a>設定 vuetify utility</h1><p>新增一個 settings.scss 檔案並設定 vuetify utility，我們可以針對不需要使用的 utility 來做關閉，在這邊我關閉了 vuetify 對 margin 和 padding 的相關類別</p>
<p>除此之外也可以調整變數的預設值 🥳</p>
<p>src/assets/scss/settings.scss</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">@use <span class="string">&#x27;vuetify/settings&#x27;</span> <span class="keyword">with</span> (</span><br><span class="line">  $utilities: (</span><br><span class="line">    margin: <span class="literal">false</span>,</span><br><span class="line">    margin-x: <span class="literal">false</span>,</span><br><span class="line">    margin-y: <span class="literal">false</span>,</span><br><span class="line">    margin-top: <span class="literal">false</span>,</span><br><span class="line">    margin-bottom: <span class="literal">false</span>,</span><br><span class="line">    margin-left: <span class="literal">false</span>,</span><br><span class="line">    margin-right: <span class="literal">false</span>,</span><br><span class="line">    margin-start: <span class="literal">false</span>,</span><br><span class="line">    margin-end: <span class="literal">false</span>,</span><br><span class="line">    negative-margin: <span class="literal">false</span>,</span><br><span class="line">    negative-margin-x: <span class="literal">false</span>,</span><br><span class="line">    negative-margin-y: <span class="literal">false</span>,</span><br><span class="line">    negative-margin-top: <span class="literal">false</span>,</span><br><span class="line">    negative-margin-bottom: <span class="literal">false</span>,</span><br><span class="line">    negative-margin-left: <span class="literal">false</span>,</span><br><span class="line">    negative-margin-right: <span class="literal">false</span>,</span><br><span class="line">    negative-margin-start: <span class="literal">false</span>,</span><br><span class="line">    negative-margin-end: <span class="literal">false</span>,</span><br><span class="line">    padding: <span class="literal">false</span>,</span><br><span class="line">    padding-x: <span class="literal">false</span>,</span><br><span class="line">    padding-y: <span class="literal">false</span>,</span><br><span class="line">    padding-top: <span class="literal">false</span>,</span><br><span class="line">    padding-bottom: <span class="literal">false</span>,</span><br><span class="line">    padding-left: <span class="literal">false</span>,</span><br><span class="line">    padding-right: <span class="literal">false</span>,</span><br><span class="line">    padding-start: <span class="literal">false</span>,</span><br><span class="line">    padding-end: <span class="literal">false</span>,</span><br><span class="line">    negative-padding: <span class="literal">false</span>,</span><br><span class="line">    negative-padding-x: <span class="literal">false</span>,</span><br><span class="line">    negative-padding-y: <span class="literal">false</span>,</span><br><span class="line">    negative-padding-top: <span class="literal">false</span>,</span><br><span class="line">    negative-padding-bottom: <span class="literal">false</span>,</span><br><span class="line">    negative-padding-left: <span class="literal">false</span>,</span><br><span class="line">    negative-padding-right: <span class="literal">false</span>,</span><br><span class="line">    negative-padding-start: <span class="literal">false</span>,</span><br><span class="line">    negative-padding-end: <span class="literal">false</span>,</span><br><span class="line">  ),</span><br><span class="line">  $messages-font-size: 14px,</span><br><span class="line">  $input-control-height: 32px,</span><br><span class="line">  $field-focused-border-width: 1px</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>完全解決了我的問題 🥳🥳🥳</p>
<p>這麼一來就不會有類別覆蓋的問題，也可以結合兩邊的好用之處</p>
<p>大功告成囉！！</p>
<br/>
<br/>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://vuetifyjs.com/en/features/sass-variables">VUETIFY</a></p>
<p><a href="https://medium.com/@pierremriau/how-to-replace-vuetify-utility-classes-with-tailwindcss-9a3ebaa21f4f">How to replace Vuetify utility classes with TailwindCSS</a></p>
<p><a href="https://npmtrends.com/bootstrap-vue-vs-element-ui-vs-vuetify">npm trends</a></p>
]]></content>
      <categories>
        <category>Vuetify</category>
      </categories>
      <tags>
        <tag>Vuetify</tag>
        <tag>Vuetify utility</tag>
        <tag>Vuetify TailwindCSS</tag>
        <tag>TailwindCSS</tag>
        <tag>Vuetify TailwindCSS conflict</tag>
      </tags>
  </entry>
  <entry>
    <title>前端下載 Excel 文件，Blob 物件使用</title>
    <url>/2022/12/22/web-excel/</url>
    <content><![CDATA[<p><img src="https://imgur.com/4j1mXwJ.jpg" alt="Excel"></p>
<p>在做一些後台的報表數據時，可能會遇到，點擊【下載】按鈕後，直接實現下載 Excel 文件功能。</p>
<a id="more"></a>

<p><img src="https://imgur.com/Qn6fnew.jpg" alt="Excel"></p>
<p>前端需要解析後端返回的二進制流文件，返回新建立的 Blob 物件，再創建 a 標籤，利用 a 標籤的 href 屬性，載入數據流，同時還可以自定義文件名稱。<br><br><br><br></p>
<h1 id="API-設定-responseType"><a href="#API-設定-responseType" class="headerlink" title="API 設定 responseType"></a>API 設定 <code>responseType</code></h1><p>Axios api</p>
<p>在 API 的地方加上 <code>responseType: &#39;blob&#39;</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">exportExcel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/excel/file&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    responseType: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="建立-Blob"><a href="#建立-Blob" class="headerlink" title="建立 Blob"></a>建立 Blob</h1><p><code>var aBlob = new Blob( array, options );</code></p>
<ul>
<li><p>array 可以是一個由 ArrayBuffer、ArrayBufferView、Blob 組成的 Array 物件，或是上述多種型別物件的混合陣列。這個陣列將會被放進新建立的 <code>Blob</code> 物件當中。DOMStrings 的編碼為 UTF-8。</p>
</li>
<li><p>options 是選擇性的 BlobPropertyBag 字典物件，有以下兩個指定的屬性：</p>
<ul>
<li><code>type</code> 屬性，預設值為空字串 <code>&quot;&quot;</code>，表示將被放進 <code>Blob</code> 物件的陣列內容之 MIME 類型。</li>
<li><code>endings</code> 屬性，表示包含 <code>\n</code> 換行字元的字串要如何輸出，預設值為字串 <code>&quot;transparent&quot;</code>。此屬性值可為：<code>&quot;native&quot;</code>，代表換行字元會被轉為目前作業系統的換行字元編碼。也可以是 <code>&quot;transparent&quot;</code>，代表保留 <code>Blob</code> 物件中資料的換行字元。<br>
<br>

</li>
</ul>
</li>
</ul>
<h2 id="自訂檔名"><a href="#自訂檔名" class="headerlink" title="自訂檔名"></a>自訂檔名</h2><p>可以利用 download 屬性來自定義下載檔案名稱</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">downloadExcel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> exportExcel();</span><br><span class="line">    <span class="keyword">const</span> url = URL.createObjectURL(<span class="keyword">new</span> Blob([res], &#123;</span><br><span class="line">      type: <span class="string">&#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span>,</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    link.href = url;</span><br><span class="line">    link.download = <span class="string">&#x27;文件檔案名稱&#x27;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(link);</span><br><span class="line">    link.click();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<br>
<br>

<h2 id="抓-content-disposition-取得檔名"><a href="#抓-content-disposition-取得檔名" class="headerlink" title="抓 content-disposition 取得檔名"></a>抓 content-disposition 取得檔名</h2><p>抓取 header 的 content-disposition 填入檔案名稱</p>
<p>如瀏覽器支援 <code>filename*=UTF-8</code> 則顯示此檔名</p>
<p>如不支援則顯示 <code>filename=</code> 的檔名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">downloadExcel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> exportExcel();</span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data], &#123; <span class="attr">type</span>: res.data.type &#125;);</span><br><span class="line">    <span class="keyword">const</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">    <span class="keyword">const</span> disposition = res.headers[<span class="string">&#x27;content-disposition&#x27;</span>];</span><br><span class="line">    <span class="keyword">const</span> filenameDecode = <span class="built_in">decodeURIComponent</span>(disposition).split(<span class="string">&quot;filename*=UTF-8&#x27;&#x27;&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> filename = disposition.split(<span class="string">&#x27;filename=&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    link.href = url;</span><br><span class="line">    <span class="keyword">if</span> (filenameDecode) &#123;</span><br><span class="line">      link.download = filenameDecode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      link.download = filename;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(link);</span><br><span class="line">    link.click();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<br>
<br>

<h1 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h1><p><a href="https://juejin.cn/post/7094547886548992030">前端下载excel文件</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Blob/Blob">MDN</a></p>
]]></content>
      <categories>
        <category>網頁程式技術探討</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>Blob</tag>
      </tags>
  </entry>
  <entry>
    <title>認識 HTTP Header</title>
    <url>/2022/01/02/web-http-header/</url>
    <content><![CDATA[<p><img src="https://imgur.com/w3Kil1b.png" alt="HTTP HEADER"></p>
<p>上次被後端問了關於 Header 的問題，發現我對這 HTTP 的知識薄弱，實在慚愧🥺，馬上上網科普一下，<br>好在找到了<a href="https://www.youtube.com/watch?v=qTpw9EKEeqk">偷米騎巴哥</a>大大分享的直播影片，以下是從影片內容裡整理的資料，筆記記錄一下</p>
<a id="more"></a>

<p>HTTP 是通訊協定，電腦與電腦溝通的語言</p>
<h1 id="前端為何要了解-HTTP"><a href="#前端為何要了解-HTTP" class="headerlink" title="前端為何要了解 HTTP"></a>前端為何要了解 HTTP</h1><p>🔸 前端經常需要與後端合作<br>🔸 釐清責任歸屬<br>🔸 了解瀏覽器運作原理</p>
<br />

<h1 id="什麼是-HTTP-Header"><a href="#什麼是-HTTP-Header" class="headerlink" title="什麼是 HTTP Header"></a>什麼是 HTTP Header</h1><p>🔸 傳送內容以外的資訊<br>內容是什麼格式? 內容有多大? 內容多久後過期?…等等<br>內容為 HTML、圖片、字型、CSS、JavaScript、JSON…等等</p>
<p>🔸 Header 一定在內容前面</p>
<p>🔸 細分 Genaral Header、Request/Response Header、Entity Header</p>
<br />

<h1 id="如何將資料傳送到對方電腦"><a href="#如何將資料傳送到對方電腦" class="headerlink" title="如何將資料傳送到對方電腦"></a>如何將資料傳送到對方電腦</h1><p>TCP/IP 協定(Transmission Control Protocol / Internet Protocol)<br>網際網路協議套組，是一個網路通訊模型，以及一整個網路傳輸協定家族，為網際網路的基礎通訊架構。</p>
<p>TCP/IP 包含了四種表現層，常被視為是簡化的七層OSI模型</p>
<p><img src="https://media.slid.es/uploads/275963/images/4907985/osi_tcpip.jpg" alt="TCP/IP"></p>
<br />
資料傳遞的過程中，每一層都會有一個 header，傳送後，會再一層一層慢慢拆解 header
<br /><br />

<p><img src="https://media.slid.es/uploads/275963/images/4907983/0913wtdosipromo.gif" alt="傳遞資料"></p>
<p>TCP：會切割封包，接收時確認是不是資料都有收到<br>IP：確認資料封包要送去哪個 IP 位址，電腦和網路設備不認得網址只認得 IP<br>DNS Server：把網址轉換成 IP 位址</p>
<p>瀏覽器會傳網址給 DNS 伺服器，透過 DNS 轉成 IP 回來，再用 TCP/IP 傳送 IP，找到伺服器，再傳遞 Response 回來<br><img src="https://imgur.com/OAteH8R.png" alt="傳遞資料"></p>
<br />

<h1 id="HTTP-Header-種類"><a href="#HTTP-Header-種類" class="headerlink" title="HTTP Header 種類"></a>HTTP Header 種類</h1><p>🔸 Request Header 客戶端要求伺服器時傳送<br>🔸 Response Header 伺服器回應客戶端時傳送<br>有發送請求，就必會有回應 (只要伺服器正常運作)</p>
<br />

<h1 id="常見的-Request-Header"><a href="#常見的-Request-Header" class="headerlink" title="常見的 Request Header"></a>常見的 Request Header</h1><p>🔸 Host<br>瀏覽器存取的Host名稱，因為一個IP可以綁訂多個不同Domain，此時就需要Host知道要對應到哪個伺服器</p>
<p>🔸 User-Agent<br>瀏覽器名稱和版本&amp;作業系統名稱和版本</p>
<p>🔸 Accept<br>瀏覽器接受的類型，ex: text/plain、text/html</p>
<p>🔸 Accept-Language<br>瀏覽器接受的語言，q值表示語言優先的權重</p>
<p>🔸 Accept-Encoding<br>瀏覽器支援的壓縮格式，大部分流覽器都支援gzip壓縮，伺服器則會壓縮內容後傳給瀏覽器，節省下載時間和頻寬</p>
<p>🔸 Date<br>傳送瀏覽器時間給伺服器，讓伺服器知道瀏覽器目前的時間</p>
<p>🔸 Expect<br>要求伺服器回應特定結果，期望可以給想要的結果，但最終還是由伺服器決定，ex: 100-continue</p>
<p>🔸 If-Modified-Since<br>瀏覽器cache檔案，下一次request則會發送此header，伺服器使用這個時間來判斷是否修改過檔案，沒有則會回傳304<br>If-Modified-Since (時間)<br>If-None-Match (Hash Code)</p>
<p>🔸 Cookie<br>把瀏覽器的cookie傳給伺服器，每一個request都會包含cookie</p>
<p>🔸 Referer<br>瀏覽器前一個瀏覽頁面的網址，可用此header判斷request的來源，但是不可靠，因為可能被遭到串改<br>(原應為referrer因為拼錯了只好將錯就錯)</p>
<p>🔸 Connection<br>可以設定Keep-Alive保持連線時間，減少重新連接TCP連線次數，提高傳輸效率</p>
<p>🔸 Content-Type<br>指傳送內容的格式，常見格式為：<br>表單: application/x-www-form-urlencoded<br>檔案上傳: multipart/form-data; boundary=–xxx<br>純文字內容: text/plain</p>
<p>🔸 Authorization<br>HTTP 連線的身分驗證(帳號、密碼)</p>
<p>🔸 Upgrade<br>升級到另外一個協定，ex: websocket</p>
<br />

<h1 id="常見的-Response-Header"><a href="#常見的-Response-Header" class="headerlink" title="常見的 Response Header"></a>常見的 Response Header</h1><p>🔸 Etag<br>產生檔案的Hash Code給瀏覽器，下一次瀏覽器可以傳送If-None-Match給伺服器判斷是否有修改過檔案，沒有則回傳304並且不會包含content</p>
<p>🔸 Last-Modified<br>回傳檔案最後修改的時間，下一次瀏覽器可以傳送If-Modified-Since給伺服器判斷是否有修改過檔案，沒有則回傳304並且不會包含content</p>
<p>🔸 Catch-Control<br>快取檔案的策略，max-age 則表示該檔案有效的cache秒數，no-cache 則表示不使用快取</p>
<p>🔸 Content-Type<br>回傳content的mime類型，當content-type設為text/html和text/plain可同時設定charset文字編碼格式，若無content-type瀏覽器自動判斷</p>
<p>🔸 Content-Disposition<br>讓瀏覽器可以打開下載視窗並且指定檔案名稱，例如：Content-Disposition: attachment; filename=”download.zip”</p>
<p>🔸 Content-length<br>取得下載傳送內容的大小，讓瀏覽器可以判斷下載的進度</p>
<p>🔸 Date<br>傳送伺服器時間給瀏覽器，讓瀏覽器知道伺服器目前的時間</p>
<p>🔸 Location<br>當狀態碼為301或302時，瀏覽器則會重新導向到Location這個位置</p>
<p>🔸 Set-Cookie<br>設定瀏覽器的cookie，當瀏覽器收到此header則會建立cookie在瀏覽器中</p>
<p>🔸 Content-Encoding<br>回傳內容的壓縮格式，讓瀏覽器知道該如何解壓縮內容</p>
<p>🔸 Access-Control-Allow-Origin<br>准許跨網域存取的Domain，全部網域使用*字號表示<br>script和link標籤不再此限</p>
<p>🔸 X-Frame-Options<br>否能夠在 frame、iframe 以及 object 載入，網站可以利用 X-Frame-Options 來確保本身內容不會遭惡意嵌入道其他網站、避免 clickjacking 攻擊<br>SAMEORIGIN 只限相同域名，跨域無法載入</p>
<p>🔸 Upgrade<br>確認升級到新的協定，此時connection也會同時回應Upgrade<br>ex: Connection: Upgrade<br>Upgrade: websocket</p>
<br />

<h1 id="WebSocket-雙向溝通"><a href="#WebSocket-雙向溝通" class="headerlink" title="WebSocket (雙向溝通)"></a>WebSocket (雙向溝通)</h1><p>🔸 Header 傳送 Upgrade: websocket<br>🔸 伺服器回應 101 切換協定<br>🔸 建立一個保持連線的狀態，連線會更即時、更快速<br>🔸 建立雙向的通道，可任意的作資料傳遞<br>🔸 即不需要送一個 request 即回一個 response，可一直丟<br>🔸 伺服器能承受的連線數量要很高，通常會作 load balance</p>
<hr>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://www.youtube.com/watch?v=qTpw9EKEeqk">偷米騎巴哥HTTP header &amp; Status code</a><br><a href="https://ithelp.ithome.com.tw/articles/10212102">HTTP Header &amp; Status Code 心得</a></p>
<hr>
]]></content>
      <categories>
        <category>網頁程式技術探討</category>
      </categories>
      <tags>
        <tag>HTTP Header</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP 狀態碼</title>
    <url>/2021/08/07/web-http-status-code/</url>
    <content><![CDATA[<p><img src="https://imgur.com/8GHhzql.jpg" alt="Imgur"></p>
<h1 id="什麼是-HTTP-狀態碼-HTTP-Status-Codes"><a href="#什麼是-HTTP-狀態碼-HTTP-Status-Codes" class="headerlink" title="什麼是 HTTP 狀態碼(HTTP Status Codes)?"></a>什麼是 HTTP 狀態碼(HTTP Status Codes)?</h1><p>HTTP 狀態碼是伺服器對瀏覽器請求回應(HTTP Response)的狀態，由 RFC 2616 規範定義的，並得到 RFC 2518、RFC 2817、RFC 2295、RFC 2774 與 RFC 4918 等規範擴充。伺服器用一個三位數的代碼來回應瀏覽器的請求，狀態的分類可區分三個層級，第一個數字為大類、第二個數字為中類、第三個數字為小類。</p>
<a id="more"></a>

<p>了解狀態代碼以及如何使用它們將有助於快速診斷網站錯誤</p>
<h2 id="HTTP-狀態碼大致分成-5-類"><a href="#HTTP-狀態碼大致分成-5-類" class="headerlink" title="HTTP 狀態碼大致分成 5 類"></a>HTTP 狀態碼大致分成 5 類</h2><p>1xx Informationa - 參考資訊<br>2xx Successful - 成功<br>3xx Redirection - 重新導向<br>4xx Client Error - 用戶端錯誤<br>5xx Server Error - 伺服器錯誤</p>
<h3 id="1xx-Informational-參考資訊"><a href="#1xx-Informational-參考資訊" class="headerlink" title="1xx Informational 參考資訊"></a>1xx Informational 參考資訊</h3><p>這些狀態碼代表請求已被接受，需要繼續處理，這類回應是臨時回應，所以在接收一般的回應之前，用戶端應準備接收一個或多個 1xx 的回應，等待伺服器採取進一步行動。</p>
<p>100 Continue - 繼續執行所發出的請求<br>101 Switching Protocols - 切換通訊協定</p>
<h3 id="2xx-Successful-成功"><a href="#2xx-Successful-成功" class="headerlink" title="2xx Successful 成功"></a>2xx Successful 成功</h3><p>這類的狀態碼表示伺服器成功接收到用戶端的要求、理解並接受。</p>
<p>200 OK - 確定。用戶端要求成功<br>201 Created - 請求已經被實現<br>202 Accepted - 伺服器已接受請求，但尚未處理<br>203 Non-Authoritative Information - 非授權資訊<br>204 No Content - 無內容，伺服器成功處理了請求，沒有返回任何內容<br>205 Reset Content - 重設內容，伺服器成功處理了請求，但沒有返回任何內容。與 204 回應不同，此回應要求請求者重設文件視圖<br>206 Partial Content - 伺服器已經成功處理了部分 GET 請求<br>207 Multi-Status - 代表之後的訊息體將是一個 XML 訊息，並且可能依照之前子請求數量的不同，包含一系列獨立的回應代碼<br>208 Already Reported - DAV 繫結的成員已經在（多狀態）回應之前的部分被列舉，且未被再次包含<br>226 IM Used - 伺服器已經滿足了對資源的請求，對實體請求的一個或多個實體操作的結果表示</p>
<h3 id="3xx-Redirection-重新導向"><a href="#3xx-Redirection-重新導向" class="headerlink" title="3xx Redirection 重新導向"></a>3xx Redirection 重新導向</h3><p>用戶端瀏覽器必須採取進一步的操作才能完成要求。這些狀態碼用來重新導向，例如瀏覽器可能必須重新發出 HTTP Request 要求伺服器上的不同頁面。客戶端應當自動監測無限迴圈重新導向（例如：A→B→C→……→A 或 A→A），因為這會導致伺服器和客戶端大量不必要的資源消耗。按照 HTTP/1.0 版規範的建議，瀏覽器不應自動存取超過 5 次的重新導向。</p>
<p>300 Multiple Choices - 被請求的資源有一系列可供選擇的回饋資訊，每個都有自己特定的位址和瀏覽器驅動的商議資訊。使用者或瀏覽器能夠自行選擇一個首選的位址進行重新導向<br>301 Moved Permanently - 要求的網頁已經永久改變網址。此狀態要求用戶端未來在連結此網址時應該導向至指定的 URI<br>302 Found - 要求客戶端執行臨時重新導向<br>303 See Other - 通知用戶端使用 GET 連到另一個 URI 去查看<br>304 Not Modified - 未修改。用戶端要求該網頁時，其內容並沒有變更<br>305 Use Proxy - 要求的網頁必須透過 Server 指定的 proxy 才能查看(需透過 Location 標頭)<br>306 Switch Proxy - 在最新版的規範中，306 狀態碼已經不再被使用。最初是指「後續請求應使用指定的代理」<br>307 Temporary Redirect - 在這種情況下，請求應該與另一個 URI 重複，但後續的請求應仍使用原始的 URI。 與 302 相反，當重新發出原始請求時，不允許更改請求方法。 例如，應該使用另一個 POST 請求來重複 POST 請求</p>
<h3 id="4xx-Client-Error-用戶端錯誤"><a href="#4xx-Client-Error-用戶端錯誤" class="headerlink" title="4xx Client Error 用戶端錯誤"></a>4xx Client Error 用戶端錯誤</h3><p>這代表錯誤發生，且這錯誤的發生的原因跟「用戶端」有關，妨礙了伺服器的處理。例如：用戶端可能連結到不存在的頁面、用戶端的權限不足、或可能未提供有效的驗證資訊(輸入的帳號、密碼錯誤)。</p>
<p>400 Bad Request - 錯誤的要求<br>401 Unauthorized - 拒絕存取<br>402 Payment Required - 該狀態碼是為了將來可能的需求而預留的。該狀態碼最初的意圖可能被用作某種形式的數字現金或線上支付方案的一部分，但幾乎沒有哪家服務商使用，而且這個狀態碼通常不被使用<br>403 Forbidden - 伺服器已經理解請求，但是拒絕執行它<br>404 Not Found - 找不到，請求失敗，請求所希望得到的資源未被在伺服器上發現，但允許使用者的後續請求<br>405 Method Not Allowed - 用來存取這個頁面的 HTTP 動詞不受允許 (方法不受允許)<br>406 Not Acceptable - 用戶端瀏覽器不接受要求頁面的 MIME 類型<br>407 Proxy Authentication Required - 需要 Proxy 驗證<br>408 Request Timeout - 請求逾時<br>409 Conflict - 資源狀態衝突<br>410 Gone - 資源已不存在且無轉址資訊<br>411 Length Required - 要求的 Content-Length 沒有定義<br>412 Precondition Failed - 指定條件失敗<br>413 Request Entity Too Large - 要求的實體太大<br>414 Request-URI Too Long - 要求 URI 太長。會因伺服器或瀏覽器而異，建議 2048 字元以下比較保險<br>415 Unsupported Media Type - 不支援的媒體類型<br>416 Requested Range Not Satisfiable - 無法滿足要求的範圍<br>417 Expectation Failed - 執行失敗</p>
<h3 id="5xx-Server-Error-伺服器錯誤"><a href="#5xx-Server-Error-伺服器錯誤" class="headerlink" title="5xx Server Error 伺服器錯誤"></a>5xx Server Error 伺服器錯誤</h3><p>這代表錯誤發生，且這錯誤發生的原因跟「伺服器」有關。伺服器因為發生錯誤或例外狀況(Exception)而無法完成要求(Request)時，就會回應 5xx 的錯誤，且這肯定跟伺服器有關。</p>
<p>500 Internal Server Error - 內部伺服器錯誤。<br>501 Not Implemented – 標頭值指定未實作的設定。<br>502 Bad Gateway - Web 伺服器在作為閘道或 Proxy 時收到無效的回應。<br>503 Service Unavailable - 服務無法使用。 這是 IIS 6.0 專用的錯誤碼。<br>504 Gateway Timeout - 閘道逾時。<br>505 HTTP Version Not Supported - 不支援的 HTTP 版本。</p>
<hr>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://blog.poychang.net/http-status-code/">HTTP 狀態碼一覽表</a><br><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP 狀態碼</a></p>
<hr>
]]></content>
      <categories>
        <category>網頁程式技術探討</category>
      </categories>
      <tags>
        <tag>HTTP 狀態碼</tag>
        <tag>HTTP Status Codes</tag>
      </tags>
  </entry>
  <entry>
    <title>網址 HTTPS 和 HTTP 的差別，為什麼 SSL 很重要</title>
    <url>/2021/08/07/web-https/</url>
    <content><![CDATA[<p><img src="https://imgur.com/aJkfXyD.jpg" alt="Imgur"><br>在拜訪網站時，你有沒有曾經看過這個畫面呢?<br>這是瀏覽器針對 HTTP 網址，對使用者發出的「<strong>不安全</strong>」提示，藉此來要求網站開發者盡快將網站轉為透過 HTTPS 傳輸資料<br><br/><br><br/></p>
<a id="more"></a>

<h1 id="HTTP-和-HTTPS-有什麼差別"><a href="#HTTP-和-HTTPS-有什麼差別" class="headerlink" title="HTTP 和 HTTPS 有什麼差別?"></a>HTTP 和 HTTPS 有什麼差別?</h1><p>HTTP 與 HTTPS 差了一個 S，這個 S 代表網站使用<strong>編碼協定的安全性</strong>(Secure)，兩者之間的不同在於網路文字傳送協定中標準的不同<br><br/><br><br/></p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><strong>超文本傳輸協定 (Hyper Text Transfer Protocol)</strong><br>HTTP 是以 TCP 作為網路資料傳輸的方式，因為內容只規範了客戶端請求與伺服器回應的標準，在傳輸資料的過程中，因為沒有完善的安全機制，容易被惡意程式竊取，造成資料外洩。<br><br/><br><br/></p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p><strong>超文本傳輸安全協定 (Hyper Text Transfer Protocol Secure)</strong><br>加入 <a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A">SSL/TLS</a> 協定作為安全憑證，以保密為前提為研發，可以算是 HTTP 的進階安全版，多了一道加密的手續，如此一來就算有心人士要竊取，看到的也只是加密符號或一堆亂碼而已。<br>由於加密需要運算的資料較多，導致傳遞回應較慢，後來才又發明金鑰功能，讓網路資料在進行傳輸時兼顧了安全性及傳遞速度。<br><br></p>
<p><strong>HTTPS 優點</strong></p>
<ul>
<li>安全性：使用加密技術來保護資料傳輸，防止資料被竊取或竄改。</li>
<li>可靠性：可以確保資料完整性，防止資料在傳輸過程中被損壞。</li>
<li>信任度：可以提高使用者對網站的信任度，提升網站的品牌形象。</li>
<li>SEO 排名：Google 等搜尋引擎會優先排名 HTTPS 網站，有利於網站的 SEO 排名。<br>
<br>

</li>
</ul>
<h1 id="我的網站需要-HTTPS-嗎"><a href="#我的網站需要-HTTPS-嗎" class="headerlink" title="我的網站需要 HTTPS 嗎"></a>我的網站需要 HTTPS 嗎</h1><p>你可能會想說：「我的網站不需要輸入帳密，也不用輸入信用卡的個人資料，只是純瀏覽的網頁，應該不用設定 HTTPS 吧？」<br>.<br>..<br>…<br><img src="https://imgur.com/GFL68vJ.jpg" alt="Imgur"><br>…<br>..<br>.<br>NONONO！這對網站會造成影響的啊！！！<br>由於安全性的考量，現今的瀏覽器會針對 HTTP 網頁特別標註為<code>不安全</code>的網站，當使用者拜訪時跳出這個訊息，有可能就隨即關閉，因此都<strong>不利於 SEO 的排名</strong>，連瀏覽器的網址列上，也會標示出目前網站是 HTTP 或 HTTPS(加密)。</p>
<div>◆ HTTP：網站的連線不安全</div>

<p><img src="https://imgur.com/vtzcvaF.jpg" alt="HTTP"><br><br></p>
<div>◆ HTTPS：已建立安全連線</div>

<p><img src="https://imgur.com/oiVmG4s.jpg" alt="HTTPS"></p>
<br>
<br>

<p>因此，HTTPS 的網站的搜尋排名，通常都比 HTTP 網站的排名來得高。<br>基於安全性和 SEO 優化的考量，這也是為什麼現在大多數的網站都是 HTTPS 的原因。<br><br><br><br></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>綜合以上所述，HTTPS 是一種更加安全、可靠的網路傳輸協定。無論是為了保障資料安全，還是為了提升網站的 SEO 排名，都應該將網站轉為 HTTPS。此外，在瀏覽網站時，也建議優先選擇 HTTPS 網站。HTTPS 的普及，將能為我們創造更加安全、便利的網路環境哦！</p>
<hr>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://www.nss.com.tw/why-https-is-important-than-http/">為什麼 HTTPS 比 HTTP 重要？一次帶你了解兩者的差異和重要性</a><br><a href="https://buzzorange.com/techorange/2018/05/11/https-seo/">HTTP 和 HTTPS：差了一個「S」，攸關的可是你家網站 SEO 排名順序！</a></p>
<hr>
]]></content>
      <categories>
        <category>網頁程式技術探討</category>
      </categories>
      <tags>
        <tag>HTTPS</tag>
        <tag>HTTP</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>手機版網頁設計 RWD vs AWD 的差別，打造良好網站使用者體驗</title>
    <url>/2024/03/04/web-rwd-vs-awd/</url>
    <content><![CDATA[<p><img src="https://imgur.com/Qwt7MbW.jpg" alt="RWD vs AWD"></p>
<p>在現代移動裝置廣泛使用的環境下，有極大部分的網路使用者，都是透過手機等行動設備來進行企業服務查詢、電商購買、知識搜索等行動，根據 <a href="https://www.meltwater.com/en?utm_source=kepios&utm_medium=affiliate&utm_campaign=affiliate-kepios-analysis_content-012623&utm_content=website">Meltwater</a> 和 <a href="https://wearesocial.com/?utm_source=kepios&utm_medium=analysis_article&utm_campaign=digital_2023&utm_content=article_hyperlink">We Are Social</a> 合作製作的《<a href="https://datareportal.com/reports/digital-2023-global-overview-report?utm_source=DataReportal&utm_medium=Country_Article_Hyperlink&utm_campaign=Digital_2023&utm_term=Taiwan&utm_content=Global_Promo_Block">數位 2023 年全球概覽報告</a>》分析，針對全球的數位使用情形，用行動裝置上網的比例已高達 91%，顯然使用手持裝置上網已經是瀏覽網站的趨勢。</p>
<a id="more"></a>

<p><img src="https://imgur.com/JrNT9NV.jpg" alt="devices used to access the internet"><br><br/><br>而行動瀏覽網站可分為兩種：AWD 自適應設計、RWD 響應式設計。<br><br/><br><br/></p>
<h1 id="AWD-是什麼"><a href="#AWD-是什麼" class="headerlink" title="#AWD 是什麼"></a>#AWD 是什麼</h1><p>AWD 自適應網頁設計全名為 Adaptive Web Design（簡稱 AWD），在響應式網站還沒盛行的時候，主要以此種類型為主，直接針對「裝置類型」（如電腦、平板、手機等），提供相對應的 CSS 檔案。<br>由於是依裝置設定不同的檔案，所以會有兩種以上版本需要開發及維護。AWD 適用於內容繁多的大型電商網站，如 PChome、momo 購物網</p>
<p>使用者可以透過網址判斷是否為 AWD 網頁，可檢視網址是否以“m”開頭，例如：591租屋網（ <a href="https://m.591.com.tw/">https://m.591.com.tw</a> ）、momo購物網（ <a href="https://m.momoshop.com.tw/">https://m.momoshop.com.tw</a> ），代表該網站有提供 AWD 網頁設計。<br><img src="https://imgur.com/ojoIyVj.jpg" alt="AWD"><br><br/><br><br/></p>
<h1 id="RWD-是什麼"><a href="#RWD-是什麼" class="headerlink" title="#RWD 是什麼"></a>#RWD 是什麼</h1><p>RWD 自適應網頁設計全名為 Responsive Web Design（簡稱 RWD），是<strong>目前最常見的網頁設計方式，</strong>RWD 會讀取「同一個 CSS 檔案」，讓同一個網址隨著各種裝置螢幕的大小，自動調整版面和元素大小<strong>，</strong>減少使用者進行縮放、平移和捲動等操作行為，提供最佳瀏覽體驗，使用此種設計方式將更易於維護網頁。<br><br/><br><br/></p>
<p><img src="https://imgur.com/KhuXMDC.jpg" alt="RWD vs AWD"><br><br/></p>
<h1 id="RWD-amp-AWD-的差異表"><a href="#RWD-amp-AWD-的差異表" class="headerlink" title="#RWD &amp; AWD 的差異表"></a>#RWD &amp; AWD 的差異表</h1><table>
<thead>
<tr>
<th>項目</th>
<th>🌟RWD🌟</th>
<th>AWD</th>
</tr>
</thead>
<tbody><tr>
<td>中文全名</td>
<td>響應式網站設計</td>
<td>自適應網站設計</td>
</tr>
<tr>
<td>網址</td>
<td>只用 www 網址</td>
<td>通常會分成 www 與 m 兩種版本</td>
</tr>
<tr>
<td>開發成本</td>
<td>較低</td>
<td>較高</td>
</tr>
<tr>
<td>網頁檔案目錄</td>
<td>單一目錄（包含 HTML 及 CSS ）</td>
<td>根據裝置分不同的檔案目錄，<br/>HTML 和 CSS 分開處理</td>
</tr>
<tr>
<td>網站內容一致</td>
<td>內容一樣</td>
<td>不一定</td>
</tr>
<tr>
<td>網頁載入速度</td>
<td>中等</td>
<td>較快</td>
</tr>
<tr>
<td>網站資料維護</td>
<td>維護容易</td>
<td>需維護多版本</td>
</tr>
<tr>
<td>網頁建置預算</td>
<td>中等</td>
<td>較高</td>
</tr>
<tr>
<td>SEO 排名優勢</td>
<td>較佳</td>
<td>中等</td>
</tr>
<tr>
<td>適用對象</td>
<td>企業網站、形象網站、品牌網站</td>
<td>大型綜合或系統複雜網站</td>
</tr>
<tr>
<td>優點</td>
<td>一套設計可適用不同裝置</td>
<td>根據裝置設計最佳網頁呈現</td>
</tr>
</tbody></table>
<br/>
<br/>

<h1 id="結語"><a href="#結語" class="headerlink" title="#結語"></a>#結語</h1><p>現今 RWD 網頁設計已成為趨勢，在網站開發、SEO表現、後續維護、視覺呈現都能得到較佳的表現，非常推薦使用 RWD 來做設計，除非希望單獨優化手機板，如大型購物網，則可使用 AWD，但 AWD 開發維護成本較高，如果網站沒有特別的需求，建議用 RWD 做會是更好的選擇！</p>
]]></content>
      <categories>
        <category>網頁程式技術探討</category>
      </categories>
      <tags>
        <tag>RWD</tag>
        <tag>AWD</tag>
        <tag>自適應網站設計</tag>
        <tag>響應式網站設計</tag>
        <tag>RWD AWD</tag>
      </tags>
  </entry>
</search>
