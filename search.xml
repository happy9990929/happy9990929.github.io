<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>非同步處理 Axios</title>
    <url>/2021/03/05/axios-api/</url>
    <content><![CDATA[<h1 id="使用-Axios-取得-API"><a href="#使用-Axios-取得-API" class="headerlink" title="使用 Axios 取得 API"></a>使用 Axios 取得 API</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; onMounted &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 在DOM元素渲染完成後執行</span></span><br><span class="line">      axios</span><br><span class="line">        .get(<span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="Axios-渲染資料"><a href="#Axios-渲染資料" class="headerlink" title="Axios 渲染資料"></a>Axios 渲染資料</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;img</span><br><span class="line">      v-for=&quot;(item, i) in imgArray.arr&quot;</span><br><span class="line">      :key=&quot;item.url&quot;</span><br><span class="line">      v-show=&quot;ImgIdx === i&quot;</span><br><span class="line">      class=&quot;img&quot;</span><br><span class="line">      :src=&quot;item.url&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btnbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;ImgIdxRemove&quot;</span>&gt;</span>上一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;ImgIdxAdd&quot;</span>&gt;</span>下一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; onMounted, reactive, ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> imgArray = reactive(&#123; <span class="attr">arr</span>: [] &#125;); <span class="comment">// 將取得的資料放進陣列</span></span><br><span class="line">    <span class="keyword">const</span> ImgIdx = ref(<span class="number">0</span>); <span class="comment">// 圖片索引</span></span><br><span class="line">    <span class="keyword">const</span> ImgIdxAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ImgIdx.value++;</span><br><span class="line">      <span class="keyword">if</span> (ImgIdx.value &gt; imgArray.arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">        ImgIdx.value = <span class="number">0</span>; <span class="comment">// 大於總數量時返回第一張</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> ImgIdxRemove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ImgIdx.value--;</span><br><span class="line">      <span class="keyword">if</span> (ImgIdx.value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ImgIdx.value = imgArray.arr.length - <span class="number">1</span>; <span class="comment">//小於0時返回最後一張</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      axios</span><br><span class="line">        .get(<span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          imgArray.arr = res.data;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; imgArray, ImgIdx, ImgIdxAdd, ImgIdxRemove &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="加入-loading-效果"><a href="#加入-loading-效果" class="headerlink" title="加入 loading 效果"></a>加入 loading 效果</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isLoad&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;img</span><br><span class="line">      v-for=&quot;(item, i) in imgArray.arr&quot;</span><br><span class="line">      :key=&quot;item.url&quot;</span><br><span class="line">      v-show=&quot;ImgIdx === i&quot;</span><br><span class="line">      class=&quot;img&quot;</span><br><span class="line">      :src=&quot;item.url&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btnbox&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isLoad&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;ImgIdxRemove&quot;</span>&gt;</span>上一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;ImgIdxAdd&quot;</span>&gt;</span>下一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;!isLoad&quot;</span> <span class="attr">class</span>=<span class="string">&quot;load&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./images/load.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> imgArray = reactive(&#123; <span class="attr">arr</span>: [] &#125;); <span class="comment">// 將取得的資料放進陣列</span></span><br><span class="line"><span class="keyword">const</span> ImgIdx = ref(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> isLoad = ref(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> ImgIdxAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ImgIdx.value++;</span><br><span class="line">  <span class="keyword">if</span> (ImgIdx.value &gt; imgArray.arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">    ImgIdx.value = <span class="number">0</span>; <span class="comment">// 大於總數量時返回第一張</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> ImgIdxRemove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ImgIdx.value--;</span><br><span class="line">  <span class="keyword">if</span> (ImgIdx.value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    ImgIdx.value = imgArray.arr.length - <span class="number">1</span>; <span class="comment">//小於0時返回最後一張</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handImgLoad = <span class="function">(<span class="params">imgArr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>; <span class="comment">// 透過i記錄loading跑完沒</span></span><br><span class="line">  imgArr.forEach(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newImage = <span class="keyword">new</span> Image(); <span class="comment">// 建立Image實體</span></span><br><span class="line">    newImage.src = image.url; <span class="comment">// 透過src去觸發onload事件</span></span><br><span class="line">    newImage.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      i++;</span><br><span class="line">      <span class="keyword">if</span> (imgArr.length === i) &#123;</span><br><span class="line">        <span class="comment">//圖片跑完後執行</span></span><br><span class="line">        imgArray.arr = imgArr;</span><br><span class="line">        isLoad.value = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  axios.get(<span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    handImgLoad(res.data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> &#123; imgArray, ImgIdx, isLoad, ImgIdxAdd, ImgIdxRemove &#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>解Bug-defineProps is a compiler macro and no longer needs to be imported.</title>
    <url>/2022/04/27/bug-defineProps/</url>
    <content><![CDATA[<p><img src="https://imgur.com/u3IhKJS.jpg" alt="defineProps error"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineProps, defineEmits &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> props = defineProps(&#123;</span><br><span class="line">  foo: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在 Vue3 編譯時出現這個警告<br>[@vue/compiler-sfc] defineProps is a compiler macro and no longer needs to be imported.<br>[@vue/compiler-sfc] defineEmits is a compiler macro and no longer needs to be imported.</p>
<a id="more"></a>
<br/>
<br/>

<h1 id="解譯bug"><a href="#解譯bug" class="headerlink" title="解譯bug"></a>解譯bug</h1><p>⚠️ <strong>@vue/compiler-sfc</strong><br>Vue 單文件組件(SFC) 編譯警告</p>
<p>⚠️<strong>defineProps is a compiler macro and no longer needs to be imported.</strong><br>defineProps 是一個編譯器巨集，不再需要導入。</p>
<p>⚠️<strong>defineEmits is a compiler macro and no longer needs to be imported.</strong><br>defineEmits 是一個編譯器巨集，不再需要導入。<br><br/><br><br/></p>
<h1 id="錯誤原因"><a href="#錯誤原因" class="headerlink" title="錯誤原因"></a>錯誤原因</h1><p>defineProps和 defineEmits 都是只在 <code>&lt;script setup&gt;</code> 中才能使用的編譯器巨集。<br>他們不需要導入且會隨著 <code>&lt;script setup&gt;</code> 處理過程一同被編譯掉<br><br/><br><br/></p>
<h1 id="如何解決"><a href="#如何解決" class="headerlink" title="如何解決"></a>如何解決</h1><p>將 import 的 <code>defineProps</code>、<code>defineEmits</code> 移除即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// import &#123; defineProps, defineEmits &#125; from &#x27;vue&#x27;; // 刪除這行</span></span><br><span class="line"><span class="keyword">const</span> props = defineProps(&#123;</span><br><span class="line">  foo: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<hr>
<p><a href="https://v3.cn.vuejs.org/api/sfc-script-setup.html">官方文件</a></p>
<hr>
<p>如果這篇文章對你有幫助，請幫小編按個讚👍～你的鼓勵是我分享的動力😊</p>
]]></content>
      <categories>
        <category>Bug記錄</category>
      </categories>
      <tags>
        <tag>defineProps</tag>
        <tag>defineEmits</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Component 組件基本介紹</title>
    <url>/2021/03/10/components-base/</url>
    <content><![CDATA[<h1 id="組件基本介紹"><a href="#組件基本介紹" class="headerlink" title="組件基本介紹"></a>組件基本介紹</h1><p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App).use(router).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>main.js 為網站主程式的進入點，Vue 的初始化操作都在此設定<br>只要有使用到擴充功能，都要用<code>.use</code> 串接到主程式</p>
<hr>
<h1 id="拆分組件"><a href="#拆分組件" class="headerlink" title="拆分組件"></a>拆分組件</h1><p>App.vue<br>JS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;@/components/Header.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">&quot;@/components/Footer.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Header,</span><br><span class="line">    Footer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>template</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft JhengHei&quot;</span>, <span class="string">&quot;Heiti TC&quot;</span>, <span class="string">&quot;sans-serif&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@是給 VueJs 使用的，代表 src 資料夾，CSS 使用時須在前面加上波浪符<code>~@</code>，使用@取代../路徑，避免 bundle 的時候出錯</p>
<p>Header.vue<br>改寫成 SCSS 時須加上 <code>lang=&quot;scss&quot;</code>，並將 RWD @media 放進自己的 class<br><code>scoped</code> 只限制此檔案元素的 style</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: greenyellow;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#373c3f</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">97px</span>;</span><br><span class="line">  @media screen and (max-width: 640px) &#123;</span><br><span class="line">    <span class="selector-tag">transition</span>: <span class="selector-tag">height</span> 0.2<span class="selector-tag">s</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 37<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1024px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    @media screen and (max-width: 1044px) &#123;</span><br><span class="line">      <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">640px</span>) &#123;</span><br><span class="line">      <span class="selector-tag">width</span>: 100%;</span><br><span class="line">      <span class="selector-tag">height</span>: 232<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/<span class="selector-tag">style</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="注入全域的-CSS"><a href="#注入全域的-CSS" class="headerlink" title="注入全域的 CSS"></a>注入全域的 CSS</h3><p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/assets/css/reset.css&quot;</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>Vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>組件資料傳遞 emit-子層傳參數到父層</title>
    <url>/2021/03/14/components-emit/</url>
    <content><![CDATA[<h1 id="組件資料傳遞-emit-子傳父"><a href="#組件資料傳遞-emit-子傳父" class="headerlink" title="組件資料傳遞 emit (子傳父)"></a>組件資料傳遞 emit (子傳父)</h1><p>使用 emit 往上傳遞資料</p>
<a id="more"></a>

<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EmitTest <span class="keyword">from</span> <span class="string">&quot;@/components/EmitTest.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    EmitTest,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clickFn = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      clickFn,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EmitTest</span> @<span class="attr">callBack</span>=<span class="string">&quot;clickFn&quot;</span> /&gt;</span> // @在emit定義的變數=&quot;父層Fn&quot;</span><br></pre></td></tr></table></figure>
<p>EmitTest.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">0</span>);</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      context.emit(<span class="string">&quot;callBack&quot;</span>, num); <span class="comment">// emit(自定義變數, 要使用的參數)</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>setup 接收兩個參數，前面為 props，第二個 context<br>使用 emit 也可以直接解構出來</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props, &#123;emit&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">0</span>);</span><br><span class="line">    onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      emit(<span class="string">&quot;callBack&quot;</span>, num);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="emits-的使用"><a href="#emits-的使用" class="headerlink" title="emits 的使用"></a>emits 的使用</h1><p>聲明有使用到的 emit，可以寫成 Array<br>emit 也可以寫成 object 來做驗證的動作<br>如驗證未通過，console 會跳出 warning 的提示來告訴開發者</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  emits: &#123;</span><br><span class="line">    callBack: <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> num.value === <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; emit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">1</span>);</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      emit(<span class="string">&quot;callBack&quot;</span>, num);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="計數器範例"><a href="#計數器範例" class="headerlink" title="計數器範例"></a>計數器範例</h1><p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EmitTest <span class="keyword">from</span> <span class="string">&quot;@/components/EmitTest.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    EmitTest,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handTimeOut = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;time is over&quot;</span>, num.value);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      handTimeOut,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EmitTest</span> @<span class="attr">TimeOut</span>=<span class="string">&quot;handTimeOut&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>EmitTest.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  emits: &#123;</span><br><span class="line">    TimeOut: <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (num.value === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; emit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        num.value--;</span><br><span class="line">        <span class="keyword">if</span> (num.value === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">          emit(<span class="string">&quot;TimeOut&quot;</span>, num);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>emit</tag>
      </tags>
  </entry>
  <entry>
    <title>組件資料傳遞 Props-父層傳參數到子層</title>
    <url>/2021/03/11/components-props/</url>
    <content><![CDATA[<h1 id="組件資料傳遞-Props-父傳子"><a href="#組件資料傳遞-Props-父傳子" class="headerlink" title="組件資料傳遞 Props (父傳子)"></a>組件資料傳遞 Props (父傳子)</h1><p>上層的 data 透過 props 往下傳，不會往上傳回 data，所以下層的資料改變不會影響到上層(data)</p>
<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PropsTest <span class="keyword">from</span> <span class="string">&quot;@/components/PropsTest.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    PropsTest,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = ref(<span class="string">&quot;hello Vue!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; data &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropsTest</span> <span class="attr">:msg</span>=<span class="string">&quot;data&quot;</span> /&gt;</span> // :子層屬性=&quot;父層 data&quot;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>PropsTest.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">&quot;msg&quot;</span>],</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; props &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;props.msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Props-型態"><a href="#Props-型態" class="headerlink" title="Props 型態"></a>Props 型態</h1><p>props 雖可以為陣列，但建議使用<code>物件</code>表示，物件可以定義型別，還能設定<code>預設值</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  msg: <span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Or</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  msg: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">&#x27;HI&#x27;</span> <span class="comment">// 如上層未設定msg值，會顯示HI</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Props-定義各個型別的預設值"><a href="#Props-定義各個型別的預設值" class="headerlink" title="Props 定義各個型別的預設值"></a>Props 定義各個型別的預設值</h1><p>父層</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PropsTest <span class="keyword">from</span> <span class="string">&quot;@/components/PropsTest.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    PropsTest,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> string = ref(<span class="string">&quot;string&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> boolean = ref(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> array = reactive([]);</span><br><span class="line">    <span class="keyword">const</span> obj = reactive(&#123;&#125;);</span><br><span class="line">    <span class="keyword">const</span> clickFn = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; string, boolean, num, array, obj, clickFn &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;PropsTest</span><br><span class="line">  :string=&quot;string&quot;</span><br><span class="line">  :boolean=&quot;boolean&quot;</span><br><span class="line">  :num=&quot;num&quot;</span><br><span class="line">  :array=&quot;array&quot;</span><br><span class="line">  :obj=&quot;obj&quot;</span><br><span class="line">  :clickFn=&quot;clickFn&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<br>
子層

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    string: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    boolean: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    num: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    array: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        [];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    obj: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">      <span class="comment">// 等於</span></span><br><span class="line">      <span class="comment">// default: ()=&gt;&#123;</span></span><br><span class="line">      <span class="comment">//   return &#123;&#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    clickFn: &#123;</span><br><span class="line">      type: <span class="built_in">Function</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; props &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>props</tag>
      </tags>
  </entry>
  <entry>
    <title>C槽空間不足，容量爆滿，清理windows更新造成的多餘檔案</title>
    <url>/2022/07/19/computer-space-full/</url>
    <content><![CDATA[<p><img src="https://imgur.com/GpolNsn.jpg" alt="windows"></p>
<p>作業系統：win10<br>在 windows 系統自動更新後，突然 C 槽就爆滿了，因為更新後的系統會產生一些多餘的檔案，有些是沒有用的廢棄檔案，不去清理只會越積越多，<strong>系統碟太滿就會導致電腦變慢</strong>，以下查到了兩個方法可以清理磁碟，整整幫我清出了 10G 可用空間呢！😍</p>
<a id="more"></a>

<h1 id="磁碟清理"><a href="#磁碟清理" class="headerlink" title="磁碟清理"></a>磁碟清理</h1><p>最簡單的方法是直接清理磁碟<br>對著本機磁碟按右鍵 → <strong>內容</strong><br><br/></p>
<p><img src="https://imgur.com/wcthMA2.jpg" alt="磁碟清理1"><br><br/></p>
<p>點擊 <strong>清理磁碟</strong> 後會開始計算可以釋放多少空間<br><img src="https://imgur.com/A7hwFR5.jpg" alt="磁碟清理2"><br><img src="https://imgur.com/RRwNXwz.jpg" alt="磁碟清理3"><br><br/></p>
<p>再點擊 <strong>確定</strong>，等清理完就大功告成了!<br><img src="https://imgur.com/itajEP2.jpg" alt="磁碟清理4"><br><br/><br/><br/></p>
<h1 id="釋放儲存空間"><a href="#釋放儲存空間" class="headerlink" title="釋放儲存空間"></a>釋放儲存空間</h1><p>如果 磁碟清理 後，還是覺得空間不夠，可以再設定釋放儲存空間<br>選擇設定 → 系統 → 儲存空間<br>系統會列出所擁有的磁碟裡裝的各種軟體、暫存，把不必要的檔案刪除，磁碟空間就多出來了</p>
<p>儲存空間感知器能自動去除不需要的檔案來釋出空間，例如暫存檔案和資源回收筒中的內容<br><img src="https://imgur.com/hcqwnai.jpg" alt="釋放儲存空間1"><br><br/></p>
<p>點擊 <strong>設定或立即執行儲存空間感知器</strong><br><img src="https://imgur.com/ptTZoJr.jpg" alt="釋放儲存空間2"><br><br/></p>
<p>點擊 <strong>立即清除</strong><br><img src="https://imgur.com/s7oF1iW.jpg" alt="釋放儲存空間3"><br><br/></p>
<p>點擊 <strong>應用程式與功能</strong> 後，可以卸載不必要的軟體<br><img src="https://imgur.com/1g2EKuh.jpg" alt="釋放儲存空間4"><br><br/></p>
<p>點擊 <strong>暫存檔案</strong><br><img src="https://imgur.com/Sjck0La.jpg" alt="釋放儲存空間5"><br><br/></p>
<p>點擊 <strong>移除檔案</strong>，可以移除很多不必要的檔案<br><img src="https://imgur.com/WDwJAuC.jpg" alt="釋放儲存空間6"></p>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="8536485431"></ins></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>清理完看起來舒服很多🤩，如果你磁碟爆滿也可以試試看是否有用唷！如果對你有幫助，希望也可以給我一點鼓勵😊</p>
]]></content>
      <categories>
        <category>電腦相關問題</category>
      </categories>
      <tags>
        <tag>C槽空間不足</tag>
        <tag>C槽爆滿</tag>
        <tag>C槽清理</tag>
        <tag>C槽容量不足</tag>
        <tag>c槽突然爆滿</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite 教學快速上手，秒安裝秒啟動</title>
    <url>/2022/04/24/frontend-vite/</url>
    <content><![CDATA[<p><img src="https://imgur.com/iogr3On.jpg" alt="vite"></p>
<p>Vite 是由 Vue 之父 尤雨溪開發的新打包工具，可以說是 Vue Cli 的升級版，Cli 因為有依賴 webpack 解決了很多打包上複雜的問題，然而，當專案越來越大，打包時間隨著專案變大包跑得越久，大大降低了開發者的開發效率和幸福感。</p>
<p><strong>vite 解決了開發速度上的痛點，秒啟動根本驚為天人</strong>⚡️⚡️⚡️！打包速度極快，不用像 vue-cli 要進行編譯後啟動，省了很多開發上的時間。</p>
<a id="more"></a>

<br />

<h1 id="Vite-是什麼"><a href="#Vite-是什麼" class="headerlink" title="Vite 是什麼?"></a>Vite 是什麼?</h1><p>Vite 法語意為「快速」的意思，提供開發者一個快速啟動、即時更新的開發工具，預設無設定檔。</p>
<p>🔸 開發環境：基於瀏覽器原生 ES Module 提供的內建功能，能夠通過 import 和 export 連結檔案，並有基於 esbuild 的依賴預建構，擁有速度快到驚人的緩存模塊熱更新（HMR），Vite 會預先針對所有模組進行轉譯與打包，當瀏覽器再次請求某個模組時，就只針對被更改的模組進行編譯，這樣就能避免多次請求的問題了</p>
<p><span style="font-size: 16px; border: 1px dashed #d9d9d9; padding: 1rem; ">📌 熱更新：Hot Module Replacement，簡稱 HMR，在不刷新瀏覽器的前提下就能夠對應用進行更新</span></p>
<br />

<p>🔸 生產環境：使用 Rollup 打包代碼，透過較快的時間來將檔案打包成更小容量。</p>
<!-- 文章內廣告 -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="5051618728"></ins></p>
<h1 id="Vite-安裝"><a href="#Vite-安裝" class="headerlink" title="Vite 安裝"></a>Vite 安裝</h1><p>使用 NPM</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure>
<p>使用 yarn</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure>
<br />

<p><strong>接著依自己專案需求來做選擇(以下以 vue 為例)</strong></p>
<p>Project name: (專案名稱)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vite-project</span><br></pre></td></tr></table></figure>
<br />
Select a framework: (選擇框架)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vanilla</span><br><span class="line">✔ vue</span><br><span class="line">react</span><br><span class="line">preact</span><br><span class="line">lit</span><br><span class="line">svelte</span><br></pre></td></tr></table></figure>
<br />
Select a variant: (使用 js 或 ts)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✔ vue</span><br><span class="line">vue-ts</span><br></pre></td></tr></table></figure>
<br />

<p>這樣就安裝完成了！！！另外還有更快速的指令，<br>你也可以通過附加的命令行選項<b>直接指定專案名稱和框架模板</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># npm 6.x</span><br><span class="line">npm create vite@latest my-vue-app --template vue</span><br><span class="line"></span><br><span class="line"># npm 7+, extra double-dash is needed:</span><br><span class="line">npm create vite@latest my-vue-app -- --template vue</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn create vite my-vue-app --template vue</span><br></pre></td></tr></table></figure>
<br />

<p>🔸 框架模板</p>
<table>
<thead>
<tr>
<th>JavaScript</th>
<th>TypeScript</th>
</tr>
</thead>
<tbody><tr>
<td>vanilla</td>
<td>vanilla-ts</td>
</tr>
<tr>
<td>vue</td>
<td>vue-ts</td>
</tr>
<tr>
<td>react</td>
<td>react-ts</td>
</tr>
<tr>
<td>preact</td>
<td>preact-ts</td>
</tr>
<tr>
<td>lit</td>
<td>lit-ts</td>
</tr>
<tr>
<td>svelte</td>
<td>svelte-ts</td>
</tr>
</tbody></table>
<br />
注意：<br />
Vite 需要 Node.js 版本 >= 12.0.0<br />
vue 目前僅支援 vue3，所以不能使用與 vue3 不兼容的套件<br />
引入檔案必須掛載副檔名

<br />
<br />
<br />

<h1 id="Vite-專案目錄結構"><a href="#Vite-專案目錄結構" class="headerlink" title="Vite 專案目錄結構"></a>Vite 專案目錄結構</h1><p>打開專案後，其實目錄結構跟 Cli 差不多，只是多了一個 vite 的設定檔 vite.config.js<br><br /></p>
<p><img src="https://imgur.com/hu4VSoP.jpg" alt="vite目錄"></p>
<br />

<p>比較特別的是，在 Cli 時 index.html 是在 public 文件夾內，而 Vite 放在最外層了，index.html 是 Vite 項目的入口文件，原碼也做了一些調整。</p>
<p><img src="https://imgur.com/GuYJb6p.jpg" alt="index"></p>
<p>瀏覽器透過 JavaScript 的 <code>&lt;script type=&quot;module&quot;&gt;</code> 找到 main.js 進入點，便可以使用 <strong>ESM 語法</strong>，根據 import 的 url 路徑加載模組，<br>Vite 有<strong>根目錄</strong>的概念，index.html 中的 URL 自動轉換絕對路徑，也可以使用相對路徑導入，因此不再需要 %PUBLIC_URL% 佔位符了。</p>
<br />
<br />

<h1 id="共用-SCSS-變數"><a href="#共用-SCSS-變數" class="headerlink" title="共用 SCSS 變數"></a>共用 SCSS 變數</h1><p>vite 共用 SCSS 變數需在 <code>vite.config</code> 設定，<br>由於 vite 沒有內建 @ 的語法糖，如要使用需設定 alias，更多設定請參考<a href="https://vitejs.dev/config/">官方文件</a></p>
<p>vite.config</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  css:&#123;</span><br><span class="line">    preprocessorOptions: &#123;</span><br><span class="line">       scss: &#123;</span><br><span class="line">         additionalData: <span class="string">`@import &quot;@/assets/scss/variable.scss&quot;;`</span>,</span><br><span class="line">         charset: <span class="literal">false</span>,</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br />
<br />

<h1 id="Vite-跟-Cli-對比"><a href="#Vite-跟-Cli-對比" class="headerlink" title="Vite 跟 Cli 對比"></a>Vite 跟 Cli 對比</h1><table>
<thead>
<tr>
<th></th>
<th>Vite</th>
<th>Vue-Cli</th>
</tr>
</thead>
<tbody><tr>
<td>打包工具</td>
<td>rollup</td>
<td>webpack</td>
</tr>
<tr>
<td>效能</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>功能</td>
<td>功能較基本、簡單</td>
<td>webpack 功能性較豐富</td>
</tr>
<tr>
<td>框架兼容</td>
<td>提供多種框架支援，Vue 只支援 Vue3 以上</td>
<td>僅支援 Vue 框架，Vue2、Vue3 都兼容</td>
</tr>
<tr>
<td>瀏覽器兼容</td>
<td>僅支援 ES6 的瀏覽器</td>
<td>因有 babel 可兼容多種瀏覽器</td>
</tr>
</tbody></table>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="8536485431"></ins></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>Vite 的快速省了很多開發時間，是開發者的福音，尤雨溪在 twitter 也發表了，<br><strong>Vite 會取代 Vue CLI 嗎？</strong><br><br /></p>
<p><img src="https://imgur.com/35PNPXZ.jpg" alt="尤雨溪twitter"></p>
<br />

<p><strong>起初，我也不確定，但是現階段我相信最終會是這樣。</strong></p>
<p>你學會 vite 了嗎?</p>
<hr>
<h1 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h1><p><a href="https://cn.vitejs.dev/guide/">Vite 官方文件</a></p>
]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vite 教學</tag>
        <tag>vite scss共用變數</tag>
      </tags>
  </entry>
  <entry>
    <title>ngrok教學-從外部連到localhost執行你的網站</title>
    <url>/2022/06/13/frontend-ngrok/</url>
    <content><![CDATA[<p><img src="https://imgur.com/L7Qvsfy.jpg" alt="ngrok"></p>
<p>你是否有遇過，想測試一個功能，或是想在不同裝置上測試，卻又要大費周章部署到測試機，你其實可以不用這麼麻煩！<br>ngrok 可以在本地 localhost 的環境下直接進行測試，重點是 <strong>免費版</strong> 就夠給我們一般使用<br><br/><br/></p>
<a id="more"></a>

<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="8536485431"></ins></p>
<h1 id="下載-ngrok"><a href="#下載-ngrok" class="headerlink" title="下載 ngrok"></a>下載 ngrok</h1><p>首先<a href="https://ngrok.com/download">Install ngrok</a>，依自己的 OS 作業系統選擇檔案<br><br/><br/></p>
<h1 id="註冊-ngrok-帳號"><a href="#註冊-ngrok-帳號" class="headerlink" title="註冊 ngrok 帳號"></a>註冊 ngrok 帳號</h1><p>進入 <a href="https://ngrok.com/">ngrok 官網</a>，可以用 github 或 google 帳號建立，或是自行建立一個帳號<br><br/><br/></p>
<h1 id="登入-ngrok-取得-token"><a href="#登入-ngrok-取得-token" class="headerlink" title="登入 ngrok 取得 token"></a>登入 ngrok 取得 token</h1><p>直接把 Command Line 複製下來<br><img src="https://imgur.com/TIW1WYt.jpg" alt="ngrok token"><br><br/><br/></p>
<h1 id="加入-token"><a href="#加入-token" class="headerlink" title="加入 token"></a>加入 token</h1><p>將 Command Line 貼到剛下載的 ngrok.exe<br>設定完之後會看到自動建立了 ngrok.yml<br><br/></p>
<p><img src="https://imgur.com/PIH8hgB.jpg" alt="ngrok token"><br><br/><br/></p>
<h1 id="啟用連到-local-的-web-服務"><a href="#啟用連到-local-的-web-服務" class="headerlink" title="啟用連到 local 的 web 服務"></a>啟用連到 local 的 web 服務</h1><p>依本地端的埠號去下指令，如果我的本地是 localhost:4000 那就會是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ngrok http 4000</span><br></pre></td></tr></table></figure>
<p>之後就會出現以下畫面<br><br/></p>
<p><img src="https://imgur.com/9KrXRa9.jpg" alt="ngrok http"><br>把網址貼到瀏覽器上執行，就會出現你本地端的網站啦～</p>
<p><img src="https://imgur.com/fErKOQK.jpg" alt="ngrok http"><br><br/><br/></p>
<hr>
<h1 id="使用框架時遇到-invalid-host-header"><a href="#使用框架時遇到-invalid-host-header" class="headerlink" title="使用框架時遇到 invalid host header"></a>使用框架時遇到 invalid host header</h1><p>vue 的解決方式是直接在 vue.config.js 的地方設定 <code>disableHostCheck: true</code>，就可以開啟囉！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">     disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br/>

<p>使用 React 時，網友也提供了解法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ngrok http <span class="number">8080</span> -host-header=<span class="string">&quot;localhost:8080&quot;</span></span><br><span class="line">ngrok http --host-header=rewrite <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>記得將 8080 改成自己的 port 號哦！</p>
<br/>

<h1 id="錯誤-Your-account-is-limited-to-1-simultaneous-ngrok-agent-session"><a href="#錯誤-Your-account-is-limited-to-1-simultaneous-ngrok-agent-session" class="headerlink" title="錯誤: Your account is limited to 1 simultaneous ngrok agent session."></a>錯誤: Your account is limited to 1 simultaneous ngrok agent session.</h1><p>如果出現此錯誤: 他的意思是你使用了一個以上的代理，<br>當下找不到斷開的方式，最萬能的解法是 <strong>重開機</strong> 就會好囉😂</p>
<hr>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>有時在檢查網站裝置畫面功能，可能會跟在行動裝置上有不同狀況發生，ngrok 就很適合拿來測試行動裝置上的問題，也不需要一直重複部署，真的很方便呢！如果我的文章有幫助到你，歡迎給我一點鼓勵哦👏👏👏</p>
]]></content>
      <categories>
        <category>前端工具</category>
      </categories>
      <tags>
        <tag>ngrok</tag>
        <tag>ngrok 教學</tag>
        <tag>ngrok token</tag>
        <tag>invalid host header</tag>
        <tag>Your account is limited to 1 simultaneous ngrok agent session.</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用指令</title>
    <url>/2021/10/17/git-cmdline/</url>
    <content><![CDATA[<p><img src="https://imgur.com/6mK0zWq.jpg" alt="Git"></p>
<h1 id="Git-常用指令"><a href="#Git-常用指令" class="headerlink" title="Git 常用指令"></a>Git 常用指令</h1><p><strong>Git 是否有安裝成功：</strong><code>git --version</code></p>
<a id="more"></a>

<p><strong>設定/修改個人資料</strong></p>
<ul>
<li>輸入姓名：<code>git config --global user.name &quot;gon&quot;</code></li>
<li>輸入個人的 email：<code>git config --global user.email &quot;gonsakon@gmail.com&quot;</code></li>
<li>查詢 git 設定內容：<code>git config --list</code></li>
<li>查看用户名：<code>git config user.name</code></li>
<li>查看用户邮箱：<code>git config user.email</code></li>
</ul>
<p><strong>Git 常用指令</strong></p>
<ul>
<li>初始化數據庫：<code>git init</code></li>
<li>查詢當前狀態：<code>git status</code></li>
<li>將檔案加入到索引：<code>git add .</code></li>
<li>將索引檔案變成一個更新(commit)：<code>git commit -m &quot;修改內容&quot;</code></li>
<li>觀察 commit 歷史紀錄： <code>git log</code></li>
<li>下載遠端數據庫：<code>git clone 數據庫網址</code></li>
<li>更新遠端數據庫：<code>git push origin master</code></li>
<li>下載同步更新：<code>git pull</code></li>
</ul>
<p><strong>分支 (branch)</strong></p>
<ul>
<li>新增分支：<code>git branch 分支名稱</code></li>
<li>查看分支：<code>git branch</code></li>
<li>切換分支：<code>git checkout 分支名稱</code></li>
<li>建立並切換分支：<code>git checkout -b 分支名稱</code></li>
<li>刪除分支：<code>git branch -d 分支名稱</code> (-D 是強制刪除)</li>
<li>還原上個版本：<code>git reset HEAD^</code> (^為要回去哪一個版本，^^兩個就是回到前兩個版本)</li>
<li>合併分支：<code>git merge 分支名稱</code></li>
<li>取消快轉：<code>git merge 分支名稱 --no-ff</code></li>
<li>觀看線圖：<code>git log —oneline -graph</code></li>
<li>還原合併前狀態：<code>git reset —hard ORIG_HEAD</code></li>
</ul>
<p><strong>還原技巧</strong></p>
<ul>
<li>回頭觀看版本內容：<code>git checkout 編號</code></li>
<li>返回最新的版本：<code>git checkout master(分支名稱)</code></li>
<li>索引檔案&gt;還原到工作目錄：<code>git reset HEAD</code></li>
<li>還原前兩個版本：<code>git reset HEAD^^</code></li>
<li>還原前兩個版本，所有更新檔案都<strong>放棄</strong>：<code>git reset HEAD^^ --hard</code></li>
<li>觀看詳細所有歷史紀錄：<code>git reflog</code></li>
<li>新增檔案時，檔案還沒加追蹤時，清空工作目錄<br>顯示此次清除的檔案：<code>git clean -n</code><br>強制清除檔案：<code>git clean -f</code></li>
<li>檔案已加入追蹤，還原工作目錄上已更改的檔案 ：<code>git checkout -- &lt;file&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Git指令</tag>
      </tags>
  </entry>
  <entry>
    <title>icoMoon 教學-將 icon 生成圖標字體</title>
    <url>/2022/03/12/icomoon/</url>
    <content><![CDATA[<p><img src="https://imgur.com/STTYcIy.jpg" alt="icoMoon"><br>在網站上常常會使用到 icon 圖示做為點綴，而現今行動版普及化，響應式網站大多使用縮放都不會失真的 svg 向量圖檔，來獲得最佳的視覺體驗。網路有很多的插件內建 svg 圖示可以做為字型使用，例如 <a href="https://fontawesome.com/icons">fontawesome</a> 使用上就很方便快速，不過有時候想要自行定義圖示，或是只有用到少數的 icon，不想載入太大包檔案，這次要介紹的就是可以自行客製 icon 的 <a href="https://icomoon.io/">icoMoon</a></p>
<a id="more"></a>

<h1 id="IcoMoon-App-概述"><a href="#IcoMoon-App-概述" class="headerlink" title="IcoMoon App 概述"></a>IcoMoon App 概述</h1><ul>
<li>5500 多個免費圖標</li>
<li>可以導出 SVG、PNG 等格式的圖標，IcoMoon 生成可與 use 標籤一起使用的內聯 SVG</li>
<li>導入客製的向量圖，生成圖標字體</li>
<li>IcoMoon 生成的代碼文件（HTML、CSS、JS）是 MIT 許可的，可免費使用</li>
<li>IcoMoon 應用程序中所做的幾乎所有事情都發生在本地。例如，當導入 SVG 圖像/字體或生成字體時，一切都發生在自己的瀏覽器中，不會上傳到 IcoMoon 的服務器</li>
</ul>
<h1 id="IcoMoon-教學"><a href="#IcoMoon-教學" class="headerlink" title="IcoMoon 教學"></a>IcoMoon 教學</h1><p>先進入 <a href="https://icomoon.io/app/">IcoMoon App</a></p>
<br/>

<h2 id="STEP-1-加入-icon"><a href="#STEP-1-加入-icon" class="headerlink" title="STEP 1.加入 icon"></a>STEP 1.加入 icon</h2><p>🔸 加入 IcoMoon 所提供的 icon<br>從 <a href="https://icomoon.io/app/#/select/library">Icon Library</a> 圖示庫可以加入你想要的圖示，Add 為免費直接加入，Purchase、Go Premium 需要升級購買<br><img src="https://i.imgur.com/jd8pOqJ.jpg" alt="IcoMoon"></p>
<p>🔸 客製 icon<br>左上點擊 Import Icons，將 svg 圖檔匯入，如圖<br><img src="https://i.imgur.com/wIiyeSu.png" alt="Import Icons"></p>
<br/>

<h2 id="STEP-2-選取要使用的-icon"><a href="#STEP-2-選取要使用的-icon" class="headerlink" title="STEP 2.選取要使用的 icon"></a>STEP 2.選取要使用的 icon</h2><p>將要使用的 icon 點選起來，選起來的圖示會自動變成一個 Selection<br><img src="https://i.imgur.com/p9kqsqE.jpg" alt="icoMoon-select"></p>
<br/>

<h2 id="STEP-3-生成圖標字體或圖示，Download"><a href="#STEP-3-生成圖標字體或圖示，Download" class="headerlink" title="STEP 3.生成圖標字體或圖示，Download"></a>STEP 3.生成圖標字體或圖示，Download</h2><p>你可以選擇使用 Generate Font 或 Generate SVG &amp; More 其中一種</p>
<p>🔸 選取 Generate Font<br>產生圖標字體，Download 檔案後引入到自己的專案，即可使用裡面的 class，並用 font-size 就可以調整大小</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-smile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>點選圖示的 Get code，即可查看語法<br><img src="https://imgur.com/87LT8Zr.jpg" alt="icoMoon-Font"></p>
<br/>

<p>🔸 選取 Generate SVG &amp; More<br>也可以生成 svg 圖示，Download 檔案後引入到自己的專案，用繪製 svg 的方式顯示 icon</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon icon-smile&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-smile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;icon-smile&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 32 32&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M25.632 10.65c0 1.432-1.16 2.592-2.592 2.592s-2.592-1.16-2.592-2.592c0-1.432 1.16-2.592 2.592-2.592s2.592 1.16 2.592 2.592z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M11.955 10.65c0 1.432-1.16 2.592-2.592 2.592s-2.592-1.16-2.592-2.592c0-1.432 1.16-2.592 2.592-2.592s2.592 1.16 2.592 2.592z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M16.774 24.877c-8.429 0-15.008-6.022-15.11-6.112l1.312-1.402c0.55 0.512 13.619 12.416 26.022 0.026l1.357 1.357c-4.602 4.595-9.325 6.131-13.581 6.131z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>點選圖示的 Get code，即可查看語法<br><img src="https://imgur.com/JBAMcSe.jpg" alt="icoMoon-Svg"></p>
<hr>
<p>icoMoon 真的是簡單又好用，尤其是可以自訂圖示的部分更是加分，大家也可以使用看看哦😊</p>
]]></content>
      <categories>
        <category>Plugins</category>
      </categories>
      <tags>
        <tag>icoMoon教學</tag>
        <tag>icoMoon</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery常用方法大全</title>
    <url>/2022/06/14/jquery/</url>
    <content><![CDATA[<p><img src="https://imgur.com/1CT5iTI.jpg" alt="jquery"><br>jQuery 是一個 Javascript 的函示庫，透過它可以簡單的撰寫做出各種網頁效果。<br>以下是 jQuery 一些常用的方法，方便查閱記錄。</p>
<a id="more"></a>

<h1 id="元素查找"><a href="#元素查找" class="headerlink" title="元素查找"></a>元素查找</h1><h2 id="prev"><a href="#prev" class="headerlink" title="prev()"></a>prev()</h2><p>取得同層上一個元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).prev(<span class="string">&quot;.selected&quot;</span>)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h2><p>取得同層下一個元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).next(<span class="string">&quot;.selected&quot;</span>)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="nextAll"><a href="#nextAll" class="headerlink" title="nextAll()"></a>nextAll()</h2><p>取得元素之後的所有兄弟元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).nextAll()</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="siblings"><a href="#siblings" class="headerlink" title="siblings()"></a>siblings()</h2><p>取得所有同级元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;li&quot;</span>).siblings().css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="children"><a href="#children" class="headerlink" title="children()"></a>children()</h2><p>選取元素的子元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).children().css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="parent"><a href="#parent" class="headerlink" title="parent()"></a>parent()</h2><p>選取元素的父元素中符合選擇器的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).parent().css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="parents"><a href="#parents" class="headerlink" title="parents()"></a>parents()</h2><p>選取元素的祖先元素中符合選擇器的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).parents().css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="parentsUntil"><a href="#parentsUntil" class="headerlink" title="parentsUntil()"></a>parentsUntil()</h2><p>選取元素的祖先元素中直到遇到第一個符合選擇器的元素(不含此元素)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).parentsUntil().css(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="before"><a href="#before" class="headerlink" title="before()"></a>before()</h2><p>在DOM之前插入元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).before(<span class="string">&quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="after"><a href="#after" class="headerlink" title="after()"></a>after()</h2><p>在DOM後插入元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).after(<span class="string">&quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="prepend"><a href="#prepend" class="headerlink" title="prepend()"></a>prepend()</h2><p>將元素添加到被選元素的開頭</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).prepend(<span class="string">&quot;&lt;b&gt;prepend&lt;/b&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h2><p>將元素添加到被選元素的結尾</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).append(<span class="string">&quot;&lt;li&gt;hello&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><p>移除元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).remove();</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="closest"><a href="#closest" class="headerlink" title="closest()"></a>closest()</h2><p>尋找離當前元素最近的祖先元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).closest(<span class="string">&quot;ul&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><p>查找元素底下的子元素<br>與 <code>$(&#39;p .text&#39;)</code> 相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).find(<span class="string">&quot;.text&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>查找元素同層<br>與 <code>$(&#39;p.text&#39;)</code> 相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).filter(<span class="string">&quot;.text&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h2><p>選取元素中子孫元素符合選擇器的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).has(<span class="string">&quot;span&quot;</span>)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="eq"><a href="#eq" class="headerlink" title="eq()"></a>eq()</h2><p>元素中符合索引值的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).eq(<span class="number">1</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>


<h1 id="屬性與-CSS"><a href="#屬性與-CSS" class="headerlink" title="屬性與 CSS"></a>屬性與 CSS</h1><h2 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h2><p>設定元素的屬性和值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;img&quot;</span>).attr(<span class="string">&quot;width&quot;</span>,<span class="string">&quot;300&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="css"><a href="#css" class="headerlink" title="css()"></a>css()</h2><p>設定CSS樣式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;#000&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).css(&#123;</span><br><span class="line">  color: <span class="string">&#x27;#000&#x27;</span>,</span><br><span class="line">  fontSize: <span class="string">&#x27;16px&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="animate"><a href="#animate" class="headerlink" title="animate()"></a>animate()</h2><p>控制CSS動畫效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).animate(&#123;</span><br><span class="line">  opacity: <span class="number">0</span></span><br><span class="line">&#125;, <span class="number">1500</span>)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h2><p>元素動畫完成前執行停止<br><code>true</code> 可中斷執行中動畫<br><code>false</code> 不可中斷執行中動畫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).stop(<span class="literal">true</span>).animate(&#123;</span><br><span class="line">  opacity: <span class="number">0</span></span><br><span class="line">&#125;, <span class="number">1500</span>)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="addClass"><a href="#addClass" class="headerlink" title="addClass()"></a>addClass()</h2><p>加入class</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#add&#x27;</span>).addClass(<span class="string">&#x27;text&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass()"></a>removeClass()</h2><p>移除class</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#add&#x27;</span>).removeClass(<span class="string">&#x27;text&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass()"></a>toggleClass()</h2><p>收合class，如果有class就移除，沒有就加入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#add&#x27;</span>).toggleClass(<span class="string">&#x27;text&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>


<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="ready"><a href="#ready" class="headerlink" title="ready()"></a>ready()</h2><p>DOM都載入後執行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">&quot;ready!&quot;</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>也可為</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log( <span class="string">&quot;ready!&quot;</span> );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><p>生成被選元素的副本，包含子節點、文本和屬性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).clone().appendTo(<span class="string">&quot;section&quot;</span>);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="each"><a href="#each" class="headerlink" title="each()"></a>each()</h2><p>對每個選取元素進行處理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 執行動作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="create-element"><a href="#create-element" class="headerlink" title="create element"></a>create element</h2><p>使用標籤建立元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> elem = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<br/>

<h2 id="on"><a href="#on" class="headerlink" title="on()"></a>on()</h2><p>執行動作<br>mouseover、mouseout、mousedown、mouseup、mousemove、click、dbclick、keydown、keyup、focus、blur、change、resize、scroll</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>prev</tag>
        <tag>next</tag>
        <tag>nextAll</tag>
        <tag>siblings</tag>
        <tag>children</tag>
        <tag>parent</tag>
        <tag>parents</tag>
        <tag>parentsUntil</tag>
        <tag>before</tag>
        <tag>after</tag>
        <tag>prepend</tag>
        <tag>append</tag>
        <tag>remove</tag>
        <tag>closest</tag>
        <tag>find</tag>
        <tag>filter</tag>
        <tag>has</tag>
        <tag>eq</tag>
        <tag>attr</tag>
        <tag>animate</tag>
        <tag>addClass</tag>
        <tag>removeClass</tag>
        <tag>toggleClass</tag>
        <tag>ready</tag>
      </tags>
  </entry>
  <entry>
    <title>綁定 this 的方法-call / apply / bind</title>
    <url>/2021/07/31/js-call-apply-bind/</url>
    <content><![CDATA[<p><img src="https://imgur.com/ZVq8tKl.jpg" alt="Imgur"></p>
<p>因為 this 是動態的，所以會需要一些方法，讓函式被呼叫都能有固定的 this</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  name: <span class="string">&#x27;mimi&#x27;</span>,</span><br><span class="line">  printName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bobee&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我們都知道，要印出 cat 的 name，只需要調用 cat.printName();<br>但 dog 如果不新增方法，要怎麼印出 dog name 呢?<br>…<br>..<br>.</p>
<p><img src="https://imgur.com/i7BFQCv.png" alt="Imgur"></p>
<p>.<br>..<br>…<br>當然是借 cat 的來用囉 😆</p>
<br>

<h1 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h1><p>藉其他物件的函式，改變 this 的對象，用來強制指定 this，這三個的分別可以把他們分成兩組來看<br>call、apply 是指定 this 後直接執行<br>bind 是先指定 this，不會馬上執行，要調用時再加()執行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  name: <span class="string">&#x27;mimi&#x27;</span>,</span><br><span class="line">  printName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bobee&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cat.printName.call(dog); <span class="comment">// bobee</span></span><br><span class="line">cat.printName.apply(dog); <span class="comment">// bobee</span></span><br><span class="line">cat.printName.bind(dog)(); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<p>如此一來就可以順利取得 dog 的 name</p>
<br>

<h2 id="代入參數"><a href="#代入參數" class="headerlink" title="代入參數"></a>代入參數</h2><p>代入參數時使用的方式不太一樣</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">call(物件名稱, 參數<span class="number">1</span>, 參數<span class="number">2</span>); <span class="comment">// 逗號隔開</span></span><br><span class="line">apply(物件名稱, [參數<span class="number">1</span>, 參數<span class="number">2</span>]); <span class="comment">// 用陣列代入</span></span><br><span class="line">bind(物件名稱)(參數<span class="number">1</span>, 參數<span class="number">2</span>); <span class="comment">// 在函式調用代入</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  name: <span class="string">&#x27;mimi&#x27;</span>,</span><br><span class="line">  showAge: <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + num + <span class="string">&#x27;歲&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bobee&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cat.showAge.call(dog, <span class="number">11</span>); <span class="comment">// bobee11歲</span></span><br><span class="line">cat.showAge.apply(dog, [<span class="number">11</span>]); <span class="comment">// bobee11歲</span></span><br><span class="line">cat.showAge.bind(dog)(<span class="number">11</span>); <span class="comment">// bobee11歲</span></span><br></pre></td></tr></table></figure>
<br>
<br>
有了 call、apply、bind 可以確保當前的 this 是誰，避免不小心去連結到全域物件或是不想指向的物件喔！
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>call</tag>
        <tag>apply</tag>
        <tag>bind</tag>
      </tags>
  </entry>
  <entry>
    <title>搞懂JS-什麼是 closure 閉包</title>
    <url>/2021/07/25/js-closure/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/vCMSnlu.png" alt="Imgur"></p>
<p>閉包是由英文的 closure 直接翻譯過來的，所以從字面上看起來，可能也不知道閉包是什麼。</p>
<a id="more"></a>

<p>closure 是函式在與其語彙範疇之外被調用，也仍記得並能夠被存取的能力，可說是指向特定範疇的參考。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line">baz(); <span class="comment">// 2 closure</span></span><br></pre></td></tr></table></figure>
<p>bar() 函式能夠存取 foo 的內層範疇。<br>一般來說我們預期 foo() 的整個內層範疇都會消失，基本上函式離開執行環境時，也會同時將佔用的記憶體空間給釋放出來，但 closure 不會讓這件事發生，foo() 內層的範疇實際上仍在使用，因此不會消失。誰在使用它呢? 就是 bar() 函式本身。</p>
<br/>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  bar(baz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  fn(); <span class="comment">// closure</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們將內層函式 baz 傳給了 bar，並呼叫 bar 的內層函式 fn，包覆 foo() 內層範疇的 closure 就能藉由存取 a 來觀察。</p>
<p>而這些到處傳遞的函式也可以是間接的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn = baz; <span class="comment">// 指定 baz 給全域變數</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(); <span class="comment">// closure</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">bar(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>不管我們使用了何種方法，將一個內層函式運送到其語彙範疇之外，它依然會保留對他原本宣告處的一個範疇參考。</p>
<h1 id="迴圈與-Closure"><a href="#迴圈與-Closure" class="headerlink" title="迴圈與 Closure"></a>迴圈與 Closure</h1><p>closure 最經典的範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們預期它會每秒印出 1、2、3、4、5，但實際上是每秒印出了五次 6!?<br>這是因為 setTimeout 在迴圈結束後才執行，因此每次都會出現 6，那到底我們程式中缺少了什麼呢?</p>
<p>我們想要讓迴圈每次迭代都能在該次迭代進行時捕捉到他自己的 i 的一份拷貝，然而，那些計時器函式全都是在迴圈完成後執行，所有的那五個函式，雖然都是在各自的迴圈迭代中分別定義的，但它們都會覆蓋同一個共同的全域範疇，其中實際上只有一個 i 存在。</p>
<p>我們需要更多已被封閉包圍的範疇，也就是說，每次迭代都需要一個新的 closure scope</p>
<p>解決方式 IIFE：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, j * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用 IIFE 建立專屬範疇，並有自己的變數，來放置每次迭代 i 的一份拷貝</p>
<h1 id="重返區塊範疇"><a href="#重返區塊範疇" class="headerlink" title="重返區塊範疇"></a>重返區塊範疇</h1><p>我們用了 IIFE 來建立專屬每次迭代的新範疇，實際上，我們需要的是各次迭代專屬的區塊範疇。<br>let 宣告會劫持一個區塊，且每次重新宣告變數 i，並將上一次迭代的結果作為這一次的初始值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>區塊範疇和 closure 攜手合作，解決了所有的問題。</p>
<h1 id="模組"><a href="#模組" class="headerlink" title="模組"></a>模組</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoolModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> something = <span class="string">&#x27;cool&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> another = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(something);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doAnother</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(another.join(<span class="string">&#x27;!&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    doSomething: doSomething,</span><br><span class="line">    doAnother: doAnother,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = CoolModule();</span><br><span class="line">foo.doSomething(); <span class="comment">// cool</span></span><br><span class="line">foo.doAnother(); <span class="comment">// 1!2!3</span></span><br></pre></td></tr></table></figure>
<p>模組模式又稱揭露模組(revealing module)，可以將內層函式的資料<code>保持隱藏和私有</code>，調用時只回傳對外公開的 API，<br>這個物件回傳最終會指定給外層變數 foo，就能存取 API 的特性方法，例如 foo.doSomething()</p>
<p>要行使模組模式，有兩個必要條件：</p>
<ol>
<li>必須有一個外層的包含函式，而它必須至少被調用一次(每次都會建立一個新的模組實體)</li>
<li>這個包含函式至少得回傳一個內層函式，如此這個內層函式才能有覆蓋那個私有範疇的 closure，因此得以存取或修改那個私有狀態</li>
</ol>
<p>帶有一個函式特性的物件本身並不是一個真正的模組，從一次函式調用所回傳的物件，如果其上只有資料特性，沒有產生 closure 的函式，那它也不是一個真正的模組。</p>
<p>CoolModule()展示了一個獨立的模組創造器，可以被調用數次，每次都會建立一個新的模組實體。<br>如果只想要單一個實體的時候：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span> <span class="title">CoolModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> something = <span class="string">&#x27;cool&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> another = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(something);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doAnother</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(another.join(<span class="string">&#x27;!&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    doSomething: doSomething,</span><br><span class="line">    doAnother: doAnother,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">foo.doSomething(); <span class="comment">// cool</span></span><br><span class="line">foo.doAnother(); <span class="comment">// 1!2!3</span></span><br></pre></td></tr></table></figure>
<p>模組函式變成了一個 IIFE，即刻調用，並將回傳值直接指定給我們單一個模組實體式別字 foo</p>
<p>模組只是函式，所以能夠接收參數：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoolMoudule</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    identify: identify,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo1 = CoolMoudule(<span class="string">&#x27;foo 1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> foo2 = CoolMoudule(<span class="string">&#x27;foo 2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">foo1.identify(); <span class="comment">// &quot;foo 1&quot;</span></span><br><span class="line">foo2.identify(); <span class="comment">// &quot;foo 2&quot;</span></span><br></pre></td></tr></table></figure>
<p>為公開 API 的回傳物件取個名稱：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span> <span class="title">CoolModule</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// modify the public API</span></span><br><span class="line">    publicAPI.identify = identify2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">identify1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">identify2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id.toUpperCase());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> publicAPI = &#123;</span><br><span class="line">    change: change,</span><br><span class="line">    identify: identify1,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> publicAPI;</span><br><span class="line">&#125;)(<span class="string">&#x27;foo module&#x27;</span>);</span><br><span class="line"></span><br><span class="line">foo.identify(); <span class="comment">// foo module</span></span><br><span class="line">foo.change();</span><br><span class="line">foo.identify(); <span class="comment">// FOO MODULE</span></span><br></pre></td></tr></table></figure>
<p>在模組實體中保留對公開 API 物件的一個內層參考，就能夠從內部修改那個模組實體，包括新增與移除方法和特性，還有變更它們的值。</p>
<hr>
<h3 id="參考書籍：-你不知道的-JS-範疇與-Closures"><a href="#參考書籍：-你不知道的-JS-範疇與-Closures" class="headerlink" title="參考書籍： 你不知道的 JS-範疇與 Closures"></a>參考書籍： 你不知道的 JS-範疇與 Closures</h3><hr>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>closure</tag>
      </tags>
  </entry>
  <entry>
    <title>瀏覽器資料儲存-Cookie、LocalStorage、SessionStorage</title>
    <url>/2021/08/16/js-cookie/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>Cookie</th>
<th>LocalStorage</th>
<th>SessionStorage</th>
</tr>
</thead>
<tbody><tr>
<td>資料大小</td>
<td>≤4KB</td>
<td>≥5MB</td>
<td>≥5MB</td>
</tr>
<tr>
<td>生命週期</td>
<td>預設資料失效是關閉瀏覽器，也可以設定失效時間</td>
<td>不會過期，除非手動清除</td>
<td>每次分頁或瀏覽器關掉後就會清除</td>
</tr>
<tr>
<td>與 Server 溝通</td>
<td>每次都會攜帶在 HTTP 中，保存過多數據會帶來效能問題</td>
<td>僅在瀏覽器保存，不參與 Server 溝通</td>
<td>僅在瀏覽器保存，不參與 Server 溝通</td>
</tr>
</tbody></table>
<a id="more"></a>

<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>HTTP cookie（web cookie、browser cookie）為伺服器傳送給使用者瀏覽器的一個小片段資料，通常由伺服器透過 Set-Cookie header 傳遞給瀏覽器。瀏覽器收到後會將 cookie 儲存起來，並在下一次請求回傳 cookie 至相同的伺服器。</p>
<p>可以在後端設定修改，資料僅在本地瀏覽器儲存。可以設定失效時間，預設為關閉瀏覽器。</p>
<p><strong>常見用途</strong><br>Cookie 最常見的用途之一是認證身份，例如帳號登入、購物車、遊戲分數，或任何其他伺服器應該記住的資訊，也被應用於追蹤並分析使用者行為廣告上。Cookie 也被用於客戶端的儲存方式，但由於 cookie 會被附加在每一次的 request 之中，可能會影響效能，所以如果是不需要記錄在 server 的資訊，可以改用 storage API。</p>
<br>

<h1 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h1><p>不會和跟隨 HTTP 請求，所以不會佔用資源，適合儲存較複雜且不敏感的資料<br>需要使用者主動刪除，否則就是永久儲存，不同瀏覽器之間不會共享資料。<br>形式：key → value<br>key 跟 value 必須是字串，如果是 object 或 number 會自動轉換成 string</p>
<p><strong>常見用途</strong><br>而另一方面 localStorage 代替了 Cookie 管理購物車的工作，同時也能勝任其他工作。比如說 HTML 遊戲通常會產生一些數據，localStorage 也很適合使用。</p>
<br>

<h1 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h1><p>臨時儲存，跟 LocalStorage 只差在-每次分頁或瀏覽器關掉後就會清除</p>
<p><strong>常見用途</strong><br>如果遇到一些內容特別多的表單，為了提升用戶體驗，可能要把表單頁面拆分成多個子頁面，然後按照步驟引導用戶。這時候 sessionStorage 就可以發揮出效用。</p>
<br>

<h1 id="安全考慮"><a href="#安全考慮" class="headerlink" title="安全考慮"></a>安全考慮</h1><p>並非所有數據都適合儲存在這些其中。因為只要網站中存在 XSS 注入的風險，打開控制台，就可以隨意修改值，就能對你的 localStorage 肆意妄為。所以千萬不要將敏感數據儲存在這其中。</p>
<br>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="cookie-1"><a href="#cookie-1" class="headerlink" title="cookie"></a>cookie</h2><h3 id="讀取-cookie"><a href="#讀取-cookie" class="headerlink" title="讀取 cookie"></a>讀取 cookie</h3><p>讀取出來是一個很長的字串，字串裡面是所有曾經儲存的 cookie，格式是 key=value，用分號 ; 分隔不同的 cookie。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">allCookies = <span class="built_in">document</span>.cookie;</span><br><span class="line"><span class="built_in">console</span>.log(allCookies);</span><br></pre></td></tr></table></figure>
<p>Cookie 讀取函數<br>內建的方法沒有那麼好用，通常我們會自己寫一個方便讀取個別 cookie 的函數：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCookie</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cookieObj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> cookieAry = <span class="built_in">document</span>.cookie.split(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> cookie;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = cookieAry.length; i &lt; l; ++i) &#123;</span><br><span class="line">    cookie = jQuery.trim(cookieAry[i]);</span><br><span class="line">    cookie = cookie.split(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    cookieObj[cookie[<span class="number">0</span>]] = cookie[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cookieObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookieByName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = parseCookie()[name];</span><br><span class="line">  <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    value = <span class="built_in">decodeURIComponent</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我們就可以很方便的讀取 cookie，像是取得 username 的 cookie 只需要用 getCookieByName(‘username’)。</p>
<p>當我們在設定的 value 的時候，可以使用 encodeURIComponent() 這個方法來儲存內容，可以讓特殊符號 $#@*^!,這種轉換成 URI 形式，讓程式解析的時候比較不會出錯 。</p>
<h3 id="寫入-cookie"><a href="#寫入-cookie" class="headerlink" title="寫入 cookie"></a>寫入 cookie</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;cookie3=value3&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = newCookie;</span><br></pre></td></tr></table></figure>
<h3 id="參數設定"><a href="#參數設定" class="headerlink" title="參數設定"></a>參數設定</h3><p>建立 cookie 後面還可以加上這些設定：</p>
<p><strong>path=path</strong><br>設定能讀取到此 cookie 的路徑，例如 ;path=/ 表示讓整個網站都讀取得到，預設為目前網頁所在的路徑。</p>
<p><strong>domain=domain</strong><br>設定能讀取到此 cookie 的網域</p>
<p><strong>max-age=seconds</strong><br>設定 cookie 的存活期限，單位為秒，例如 86400 就是一天後失效。</p>
<p><strong>expires=date-in-GMTString-format</strong><br>設定 cookie 的存活期限，值是一個 Date.toUTCString() 格式的時間字串，這個參數在 HTTP 1.1 之後已經被 max-age 取代。</p>
<p><strong>secure = boolean/null</strong><br>設定 cookie 只能於 https 連線中被傳送。</p>
<p>設定一個新 cookie 只有 key=value 部分是必要的，其他部分都可以省略。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;id=test0; Secure; Path=/; Domain=example.com&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;id=test1; Expires=Wed, 21 Oct 2015 07:28:00 GMT&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;id=test2; Max-Age=2592000&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>當一個 cookie 沒有設定失效時間，就是所謂的 session cookie (有設定失效時間的則稱 persistent cookie)，該 cookie 會在使用者關閉瀏覽器後被自動刪除。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 設定兩個 cookie 叫 test1, test2</span></span><br><span class="line"><span class="comment">// 在瀏覽器關閉後會自動被刪除</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;test1=Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;test2=World&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定一個 username cookie 裡面的值是 Bobee，儲存一個月</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;username=Bobee; max-age=2592000; path=/&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="刪除-cookie"><a href="#刪除-cookie" class="headerlink" title="刪除 cookie"></a>刪除 cookie</h3><p>單純把你想要那個 cookies 值，設成過期就好<br>例如刪除 username 這一個 cookie：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&#x27;</span>;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="localStorage-1"><a href="#localStorage-1" class="headerlink" title="localStorage"></a>localStorage</h2><p>H5 對於 web storage 的支援很友好，使用方法很簡單</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 獲取指定 key 的本地儲存的值</span></span><br><span class="line"><span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;keyName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 value 儲存到 key 欄位中</span></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;keyName&#x27;</span>, value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除指定 key 的本地儲存的值</span></span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;keyName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除所有的key ,value,慎用，慎用，慎用，會清除所有，會把別的網頁的儲存也刪除</span></span><br><span class="line"><span class="built_in">localStorage</span>.clear();</span><br></pre></td></tr></table></figure>
<br>

<h2 id="sessionStorage-1"><a href="#sessionStorage-1" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p>基本和 localStorage 一樣</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//獲取指定 key 的本地儲存的值</span></span><br><span class="line">sessionStorage.getItem(<span class="string">&#x27;keyName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 value 儲存到 key 欄位中</span></span><br><span class="line">sessionStorage.setItem(<span class="string">&#x27;keyName&#x27;</span>, value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除指定 key 的本地儲存的值</span></span><br><span class="line">sessionStorage.removeItem(<span class="string">&#x27;keyName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除所有的 key, value,慎用，慎用，慎用，會清除所有，會把別的網頁的儲存也刪除</span></span><br><span class="line">sessionStorage.clear();</span><br></pre></td></tr></table></figure>
<br>

<h1 id="Storage-取物件"><a href="#Storage-取物件" class="headerlink" title="Storage 取物件"></a>Storage 取物件</h1><p>雖然我們可以透過 Storage 方法，輕鬆的將資料儲存在本地端，但是實際應用之後，我們會發現我們要儲存的資料 value，全部被轉成字串格式，因此當我們要儲存的資料為一個物件的時候就會產生一個嚴重的問題：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">&#x27;testString&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> number = <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">let</span> array = [<span class="string">&#x27;asd&#x27;</span>, <span class="number">123</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">let</span> object = &#123; <span class="attr">test</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item&#x27;</span>, string);</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item2&#x27;</span>, number);</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item3&#x27;</span>, array);</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item4&#x27;</span>, object);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item&#x27;</span>)); <span class="comment">// testString</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item2&#x27;</span>)); <span class="comment">// 12345</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item3&#x27;</span>)); <span class="comment">// &#x27;asd&#x27;, 123, true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item4&#x27;</span>)); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure>
<p>有幾種方法可以有效避開這種情況，而在本次的課題當中，我們要使用到  <code>JSON</code>  這種資料格式。JSON 全名為 JavaScript Object Notation (Javascript 物件符號)，可以把資料轉成字串型別，方便將資料於網頁與伺服器之間做傳輸，其中包含兩種方法：</p>
<ol>
<li><code>JSON.stringify()</code>：將資料轉為 JSON 格式的字串。</li>
<li><code>JSON.parse(myJSON)</code>：將資料由 JSON 格式字串轉回原本的資料內容及型別。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">&#x27;testString&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> number = <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">let</span> array = [<span class="string">&#x27;asd&#x27;</span>, <span class="number">123</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">let</span> object = &#123; <span class="attr">test</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item&#x27;</span>, <span class="built_in">JSON</span>.stringify(string));</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item2&#x27;</span>, <span class="built_in">JSON</span>.stringify(number));</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item3&#x27;</span>, <span class="built_in">JSON</span>.stringify(array));</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;item4&#x27;</span>, <span class="built_in">JSON</span>.stringify(object));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item&#x27;</span>))); <span class="comment">// testString</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item2&#x27;</span>))); <span class="comment">// 12345</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item3&#x27;</span>))); <span class="comment">// (3) [&quot;asd&quot;, 123, true]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;item4&#x27;</span>))); <span class="comment">// &#123;test: 1&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://www.fooish.com/javascript/cookie.html">JavaScript Cookie</a><br><a href="https://ithelp.ithome.com.tw/articles/10195522">LocalStorage</a></p>
<hr>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
        <tag>LocalStorage</tag>
        <tag>SessionStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>搞懂JS-什麼是hoisting?</title>
    <url>/2021/06/14/js-hoisting/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/n7k7xaM.jpg" alt="Imgur"></p>
<p>JS 在編譯時，會將宣告的變數、函式都先存放到一個記憶體空間，很像是被提升到最前面，賦值不會跟著被提升，實際運行時，再把值塞進剛剛存放的記憶體空間裡。</p>
<a id="more"></a>

<h1 id="變數提升-Variable-hoisting"><a href="#變數提升-Variable-hoisting" class="headerlink" title="變數提升(Variable hoisting)"></a>變數提升(Variable hoisting)</h1><p>先來看個範例:<br>我 log 了一個從未宣告的變數 dog</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(dog);</span><br></pre></td></tr></table></figure>
<p>會出現 Uncaught ReferenceError: dog is not defined 的錯誤，這非常合理！<br><br><br>那如果先 log 出下面的變數會發生什麼事?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(dog);</span><br><span class="line"><span class="keyword">var</span> dog = <span class="string">&quot;bobee&quot;</span>;</span><br></pre></td></tr></table></figure>
<br>
出現了 undefined！！為什麼不是 ReferenceError: dog is not defined 呢?
<br>
<br>
這是因為宣告的變數先被存放到記憶體空間了，而賦值不會被提升，你可以想成這樣

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dog;</span><br><span class="line"><span class="built_in">console</span>.log(dog);</span><br><span class="line">dog = <span class="string">&quot;bobee&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>注意！var dog 並不是真的被放到最前面，而是<code>記憶體空間</code>先存放了 dog，才會繼續依照執行順序運行程式碼，因此 log 會是 undefined，在執行程式碼之前，記憶體空間會是這樣</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">globle scope: &#123;</span><br><span class="line">  dog: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
在函式裡宣告的變數也會被放到 function scope 的記憶體空間

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">  <span class="keyword">var</span> bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行起來時會像是這樣:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bark;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">  bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="函式提升-Function-hoisting"><a href="#函式提升-Function-hoisting" class="headerlink" title="函式提升(Function hoisting)"></a>函式提升(Function hoisting)</h1><p>函式有分為函式陳述式(具名函式)、函式表達式(匿名函式)兩種，其中函式陳述式會被提升，函式表達式不會被提升，我們來看看範例。</p>
<h2 id="函式陳述式"><a href="#函式陳述式" class="headerlink" title="函式陳述式"></a>函式陳述式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dog();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>結果會是 woof<br>dog()放在函式之前，卻可以 log 出我們要的結果，這是 hoisting 的關係，可以想成這樣</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">&#125;</span><br><span class="line">dog();</span><br></pre></td></tr></table></figure>
<br>

<h2 id="函式表達式"><a href="#函式表達式" class="headerlink" title="函式表達式"></a>函式表達式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dog();</span><br><span class="line"><span class="keyword">var</span> dog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>結果變成 Uncaught TypeError: dog is not a function</p>
<p>這是因為宣告的變數先被提升了，會變成這個樣子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dog;</span><br><span class="line">dog();</span><br><span class="line">dog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bark = <span class="string">&quot;woof&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bark);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我們在呼叫 dog 時還不是個 function，因此會噴出 TypeError 的錯誤<br><br></p>
<h2 id="函式的-hoisting-可以輕易達成遞迴函式"><a href="#函式的-hoisting-可以輕易達成遞迴函式" class="headerlink" title="函式的 hoisting 可以輕易達成遞迴函式"></a>函式的 hoisting 可以輕易達成遞迴函式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">even</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> odd(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">odd</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> even(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">even(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>我們在 even 裡面呼叫 odd，在 odd 裡面也呼叫 even，這種遞迴狀況如果沒有 hoisting 是沒辦法解決的。<br><br></p>
<h1 id="函式與變數同名，函式優先"><a href="#函式與變數同名，函式優先" class="headerlink" title="函式與變數同名，函式優先"></a>函式與變數同名，函式優先</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// fn dog()&#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> dog;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>函式的優先權比變數高，如有多個函式，將會覆蓋前面的</p>
<br>

<h1 id="let-與-const-也有-hoisting"><a href="#let-與-const-也有-hoisting" class="headerlink" title="let 與 const 也有 hoisting"></a>let 與 const 也有 hoisting</h1><p>在上一篇<a href="https://happy9990929.github.io/2021/06/13/js-variable/">var, let, const 概念</a>就有講到， let、const 也是會有 hoisting 的，差別在於提升之後，var 宣告的變數會被初始化為 undefined，而 let 與 const 的宣告不會被初始化為 undefined，而且如果你在「賦值之前」就存取它，就會拋出錯誤。</p>
<p>在「提升之後」以及「賦值之前」這段期間被稱為「暫時死區」（Temporal Dead Zone，TDZ），可以幫助我們養成在變數還沒宣告之前，不要使用他的好習慣，讓程式碼可讀性提高。<br><br><br><br><br>hoisting 的筆記就告一段落，了解正確觀念真的很重要，歡迎路過多多指教，一起學習程式吧 😀<br></p>
<hr>
<h3 id="推薦閱讀：-我知道你懂-hoisting，可是你了解到多深？"><a href="#推薦閱讀：-我知道你懂-hoisting，可是你了解到多深？" class="headerlink" title="推薦閱讀： 我知道你懂 hoisting，可是你了解到多深？"></a>推薦閱讀： <a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting">我知道你懂 hoisting，可是你了解到多深？</a></h3><hr>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>hoisting</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-import &amp; export 怎麼用</title>
    <url>/2021/06/15/js-import-export/</url>
    <content><![CDATA[<p><img src="https://imgur.com/2Auy2fY.jpg" alt="Imgur"></p>
<p>ES6 推出了管理 javascript 模組的語法，透過 import、export 可以將每個檔案視為獨立模組，讓檔案不會過於龐大，且可讀性也比較高，每個系統都有相對的模組，在程式碼的管理與組織方便了許多。</p>
<a id="more"></a>

<p>要在瀏覽器中運行，我們需先在 HTML 加上模組類型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// import要匯入的檔案</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這樣一來，就可以開始做模組管理了！</p>
<h1 id="import-amp-export"><a href="#import-amp-export" class="headerlink" title="import &amp; export"></a>import &amp; export</h1><p>export 可以輸出任何類型的資料，如物件、函式與純值等，輸出又分為 default export、named export 兩種<br>import 是將 export 的檔案匯入，default export、named export 的輸入方式也稍微不太一樣，輸入的數量是沒有限制的</p>
<br>

<h2 id="default-export-預設匯出"><a href="#default-export-預設匯出" class="headerlink" title="default export(預設匯出)"></a>default export(預設匯出)</h2><p>單一輸出名稱，預設使用 export default，每一個檔案只能有一個 export default</p>
<h3 id="1-可以不指定變數名稱"><a href="#1-可以不指定變數名稱" class="headerlink" title="1.可以不指定變數名稱"></a>1.可以不指定變數名稱</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dog <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<h3 id="2-也可以指定變數名稱，-import-裡的名稱可以使用不同的名稱呼叫"><a href="#2-也可以指定變數名稱，-import-裡的名稱可以使用不同的名稱呼叫" class="headerlink" title="2.也可以指定變數名稱， import 裡的名稱可以使用不同的名稱呼叫"></a>2.也可以指定變數名稱， import 裡的名稱<code>可以</code>使用不同的名稱呼叫</h3><p>🔸 預設單筆</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> dog;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> goodDog <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(goodDog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<p>🔸 預設多筆</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; dog, add &#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> goodDog <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(goodDog.dog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="named-export-具名匯出"><a href="#named-export-具名匯出" class="headerlink" title="named export(具名匯出)"></a>named export(具名匯出)</h2><p>多個輸出名稱，需先宣告名稱，在 import 時必須使用一樣名稱才能匯出，即使只匯出一個名稱也需加上中括號{}</p>
<h3 id="1-export-每個宣告"><a href="#1-export-每個宣告" class="headerlink" title="1.export 每個宣告"></a>1.export 每個宣告</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dog &#125; <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>; <span class="comment">// 需加上中括號&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<h3 id="2-在結尾時統一使用物件匯出"><a href="#2-在結尾時統一使用物件匯出" class="headerlink" title="2.在結尾時統一使用物件匯出"></a>2.在結尾時統一使用物件匯出</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; dog, add &#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dog &#125; <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="import-export-全部資料-使用"><a href="#import-export-全部資料-使用" class="headerlink" title="import/export 全部資料 使用*"></a>import/export 全部資料 使用*</h1><p>*代表全部的意思，並賦予一個名稱，就可以呼叫你要的東西囉!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  age: <span class="number">11</span>,</span><br><span class="line">  bark: <span class="string">&quot;woof&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; dog, add &#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myModule <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myModule.dog.name); <span class="comment">// bobee</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="import-無需匯出的檔案"><a href="#import-無需匯出的檔案" class="headerlink" title="import 無需匯出的檔案"></a>import 無需匯出的檔案</h1><p>若想要單純執行某支檔案程式，則不用帶任何名稱引入即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;/export.js&quot;</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>有了 export 跟 import，程式碼可以被模組化，讓系統更好維護提升管理效率，<br>歡迎路過多多指教，一起學習程式吧 😀<br></p>
<hr>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>import</tag>
        <tag>export</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript-Math運算</title>
    <url>/2022/06/27/js-math/</url>
    <content><![CDATA[<p><img src="https://imgur.com/zI7wsQu.jpg" alt="Imgur"><br>寫 Javascript 時有時候會碰到一些小數、數學的運算，這篇歸納了一些常用的 Math 運算</p>
<a id="more"></a>

<h1 id="Math-max"><a href="#Math-max" class="headerlink" title="Math.max()"></a>Math.max()</h1><p>可返回指定的數中帶有較大的值的那個數<br>返回參數中最大的值。如果沒有參數，則返回 -Infinity。<br>如果有某個參數為 NaN，或是不能轉換成數字的非數字值，則返回 NaN。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">5</span>,<span class="number">7</span>) <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">Math</span>.max() <span class="comment">// -Infinity</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="literal">NaN</span>, <span class="number">999</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="Math-min"><a href="#Math-min" class="headerlink" title="Math.min()"></a>Math.min()</h1><p>可返回指定的數中帶有較小的值的那個數</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">5</span>,<span class="number">7</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.max() <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="literal">NaN</span>, <span class="number">999</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed()"></a>toFixed()</h1><p>四捨五入 保留兩位小數</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">2.446242342</span>;</span><br><span class="line">num.toFixed(<span class="number">2</span>); <span class="comment">// 2.45</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h1><p>取得亂數</p>
<p><strong>原始回傳0~0.99999(無窮小數)</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random()</span><br></pre></td></tr></table></figure>
<p>值範圍：0 ~ 0.9999999(無窮小數)<br><br/></p>
<p><strong>設定亂數最大值</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> max = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">Math</span>.random() * max</span><br></pre></td></tr></table></figure>
<p>值範圍：0 ~ 2.9999999(無窮小數)<br><br/></p>
<p><strong>設定亂數最小值&amp;最大值</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> max = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> min = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Math</span>.random() * max + min</span><br></pre></td></tr></table></figure>
<p>值範圍：1 ~ 1.9999999(無窮小數)<br><br/></p>
<p><strong>設定亂數整數最小值&amp;最大值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">2</span> + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>值範圍：1 ~ 4 的整數<br><br/></p>
<h1 id="Math-round"><a href="#Math-round" class="headerlink" title="Math.round()"></a>Math.round()</h1><p>四捨五入</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.round(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">4.3</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">4.5</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="Math-ceil"><a href="#Math-ceil" class="headerlink" title="Math.ceil()"></a>Math.ceil()</h1><p>取得大於指定數的最小整數值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">1.5</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="Math-floor"><a href="#Math-floor" class="headerlink" title="Math.floor()"></a>Math.floor()</h1><p>取得小於指定數的最大整數值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">0</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">1.5</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="千分位"><a href="#千分位" class="headerlink" title="千分位"></a>千分位</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCurrency</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = num.toString().split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  parts[<span class="number">0</span>] = parts[<span class="number">0</span>].replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> parts.join(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Javascript</tag>
        <tag>Math.max</tag>
        <tag>Math.min</tag>
        <tag>toFixed</tag>
        <tag>Math.floor</tag>
        <tag>Math.random</tag>
        <tag>Math.round</tag>
        <tag>Math.ceil</tag>
        <tag>js 無條件進位</tag>
        <tag>js 四捨五入</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-Promise 非同步的解決方案</title>
    <url>/2021/07/29/js-promise/</url>
    <content><![CDATA[<p><img src="https://imgur.com/RuN7HR6.png" alt="Imgur"></p>
<p>由於非同步的程式沒辦法照順序執行，像是 AJAX、setTimeout 都是典型的非同步，ES6 提出了 Promise 的新物件，可以確保非同步處理完畢後，再進行下一步的動作，Promise 就是來解決非同步的程式碼。</p>
<a id="more"></a>

<h1 id="Promise-物件的三種狀態"><a href="#Promise-物件的三種狀態" class="headerlink" title="Promise 物件的三種狀態"></a>Promise 物件的三種狀態</h1><p>在建立 Promise 之前，先來了解 Promise 只會出現以下三種狀態</p>
<ol>
<li>pending 初始狀態 (進行中)</li>
<li>fulfilled 事件已完成，回傳 resolve 的結果</li>
<li>rejected 事件已失敗，回傳 rejected 的結果</li>
</ol>
<p>Promise 狀態的改變只有兩種可能<br>從 pending 變成 fulfilled<br>從 pending 變成 rejected<br>而一但狀態改變就會固定，永遠不會再改變狀態了。</p>
<br>

<h1 id="建立一個-Promise-物件"><a href="#建立一個-Promise-物件" class="headerlink" title="建立一個 Promise 物件"></a>建立一個 Promise 物件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(<span class="string">&#x27;失敗&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li>創建一個新 Promise 構造函數，並代入一個 function</li>
<li>function 代入兩個參數，這兩個參數也是函式，分別為 resolve (執行成功)、reject (執行失敗)</li>
<li>設定 resolve / reject 回傳方法<br>resolve() 執行成功的函式<br>reject() 執行失敗的函式</li>
</ol>
<br>

<h1 id="取得-Promise-結果"><a href="#取得-Promise-結果" class="headerlink" title="取得 Promise 結果"></a>取得 Promise 結果</h1><p>Promise 物件生成後，可以用 Promise 的原型方法來執行取得的結果</p>
<h2 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h2><p>綁定當 fulfilled 或 rejected 狀態時，分別要執行的函數，.then 可傳入兩個參數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 當狀態是 fulfilled (成功) 時，執行這個函數</span></span><br><span class="line">    <span class="comment">// value 是透過 resolve() 傳進來的參數</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 當狀態是 rejected (失敗) 時，執行這個函數</span></span><br><span class="line">    <span class="comment">// error 是透過 reject() 傳進來的參數</span></span><br><span class="line">    <span class="comment">// 此參數選擇性的，不一定需要</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h2><p>綁定當 rejected 狀態時，要執行的函數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="finally"><a href="#finally" class="headerlink" title=".finally()"></a>.finally()</h2><p>不帶有任何參數，表示非同步執行完畢，無論是否正確完成，要執行的函數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">success</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(success);</span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<br>

<h1 id="Chaining-串接"><a href="#Chaining-串接" class="headerlink" title="Chaining 串接"></a>Chaining 串接</h1><p>then、catch 執行後都會返回一個新的 Promise 物件，可以使用鏈接的方式不斷的進行<br>後面的 then 會接收前一個 then 的 return value 當作參數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str + <span class="string">&#x27; 456&#x27;</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str); <span class="comment">// 123456</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<br>

<h1 id="Promise-方法介紹"><a href="#Promise-方法介紹" class="headerlink" title="Promise 方法介紹"></a>Promise 方法介紹</h1><h2 id="Promise-all-iterable"><a href="#Promise-all-iterable" class="headerlink" title="Promise.all(iterable)"></a>Promise.all(iterable)</h2><p>透過陣列的形式傳入多個 promise 函式，Promise.all 會回傳一個陣列，分別有三種情況</p>
<ol>
<li>當引數 iterable 中所有的 promises 都被實現（resolved）</li>
<li>引數 iterable 不含任何 promise 時，被實現</li>
<li>得到一個 rejected 時，第一個被 reject 的值會被傳進回 all Promise 物件的 callback</li>
</ol>
<p>當全部執行完成後回傳陣列結果，陣列的結果順序與傳入的順序一致，適合用在多支 API 要一起執行，並確保全部完成後才進行其他工作時</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">values</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(values); <span class="comment">// [3, 123, &quot;foo&quot;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<h2 id="Promise-race-iterable"><a href="#Promise-race-iterable" class="headerlink" title="Promise.race(iterable)"></a>Promise.race(iterable)</h2><p>透過陣列的形式傳入多個 promise 函式，Promise.race 的結果為第一個最先改變狀態的 Promise 物件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 會顯示 &quot;two&quot;，因為 p2 比較快被 resolve</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<h2 id="Promise-resolve-value"><a href="#Promise-resolve-value" class="headerlink" title="Promise.resolve(value)"></a>Promise.resolve(value)</h2><p>直接定義 Promise 物件 resolve 的狀態，回傳一個 Promise 物件，value 有三種可能</p>
<ol>
<li>value 為具有”then”方法的 Promise，回傳的 promise 將依其結果採取其最終狀態</li>
<li>value 為 promise，呼叫 Promise.resolve 之結果</li>
<li>其他情形都將回傳以 value 實現的 promise</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">&#x27;Success&#x27;</span>).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Fail&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出 &quot;Success&quot;</span></span><br></pre></td></tr></table></figure>
<br>

<h2 id="Promise-reject-reason"><a href="#Promise-reject-reason" class="headerlink" title="Promise.reject(reason)"></a>Promise.reject(reason)</h2><p>回傳一個以 reason 拒絕的 Promise 物件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Fail&#x27;</span>)).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Fail&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出 &quot;Fail&quot;</span></span><br></pre></td></tr></table></figure>
<p><br><br><br>有了 Promise 非同步語法，就可以捨棄古早時期使用的 callback hell，變得更清楚直觀，程式碼可讀性更高了 👍</p>
<hr>
<h3 id="參考文獻：-Fooish-程式技術、MDN、卡斯柏’s-blog"><a href="#參考文獻：-Fooish-程式技術、MDN、卡斯柏’s-blog" class="headerlink" title="參考文獻： Fooish 程式技術、MDN、卡斯柏’s blog"></a>參考文獻： <a href="https://www.fooish.com/javascript/ES6/Promise.html">Fooish 程式技術</a>、<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise/all">MDN</a>、<a href="https://wcc723.github.io/development/2020/02/16/all-new-promise/">卡斯柏’s blog</a></h3><hr>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>Javascript</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE的生命週期</title>
    <url>/2021/03/05/lifecycle-hooks/</url>
    <content><![CDATA[<h1 id="VUE-的生命週期-Lifecycle-Hooks"><a href="#VUE-的生命週期-Lifecycle-Hooks" class="headerlink" title="VUE 的生命週期(Lifecycle Hooks)"></a>VUE 的生命週期(Lifecycle Hooks)</h1><p><strong>setup</strong> =&gt; vue 掛載到 app 上面後執行<br><strong>onBeforeMount</strong> =&gt; DOM 渲染前執行<br><strong>onMounted</strong> =&gt; DOM 渲染完成後執行<br><strong>onBeforeUpdate</strong> =&gt; 資料更新 DOM 更改前執行<br><strong>onUpdated</strong> =&gt; 資料更新 DOM 更改後執行</p>
<a id="more"></a>

<p><strong>onBeforeUnmount</strong> =&gt; 組件銷毀前執行<br><strong>onUnmounted</strong> =&gt; 組件銷毀後執行<br><strong>onErrorCaptured</strong> =&gt; 當組件發出錯誤時後調用<br><strong>onRenderTracked</strong> =&gt; 監控 virtual DOM 重新選染時調用 ( 此事件告訴你操作什麼監聽了組件以及該操作的物件)<br><strong>onRenderTriggered</strong> =&gt; 監控 virtual DOM 重新選染時調用 ( 此事件告訴你操作什麼觸發了重新渲染，以及該操作的物件)</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>生命週期</tag>
      </tags>
  </entry>
  <entry>
    <title>var, let, const 變數宣告差別</title>
    <url>/2021/06/13/js-variable/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/W5cIWBE.jpg" alt="Imgur"></p>
<p>ES6 提出的 let 與 const，能讓宣告變數的使用方式、型態可以更謹慎，也會限制 scope 範圍，一起來看看 var, let, const 之間有什麼差異吧！</p>
<a id="more"></a>

<h1 id="var-let-const-的差異"><a href="#var-let-const-的差異" class="headerlink" title="var, let, const 的差異"></a>var, let, const 的差異</h1><table>
<thead>
<tr>
<th></th>
<th>可以被修改</th>
<th>可重複宣告</th>
<th>作用域</th>
<th>hoisting（變量提升）</th>
<th>宣告前存取</th>
</tr>
</thead>
<tbody><tr>
<td>var</td>
<td>✔️ 可以</td>
<td>✔️ 可重複宣告並覆蓋</td>
<td>僅限 funciton</td>
<td>有 hoisting</td>
<td>undefine</td>
</tr>
<tr>
<td>let</td>
<td>✔️ 可以</td>
<td>❌ 不可</td>
<td>block 區塊</td>
<td>有 hoisting + TDZ</td>
<td>ReferenceError</td>
</tr>
<tr>
<td>const</td>
<td>❌ 不可</td>
<td>❌ 不可</td>
<td>block 區塊</td>
<td>有 hoisting + TDZ</td>
<td>ReferenceError</td>
</tr>
</tbody></table>
<h1 id="var"><a href="#var" class="headerlink" title="var"></a>var</h1><p>var 的作用域只有在<code>函式</code>區塊，在 if 或 for 迴圈是沒有作用域的，都會被當成全域使用，如有外部程式跟這些變數名稱相同時，容易發生不可預期的錯誤，或在無意間修改了不想修改的變數</p>
<p>在 var 宣告中會被拆成兩行，變數的宣告會提升，賦值不會提升</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefine</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>等同於</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<br>
再來看看 var 的作用域

<h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">print(); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>在函式中是有作用域的，函式外的 a 不會被覆蓋掉</p>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//2 a被覆蓋掉了</span></span><br></pre></td></tr></table></figure>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>, a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b&quot;</span>, b); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>在 if 跟 for 裡的變數都會被修改，b 在 global 未宣告，卻可以印出數值，證明在這邊是沒有自己的區塊的</p>
<p>如將此改為 let，就可以達到我們要的結果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>, a); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b&quot;</span>, b); <span class="comment">// b is not defined</span></span><br></pre></td></tr></table></figure>
<h2 id="迴圈-非同步"><a href="#迴圈-非同步" class="headerlink" title="迴圈+非同步"></a>迴圈+非同步</h2><p>預期: 印出每秒 1-9 的數字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 10(印了9次)</span></span><br><span class="line">  &#125;, a * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>印出來的是 10，並非我們想要的結果，可以用閉包的方式解決</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(b); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">    &#125;, b * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此一來可以出現我們要的結果，但最簡單的方式還是直接改為 let 就可以輕易的做到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">  &#125;, a * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h1><p>let、const 的作用域都在 block{}區塊，他們兩者最大的不同是<br>let 可以被修改的變數<br>const 不可以被修改的常數，除非是參考值(物件、陣列)</p>
<p>比較特別的是，let、const 有「暫時死區」（Temporal Dead Zone，TDZ）的特性，中文解釋為「時間上暫時無法達到的區域」，如果在宣告變數之前使用變數，這個變數就是存在「暫時死區」中無法存取，可以幫助我們養成在變數還沒宣告之前，不要使用他的好習慣，讓程式碼可讀性提高。<br>那 let、const 會不會有 hoisting 呢?<br>答案是: 有的! let、const 存在變數提升，但是在「提升之後」以及「賦值之前」的 TDZ 之間是不存在的。</p>
<h2 id="物件是參考"><a href="#物件是參考" class="headerlink" title="物件是參考"></a>物件是參考</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure>
<p>const 如果為參考值(by reference)是可以被修改的<br><br><br>ES6 提出的 let 與 const，能讓宣告變數可以更謹慎，也會限制範圍，才不會造成出乎意料的結果。</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>var</tag>
        <tag>let</tag>
        <tag>const</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 與 npm 更新的方式</title>
    <url>/2021/02/08/nodeJS-update/</url>
    <content><![CDATA[<h2 id="Node-js-更新"><a href="#Node-js-更新" class="headerlink" title="Node.js 更新"></a>Node.js 更新</h2><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm cache clean -f</span><br><span class="line">npm install -g n</span><br><span class="line"><span class="comment">// 若要更新到最後一個版本</span></span><br><span class="line">n latest</span><br><span class="line"><span class="comment">// 若要更新到穩定版本</span></span><br><span class="line">n stable</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>上面的方法用在 windows 是行不通的，由於 n 模塊不支援 windows，需在瀏覽器中打開 node 官網下載 LTS 版本的 node 安裝包，安裝後覆蓋同路徑即可。<br><br>查看 node 安裝路徑<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">where</span> node</span><br></pre></td></tr></table></figure>
<h2 id="檢查-Node-js-版本"><a href="#檢查-Node-js-版本" class="headerlink" title="檢查 Node.js 版本"></a>檢查 Node.js 版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<h2 id="NPM-更新"><a href="#NPM-更新" class="headerlink" title="NPM 更新"></a>NPM 更新</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure>
<h2 id="檢查-NPM-版本"><a href="#檢查-NPM-版本" class="headerlink" title="檢查 NPM 版本"></a>檢查 NPM 版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>nodeJs</category>
      </categories>
      <tags>
        <tag>nodeJs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 npm ci 不更新 package-lock.json</title>
    <url>/2022/01/01/npm-ci/</url>
    <content><![CDATA[<p><img src="https://imgur.com/95xxPeT.png" alt="npm"></p>
<p>最近在 clone 新專案時，下了 npm install，發現 package-lock.json 裡的套件版本被更新了，但又怕推上去會有版本上的問題😓<br>爬了一下文才知道，原來 npm install 會自動幫你更新套件😨 可是瑞凡~~~我沒有要更新啊!!<br>不過意外也發現了另一個好東西<code>npm ci</code>，可以解決這個問題。</p>
<a id="more"></a>

<h1 id="什麼是-npm-ci"><a href="#什麼是-npm-ci" class="headerlink" title="什麼是 npm ci ?"></a>什麼是 npm ci ?</h1><p>npm ci 跟 npm i 一樣，都可以安裝依賴，npm ci 的 ci 是「Continuous Integration」，中文是持續集成的意思，這個指令在 npm 5.7.1 的版本才能使用。</p>
<h1 id="npm-install-與-npm-ci-有什麼差別"><a href="#npm-install-與-npm-ci-有什麼差別" class="headerlink" title="npm install 與 npm ci 有什麼差別?"></a>npm install 與 npm ci 有什麼差別?</h1><p>npm install 針對 package.json 的版本來安裝套件，執行後會出現 node_modules、package-lock.json，會自動還原專案並更新套件</p>
<p>npm ci 針對 package-lock.json 的版本來安裝套件，專案需有 package-lock.json 或 npm-shrinkwrap.json 文件存在，因為是參照package-lock.json 的版本，所以不會有版本自動更新的問題<br>另外還有一些 npm ci 需注意的地方<br>🔸 當 package-lock.json 中的依賴於 package.json 不一致時，npm ci 退出但不會修改 package-lock.json<br>🔸 npm ci 只可以一次性的安裝整個專案依賴，但無法新增單個依賴項<br>🔸 如果 node_modules 已經存在，它會先刪除 node_modules 之後再安裝，以確保乾淨的狀態</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://hsiangfeng.github.io/nodejs/20211027/1827968017/">npm ci 與 npm install 差異</a></p>
<hr>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm ci</tag>
        <tag>npm install</tag>
        <tag>package-lock被更新</tag>
      </tags>
  </entry>
  <entry>
    <title>用 VUE 來做 recaptcha v2 / recaptcha v3 非機器人驗證</title>
    <url>/2022/06/12/plugins-recaptcha/</url>
    <content><![CDATA[<p><img src="https://imgur.com/zFD6djt.jpg" alt="reCAPTCHA"></p>
<p>Google reCAPTCHA 是一個智慧驗證工具，可以幫助網站阻擋機器人，或任何形式的自動攻擊，既簡單又安全，不用再輸入難以辨識的驗證英文數字圖了😆</p>
<a id="more"></a>
<br/>

<h1 id="reCAPTCHA-介紹"><a href="#reCAPTCHA-介紹" class="headerlink" title="reCAPTCHA 介紹"></a>reCAPTCHA 介紹</h1><p><strong>reCAPTCHA 有三種版本，分別為 reCAPTCHA v2、reCAPTCHA v3、Enterprise</strong><br><br/></p>
<p><strong>reCAPTCHA v2 以問題驗證要求</strong><br>「追蹤在網站登入單一頁面」<br>v2 會依用戶點擊驗證框「我不是機器人」之前、當時和之後的行為，從而來判斷是否是人為操作，如果你被誤判為機器人，網站會要求人機驗證，如從九宮格圖片中選出指定的圖案</p>
<p><img src="https://imgur.com/vj4lIaa.jpg" alt="reCAPTCHA v2"><br><br/></p>
<p><strong>reCAPTCHA v3 以分數驗證要求</strong><br>「所有的頁面都會有 reCaptcha 的追蹤功能」<br>不需做任何事，v3會針對使用者行為，判定安全性分數，1.0 代表操作自然很像真人，0.0 意味極有可能是機器人，如安全性太低，網站才會要求人機驗證。<br>如使用 v3，右下角會出現 reCAPTCHA 的圖示，可用 css 隱藏<br><img src="https://imgur.com/gzCvEID.jpg" alt="reCAPTCHA v3"></p>
<br/>

<p><strong>Enterprise 企業版</strong><br>多了更多進階功能，v2/v3 有每個月一百萬次的使用上限，若用量大於一百萬，可選擇 Enterprise</p>
<br/>

<p>接下來會使用 VUE 來做 reCAPTCHA v2、reCAPTCHA v3 的前端操作<br>在這之前先來輕鬆一下～你找得出哪些是蝴蝶犬嗎😆</p>
<p><img src="https://imgur.com/Eb8xmSQ.jpg" alt="九宮格"></p>
<br/>

<p>回到正題～</p>
<h1 id="reCAPTCHA-使用流程"><a href="#reCAPTCHA-使用流程" class="headerlink" title="reCAPTCHA 使用流程"></a>reCAPTCHA 使用流程</h1><p>註冊 reCAPTCHA ➝ 拿到網站金鑰🔑 ➝ 金鑰放進 reCAPTCHA 程式碼 ➝ 取得驗證 token 回傳給後端</p>
<p><br/><br/></p>
<h1 id="📝reCAPTCHA-註冊"><a href="#📝reCAPTCHA-註冊" class="headerlink" title="📝reCAPTCHA 註冊"></a>📝reCAPTCHA 註冊</h1><p>註冊 reCAPTCHA 很簡單又快速<br>先登入 Google 帳號，接著進到 <a href="https://www.google.com/recaptcha/about/">reCAPTCHA</a> 的頁面，點選 v3 Admin Console</p>
<p><img src="https://imgur.com/PApULbC.jpg" alt="v3 Admin Console"></p>
<p>會進入下面的表單<br><br/></p>
<p><img src="https://imgur.com/W8feu1g.jpg" alt="reCAPTCHA form"></p>
<p><strong>標籤</strong><br>取一個可以輕鬆分辨哪個網站使用的標籤</p>
<p><strong>reCAPTCHA 類型</strong><br>依需求選擇 reCAPTCHA v3 或 reCAPTCHA v2，其中 reCAPTCHA v2 會多三個選項<br>🔸「我不是機器人」核取方塊: 勾選「我不是機器人」核取方塊來驗證要求<br>🔸隱形 reCAPTCHA 標記: 在背景中驗證要求，提交即驗證<br>🔸reCAPTCHA Android: 驗證 Android 應用程式中的要求</p>
<p><strong>網域</strong><br>白名單的意思，輸入要應用的網址(方便本機測試可加 localhost)</p>
<p><strong>接受服務條款</strong><br>同意遵守 reCAPTCHA 服務條款</p>
<br/>

<p>提交後將會出現傳說中兩把鑰匙🔑</p>
<p><img src="https://imgur.com/6UuxNOf.jpg" alt="key"></p>
<p><strong>🔑金鑰是給前端頁面使用的，🔑密鑰是後端在 server 使用的</strong><br>不用擔心 key 忘記，reCAPTCHA 後台都可以看到</p>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="8536485431"></ins></p>
<h1 id="reCAPTCHA-v2"><a href="#reCAPTCHA-v2" class="headerlink" title="reCAPTCHA v2"></a>reCAPTCHA v2</h1><p>使用 <a href="https://www.npmjs.com/package/vue3-recaptcha2">vue3-recaptcha2</a> 套件，可以快速使用 v2</p>
<p><strong>安裝 vue3-recaptcha2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue3-recaptcha2</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>程式碼</strong><br>recaptcha-v2.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;vue-recaptcha</span><br><span class="line">  :sitekey=&quot;v2Sitekey&quot;</span><br><span class="line">  size=&quot;normal&quot;</span><br><span class="line">  theme=&quot;light&quot;</span><br><span class="line">  hl=&quot;zh-TW&quot;</span><br><span class="line">  @verify=&quot;recaptchaVerified&quot;</span><br><span class="line">  @expire=&quot;recaptchaExpired&quot;</span><br><span class="line">  @fail=&quot;recaptchaFailed&quot;</span><br><span class="line">  ref=&quot;vueRecaptcha&quot;&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">vue-recaptcha</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vueRecaptcha <span class="keyword">from</span> <span class="string">&#x27;vue3-recaptcha2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   components: &#123;</span><br><span class="line">	  vueRecaptcha</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 帶入你的 siteKey</span></span><br><span class="line">    <span class="keyword">const</span> v2Sitekey = <span class="string">&#x27;6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回傳一組 token，並把 token 傳給後端驗證</span></span><br><span class="line">    <span class="keyword">const</span> recaptchaVerified = <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> recaptchaExpired = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 過期後執行動作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> recaptchaFailed = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 失敗執行動作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      v2Sitekey, recaptchaVerified, recaptchaExpired, recaptchaFailed</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/><br/></p>
<h1 id="reCAPTCHA-v3"><a href="#reCAPTCHA-v3" class="headerlink" title="reCAPTCHA v3"></a>reCAPTCHA v3</h1><p>使用 <a href="https://www.npmjs.com/package/vue-recaptcha-v3">vue-recaptcha-v3</a> 套件，可以快速使用 v3</p>
<p><strong>安裝 vue-recaptcha-v3</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-recaptcha-v3</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>程式碼</strong><br>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; VueReCaptcha &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-recaptcha-v3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"> <span class="comment">// 帶入你的 siteKey</span></span><br><span class="line">app.use(VueReCaptcha, &#123; <span class="attr">siteKey</span>: <span class="string">&#x27;6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI&#x27;</span> &#125;);</span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br/>

<p>recaptcha-v3.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;row g-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 position-relative&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>帳號<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 position-relative&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-label&quot;</span>&gt;</span>密碼<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;recaptcha&quot;</span>&gt;</span>Submit form<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReCaptcha &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-recaptcha-v3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; executeRecaptcha, recaptchaLoaded &#125; = useReCaptcha()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// submit 回傳一組 token，並把 token 傳給後端驗證</span></span><br><span class="line">    <span class="keyword">const</span> recaptcha = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> recaptchaLoaded()</span><br><span class="line">      <span class="keyword">const</span> token = <span class="keyword">await</span> executeRecaptcha(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(token)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      recaptcha</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>不管使用 recaptcha v2 或 recaptcha v3，都是多了一層保護機制，設定上也不困難，一起讓網站更安全吧👊🏽👊🏽👊🏽</p>
]]></content>
      <categories>
        <category>Plugins</category>
      </categories>
      <tags>
        <tag>recaptcha v2</tag>
        <tag>recaptcha v3</tag>
        <tag>recaptcha驗證</tag>
        <tag>我不是機器人 驗證</tag>
      </tags>
  </entry>
  <entry>
    <title>React基本組件介紹</title>
    <url>/2022/06/29/react-basic-component/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<a id="more"></a>

<h1 id="組件裡有什麼"><a href="#組件裡有什麼" class="headerlink" title="組件裡有什麼?"></a>組件裡有什麼?</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="comment">//static property靜態屬性</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static method靜態函式</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromProps</span>(<span class="params">nextProps, prevState</span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//state屬性</span></span><br><span class="line">    state = &#123;</span><br><span class="line">      x: <span class="number">1</span>,</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生命週期函式，生命週期裡的this一定是指本身class的組件</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自訂函式，函式this不一定指本身組件，但如宣告為屬性並用=&gt;this就為組件本身</span></span><br><span class="line">    onChange= <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//組件裡一定要有render函式，render函式一定要return一個元素</span></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可在組件外面定義屬性</span></span><br><span class="line">Item.propTypes = &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="事件處理與狀態更新"><a href="#事件處理與狀態更新" class="headerlink" title="事件處理與狀態更新"></a>事件處理與狀態更新</h1><p>狀態 ⇒ state<br>變更狀態 ⇒ setState<br>範例: 點擊按鈕後，將 title 的 hello 變更成 hi</p>
<p>Message.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    title: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  changeState = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      title: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;<span class="built_in">this</span>.state.title&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.changeState&#125;&gt;change state&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Message;</span><br></pre></td></tr></table></figure>
<p>自訂函式如果不是使用箭頭函式宣告的話，要加上 constructor，指定 this 為組件本身，<br>如果沒有指定 this，onClick 的 this 會指向 button，button 沒有 setState 屬性就會報錯，建議自訂函式還是以箭頭函式的方法宣告</p>
<p>Message.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    title: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.changeState = <span class="built_in">this</span>.changeState.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">changeState</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      title: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;<span class="built_in">this</span>.state.title&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.changeState&#125;&gt;change state&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Message;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="props-上面傳下來的屬性"><a href="#props-上面傳下來的屬性" class="headerlink" title="props: 上面傳下來的屬性"></a>props: 上面傳下來的屬性</h1><p>一樣的組件，但想要不同的內容，可以使用 props，<br>範例： ol 裡的每個 li 的文字分別為不同的文字<br>props 傳字串直接使用引號，如果傳其他型態要使用大括號 {}</p>
<p>Item.js (內層組件)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li&gt;&#123;<span class="built_in">this</span>.props.text&#125; &#123;<span class="built_in">this</span>.props.price + <span class="number">1</span>&#125;&lt;/li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Item;</span><br></pre></td></tr></table></figure>
<p>List.js (外層組件)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;ol&gt;</span><br><span class="line">        &lt;Item text=<span class="string">&#x27;hello&#x27;</span> price=&#123;<span class="number">10</span>&#125;/&gt;</span><br><span class="line">        &lt;Item text=<span class="string">&#x27;world&#x27;</span> price=<span class="string">&#x27;10&#x27;</span>/&gt;</span><br><span class="line">        &lt;Item text=<span class="string">&#x27;hello world&#x27;</span> price=<span class="string">&#x27;100&#x27;</span>/&gt;</span><br><span class="line">      &lt;/ol&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<br/>

<p>如標籤是 closing-tag 包起來，可用 this.props.children 取得文字</p>
<p>Item.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li&gt;&#123;<span class="built_in">this</span>.props.children&#125;&lt;/li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Item;</span><br></pre></td></tr></table></figure>
<p>List.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;ol&gt;</span><br><span class="line">        &lt;Item&gt;hello1&lt;/Item&gt;</span><br><span class="line">        &lt;Item&gt;hello2&lt;/Item&gt;</span><br><span class="line">        &lt;Item&gt;hello3&lt;/Item&gt;</span><br><span class="line">      &lt;/ol&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>props</tag>
        <tag>React</tag>
        <tag>React component</tag>
      </tags>
  </entry>
  <entry>
    <title>React基本入門</title>
    <url>/2022/06/28/react-basic/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"><br>React 是一個陳述式、高效且具有彈性的 JavaScript 函式庫，用以建立使用者介面，這篇介紹基本的 React 入門</p>
<a id="more"></a>

<h1 id="安裝React"><a href="#安裝React" class="headerlink" title="安裝React"></a>安裝React</h1><p>安裝最新版本 + 專案名稱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx create-react-app@latest myapp</span><br></pre></td></tr></table></figure>
<p>啟動</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="JSX語法-用-JS-寫-HTML-語法"><a href="#JSX語法-用-JS-寫-HTML-語法" class="headerlink" title="JSX語法: 用 JS 寫 HTML 語法"></a>JSX語法: 用 JS 寫 HTML 語法</h1><p>React 定義的 HTML 模板，跟 HTML 幾乎相同，只有幾個點不太一樣</p>
<p><strong>must close 每個標籤需close</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>每個標籤都可以 self close</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className /&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>className / htmlFor</strong><br>class、for 因與 JS 語法撞名<br>css 的 class 需叫 className<br>html 的 for 需叫 htmlFor</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&#x27;red&#x27;</span> /&gt;</span><br><span class="line">&lt;label htmlFor=<span class="string">&#x27;check&#x27;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&#x27;checkbox&#x27;</span> id=<span class="string">&#x27;check&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>需用駝峰式命名</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div onChange=<span class="string">&#x27;change&#x27;</span>&gt;</span><br><span class="line">&lt;div onClick=<span class="string">&#x27;click&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>可以用 { } 括號塞值或表達式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div onClick=&#123; <span class="built_in">this</span>.onClick &#125;&gt;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="建立組件"><a href="#建立組件" class="headerlink" title="建立組件"></a>建立組件</h1><p>src/Item.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Item</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;<span class="number">123</span>&lt;/li&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Item;</span><br></pre></td></tr></table></figure>
<p>src/List.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">List</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &lt;Item/&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="渲染組件到畫面"><a href="#渲染組件到畫面" class="headerlink" title="渲染組件到畫面"></a>渲染組件到畫面</h1><p>React18 使用 createRoot<br>src/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = createRoot(container);</span><br><span class="line">root.render(<span class="xml"><span class="tag">&lt;<span class="name">List</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>
<br/>

<p>React17 使用 ReactDom</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;./List&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">ReactDom.render(<span class="xml"><span class="tag">&lt;<span class="name">List</span>/&gt;</span></span>, container);</span><br></pre></td></tr></table></figure>
<p>如果在 React18 用 ReactDom，雖然會成功渲染，但會出現改使用 createRoot 的警告，用 createRoot 才能使用新的 API<br>Warning: ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it’s running React 17. Learn more: <a href="https://reactjs.org/link/switch-to-createroot">https://reactjs.org/link/switch-to-createroot</a><br><br/><br/></p>
<h1 id="React-Developer-Tools"><a href="#React-Developer-Tools" class="headerlink" title="React Developer Tools"></a>React Developer Tools</h1><p>安裝瀏覽器擴充 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React Developer Tools</a>，幫助開發人員開發</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>JSX</tag>
        <tag>ReactDom</tag>
        <tag>createRoot</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 2】 React 的特性與思維，我該先學哪個框架呢?</title>
    <url>/2022/09/17/react-characteristic/</url>
    <content><![CDATA[<p><img src="https://imgur.com/fW87q9S.jpg" alt="https://imgur.com/fW87q9S"></p>
<p>React 的特性與思維，我該先學哪個框架呢?</p>
<a id="more"></a>

<p><strong>[ 情境劇場 ]</strong></p>
<p>解師傅：開一間餐廳，一定要先了解餐廳大致的方向，跟開店要注意的地方～</p>
<p>小當家：不就是熱炒店嗎？還有這麼多眉角阿．．．</p>
<p>解師傅：多的是你不知道的事，我們一起來研究吧～～</p>
<hr>
<p>React 是聲明式、單向資料流，將資料化為視覺，操作使用者事件來變更資料</p>
<p>以下四點為 React 的特點</p>
<p><br/><br/></p>
<h2 id="開發以-Component-組件-為單位"><a href="#開發以-Component-組件-為單位" class="headerlink" title="開發以 Component (組件)為單位"></a>開發以 Component (組件)為單位</h2><p>Component 是頁面的一部份，可以是一個區塊、一個 button 等</p>
<p><img src="https://imgur.com/WBpZXYp.png" alt="https://imgur.com/WBpZXYp.png"></p>
<p>透過組件的組合與重複使用，建構出一個更好維護的應用程式</p>
<p><br/><br/></p>
<h2 id="不是-MVC-框架"><a href="#不是-MVC-框架" class="headerlink" title="不是 MVC 框架"></a>不是 MVC 框架</h2><p>MVC 包含了 <strong>Model模型-邏輯層、View視圖-表現層、Controller控制器-事件層</strong></p>
<p><img src="https://imgur.com/rrroXSc.png" alt="https://imgur.com/rrroXSc.png"></p>
<p>而 React 精神專注在 View 表現層上面，用組件化的方式，讓開發者建構各式的使用者介面，可以重複使用、呈現資料、反應資料的改變</p>
<p><br/><br/></p>
<h2 id="不使用-template"><a href="#不使用-template" class="headerlink" title="不使用 template"></a>不使用 template</h2><p>Angular 或 Vue 都有自己的 template</p>
<p>而 React 使用原生 Javascript，不用另外學習語法，只要用 Javascript、JSX 規範 就可以寫出 View，更增加了可維護性</p>
<p><br/><br/></p>
<h2 id="不做資料綁定"><a href="#不做資料綁定" class="headerlink" title="不做資料綁定"></a>不做資料綁定</h2><p>Angular 或 Vue 都會將資料跟對應的視覺元素同步更新</p>
<p>而 React 採用單向資料流，不會直接修改 DOM 元素，使用 Virtual DOM 做比對更新。</p>
<p>Virtual DOM 顧名思義為虛擬 DOM，不是真正的 DOM，利用 JavaScrip 物件的資料結構來儲存在 memory 當中</p>
<p>當資料變更時，會先建立一個新的 virtual DOM，計算出新舊 virtual DOM 之間的差別，最後才會操作真正的 DOM，可保證每次只變更有變動的元素，藉此避免不必要的重製以提升效能</p>
<p><img src="https://imgur.com/VGbcTAi.jpg" alt="https://imgur.com/VGbcTAi.jpg"></p>
<p><br/><br/></p>
<h1 id="我該先學哪個框架呢"><a href="#我該先學哪個框架呢" class="headerlink" title="我該先學哪個框架呢?"></a>我該先學哪個框架呢?</h1><p>又到了前端工程師的萬年考古題，想當初我也是猶豫了大半天</p>
<p>前端三大巨頭 Angular、React、Vue</p>
<ul>
<li><p>Angular - 學習曲線較高，在時間成本上會花比較多的時間，使用 TypeScript</p>
</li>
<li><p>React - 技術上來說 React 並不是框架，而是一個用來渲染 UI 組件的函式庫，如果你已經非常熟悉 Javascript，那你一定很快學會，React 絕大部分都是在用 JavaScript</p>
</li>
<li><p>Vue - Vue 的模板提供了很多語法糖，簡單完成複雜的功能</p>
</li>
</ul>
<p>要先學哪個其實都可以，如果公司有需求當然是先看團隊<br>如果是考慮時間成本，個人的建議是 - 熟 Javascript 學 React ，不熟練可以學 Vue<br>但學框架前，一定要先會基本的 Javascript 才可以哦！</p>
<p>我自己的經驗是先學 Vue，因為 Vue 跟 React 其實有很多相似之處，之後在學 React 也變快了！</p>
<p>在 <a href="https://npmtrends.com/angular-vs-react-vs-vue">npm trends</a> 下載量，這幾年來 React 也是越來越高，可供大家參考</p>
<p><img src="https://imgur.com/GJixncf.jpg" alt="https://imgur.com/GJixncf.jpg"></p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React組件應用</title>
    <url>/2022/06/30/react-component/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<p>前一篇介紹了基本組件，今天來介紹 React 的組件應用吧!</p>
<a id="more"></a>

<h1 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h1><p><strong>props 除了傳值以外，還可以設定預設值、預設型別</strong><br>範例: 簡單的計數器功能<br>外層組件傳入 initCount，內層接 props，並設定 props 的預設值 <strong>defaultProps</strong>、預設型別 <strong>PropTypes</strong>，<br>如外層沒傳 initCount，將會顯示預設值<br>如外層傳入型別與預設型別不同，將會跳出錯誤警告</p>
<p>Index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">&quot;./Counter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = createRoot(container);</span><br><span class="line">root.render(<span class="xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">initCount</span>=<span class="string">&#123;10&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>
<br/>

<p>Counter.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    initCount: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    initCount: PropTypes.number</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      count: props.initCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure>
<br/>
你也可以將 defaultProps、propTypes 設定在 Component 外面，將會得到一樣的結果
<br/><br/>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      count: props.initCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br><span class="line"></span><br><span class="line">Counter.defaultProps = &#123;</span><br><span class="line">  initCount: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">Counter.propTypes = &#123;</span><br><span class="line">  initCount: PropTypes.number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h1><p><strong>setState 可傳入 function</strong><br><strong>setState 是非同步操作</strong>，不能期待連續的 setState 內容會立刻更新，<br>因此我們可以在 setState，將原本傳入的 obj 改成傳入一個函式<br>這個函式參數吃的是本來的 state，(state) =&gt; {} 裡面回傳 return{ } 一個新的物件<br>新的物件就是新的 state = 原來的 state.count+1</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;))</span><br><span class="line">    <span class="comment">// 等於</span></span><br><span class="line">    <span class="comment">// this.setState((state) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   return &#123;</span></span><br><span class="line">    <span class="comment">//     count: state.count + 1</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>setState 可傳入 callback</strong></p>
<p>因 setState 為非同步，為了確保在 state 變更後執行想要的動作，可在 setState 第二個參數傳入callback</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">setState(變更 state 的物件或函式, callback);</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    count: <span class="built_in">this</span>.state.count + <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="built_in">this</span>.sendCount();</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line">sendCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetch(<span class="string">`/api/count?value=<span class="subst">$&#123;<span class="built_in">this</span>.state.count&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="ref-屬性-指定-DOM-元素"><a href="#ref-屬性-指定-DOM-元素" class="headerlink" title="ref 屬性-指定 DOM 元素"></a>ref 屬性-指定 DOM 元素</h1><p>指定 ref 有三種方法，以下為三種範例，其中官方推薦 createRef</p>
<p>情境: 在 input 還沒點擊時就自動 focus</p>
<h2 id="回調模式"><a href="#回調模式" class="headerlink" title="回調模式"></a>回調模式</h2><p>傳入function</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ref</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  setRef = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    input.focus();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="built_in">this</span>.setRef&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="createRef"><a href="#createRef" class="headerlink" title="createRef"></a>createRef</h2><p>使用 react 提供的 createRef，綁定一個變數給 createRef()</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, createRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ref</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  myInput = createRef();</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.myInput.current.focus();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="built_in">this</span>.myInput&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ref;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="舊版-字符串引用"><a href="#舊版-字符串引用" class="headerlink" title="舊版-字符串引用"></a>舊版-<strong>字符串引用</strong></h2><p>使用字串引用，官方並不建議使用，因為字符串引用存在一些問題，被認為是遺留問題，並且<strong>可能會在未來的某個版本中被刪除</strong>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ref</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.refs.myInput.focus();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> ref=<span class="string">&quot;myInput&quot;</span>/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="組件的父子溝通"><a href="#組件的父子溝通" class="headerlink" title="組件的父子溝通"></a>組件的父子溝通</h1><p>兩種溝通方式</p>
<p><strong>父子雙向溝通</strong><br>父傳子透過 ref 抓到子層的方法，子傳父透過 props<br>Parent.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, createRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  childRef = createRef();</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  addChildCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.childRef.current.addCount();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Parent: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;+Parent&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addChildCount&#125;&gt;+Child&lt;/button&gt;</span><br><span class="line">        &lt;Child ref=&#123;<span class="built_in">this</span>.childRef&#125; addParentCount=&#123;<span class="built_in">this</span>.addCount&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure>
<br/>

<p>Child.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Child:&#123;<span class="built_in">this</span>.state.count&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.props.addParentCount&#125;&gt;+Parent&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;+Child&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><strong>父層傳給子層</strong><br>所有屬性都在父層宣告，再透過 props 傳給子層<br>Parent.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    childCount: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">  addParentCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  addChildCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      childCount: <span class="built_in">this</span>.state.childCount + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Parent: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addParentCount&#125;&gt;+Parent&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addChildCount&#125;&gt;+Child&lt;/button&gt;</span><br><span class="line">        &lt;Child</span><br><span class="line">          count = &#123;<span class="built_in">this</span>.state.childCount&#125;</span><br><span class="line">          addChildCount = &#123;<span class="built_in">this</span>.addChildCount&#125;</span><br><span class="line">          addParentCount=&#123;<span class="built_in">this</span>.addParentCount&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure>
<br/>

<p>Child.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count, addParentCount, addChildCount &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Child:&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;addParentCount&#125;&gt;+Parent&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;addChildCount&#125;&gt;+Child&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Child;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="樣式控制-style-amp-className"><a href="#樣式控制-style-amp-className" class="headerlink" title="樣式控制 style &amp; className"></a>樣式控制 style &amp; className</h1><p>情境: 點擊 toggle 按鈕控制圖片開關<br><br/></p>
<p><strong>直接判斷 DOM 元素是否顯示</strong><br>三元判斷式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      visible: !<span class="built_in">this</span>.state.visible</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.toggle&#125;&gt;toogle&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123; <span class="built_in">this</span>.state.visible ? <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;/logo512.png&#x27;</span> /&gt;</span></span> : <span class="literal">null</span>&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>
<br/>

<p>也可以寫成</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      visible: !<span class="built_in">this</span>.state.visible</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.toggle&#125;&gt;toogle&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123; <span class="built_in">this</span>.state.visible &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;/logo512.png&#x27;</span> /&gt;</span></span> &#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><strong>用 style 控制是否顯示</strong></p>
<p>在 JSX 裡 style 是一個物件，所以需要用物件的方式傳給 style，style 物件裡面有 display 屬性，可根據 state 裡面的值來控制 display 的值為 block 或是 none</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      visible: !<span class="built_in">this</span>.state.visible</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> showImg = &#123; <span class="attr">display</span>: <span class="built_in">this</span>.state.visible ? <span class="string">&#x27;block&#x27;</span> : <span class="string">&#x27;none&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.toggle&#125;&gt;toogle&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;img style=&#123;showImg&#125; src=<span class="string">&#x27;/logo512.png&#x27;</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>
<br/>
也可以直接在 style 判斷
<br/><br/>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      visible: !<span class="built_in">this</span>.state.visible</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.toggle&#125;&gt;toogle&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;img style=&#123;&#123; <span class="attr">display</span>: <span class="built_in">this</span>.state.visible ? <span class="string">&#x27;block&#x27;</span> : <span class="string">&#x27;none&#x27;</span>&#125;&#125; src=<span class="string">&#x27;/logo512.png&#x27;</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p><strong>用 className 控制是否顯示</strong></p>
<p>新增一支 CSS 寫入 class，再判斷 className</p>
<p>style.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hide</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      visible: !<span class="built_in">this</span>.state.visible</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.toggle&#125;&gt;toogle&lt;/button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;img className=&#123;<span class="built_in">this</span>.state.visible ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;hide&#x27;</span>&#125; src=<span class="string">&#x27;/logo512.png&#x27;</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="Component-三種組件"><a href="#Component-三種組件" class="headerlink" title="Component 三種組件"></a>Component 三種組件</h1><p>以計數器為範例，外層傳入 props 到內層<br>Progress.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ProgressBar <span class="keyword">from</span> <span class="string">&quot;./ProgressBar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Progress</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ProgressBar value=&#123;<span class="built_in">this</span>.state.count&#125;/&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;add&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Progress;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="Class-Component"><a href="#Class-Component" class="headerlink" title="Class Component"></a>Class Component</h2><p>ProgressBar.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProgressBar</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="built_in">console</span>.count(<span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;&#123;value&#125;%&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProgressBar;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="Functional-Component-Stateless-component"><a href="#Functional-Component-Stateless-component" class="headerlink" title="Functional Component (Stateless component)"></a>Functional Component (Stateless component)</h2><p>沒有自己的 state、沒有自訂 method，props 當作參數傳入<br>ProgressBar.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> ProgressBar = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = props;</span><br><span class="line">  <span class="built_in">console</span>.count(<span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;h1&gt;&#123;value&#125;%&lt;/h1&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProgressBar;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="Pure-Component"><a href="#Pure-Component" class="headerlink" title="Pure Component"></a>Pure Component</h2><p>和 class component 一樣，兩者差異主要在於『 效能 』<br>class component 和 functional component，即使你傳入同樣的值 (props 或 state) 還是會重新 render<br>Pure Component 的運作則是當你傳入同樣的值 (props 或 state) 或深層改變值時，它不會重新 render，<br>如果第一層的值有改變才會重新渲染，只比較第一層的方式稱為 Shallow Compare</p>
<p>ProgressBar.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProgressBar</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="built_in">console</span>.count(<span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;&#123;value&#125;%&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProgressBar;</span><br></pre></td></tr></table></figure>
<br/>
如將 addCount 改成 +0，Pure Component 不會重新 render

<p>Progress.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ProgressBar <span class="keyword">from</span> <span class="string">&quot;./ProgressBar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Progress</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ProgressBar value=&#123;<span class="built_in">this</span>.state.count&#125;/&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;add&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Progress;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="CSS-模組"><a href="#CSS-模組" class="headerlink" title="CSS 模組"></a>CSS 模組</h1><p>使用 CSS 或 SCSS 模組很簡單，只要在附檔名加 .module 就可以呼叫了，模組化可以避免不同檔案相同 className 的衝突<br>使用 SCSS 記得先安裝 sass</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm i sass</span><br></pre></td></tr></table></figure>
<br/>

<p>Style.module.scss</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p>Btn.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&quot;./Style.module.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Btn</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button className=&#123;style.btn&#125;&gt;<span class="number">132</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Btn;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h1><p>styled-components 可以將 CSS 直接放到組件處理</p>
<p>首先安裝</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm i styled-components</span><br></pre></td></tr></table></figure>
<p>命名後當成標籤來使用</p>
<p>Btn.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Button = styled.button<span class="string">`</span></span><br><span class="line"><span class="string">  width: 100px</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ButtonText = styled.span<span class="string">`</span></span><br><span class="line"><span class="string">  color: red</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Btn</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Button&gt;</span><br><span class="line">          &lt;ButtonText&gt;<span class="number">132</span>&lt;/ButtonText&gt;</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Btn;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="高階組件-HOC"><a href="#高階組件-HOC" class="headerlink" title="高階組件 HOC"></a>高階組件 HOC</h1><p>Hihger-Order Components<br>以 Components 為輸入的 Components<br>return 傳入的 WrapperComponent，帶入共用邏輯的 props、自身的 props</p>
<p><strong>不同組件套用相同邏輯</strong></p>
<p>src/hocs/withOpen.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> withOpen = <span class="function">(<span class="params">WrapperComponent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">      open: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        open: !<span class="built_in">this</span>.state.open</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;WrapperComponent</span><br><span class="line">          &#123;...this.props&#125;</span><br><span class="line">          open=&#123;<span class="built_in">this</span>.state.open&#125;</span><br><span class="line">          toggle=&#123;<span class="built_in">this</span>.toggle&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withOpen;</span><br></pre></td></tr></table></figure>
<br/>
Card1.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card1</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; open, toggle &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;toggle&#125;&gt;Card1&lt;/button&gt;</span><br><span class="line">        &#123; open ? <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Card1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> : <span class="literal">null</span>&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Card1;</span><br></pre></td></tr></table></figure>
<br/>
Card2.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; open, toggle &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;toggle&#125;&gt;Card2&lt;/button&gt;</span><br><span class="line">        &#123; open ? <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Card2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> : <span class="literal">null</span>&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Card2;</span><br></pre></td></tr></table></figure>
<br/>
App.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Card1 <span class="keyword">from</span> <span class="string">&quot;./Card1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Card2 <span class="keyword">from</span> <span class="string">&quot;./Card2&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> withOpen <span class="keyword">from</span> <span class="string">&quot;./hocs/withOpen&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Card1withOpen = withOpen(Card1);</span><br><span class="line"><span class="keyword">const</span> Card2withOpen = withOpen(Card2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Card1withOpen/&gt;</span><br><span class="line">      &lt;Card2withOpen/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>react Props</tag>
        <tag>setState</tag>
        <tag>react ref</tag>
        <tag>createRef</tag>
        <tag>react style</tag>
        <tag>react className</tag>
        <tag>Class Component</tag>
        <tag>Functional Component</tag>
        <tag>Pure Component</tag>
        <tag>styled-components</tag>
        <tag>react HOC</tag>
      </tags>
  </entry>
  <entry>
    <title>React Context API跨組件溝通傳遞資料</title>
    <url>/2022/07/04/react-context-api/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<p>context api 可以跨組件溝通傳遞資料，讓組件可以省去組件層層傳遞的麻煩</p>
<a id="more"></a>

<p>以下範例情境: 點擊按鈕，讓 header 的總數量增加</p>
<p>App 為最外層、Header 顯示訂單數量、ProductList 訂單、Product 每個品項增加按鈕</p>
<p><img src="https://imgur.com/nvRnhNa.jpg" alt="context-api"></p>
<p><br/><br/></p>
<h1 id="設定-Context"><a href="#設定-Context" class="headerlink" title="設定 Context"></a>設定 Context</h1><p>import createContext，並設定 createContext 的預設值，<br>範例預設為: 訂單陣列 orders、增加訂單函式 addOrder</p>
<p><strong>Provider（提供者）是用來提供 context 值</strong></p>
<p><strong>Consumer（消費者）是用來使用 context 值</strong></p>
<p>/src/context/order.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; Provider, Consumer &#125; = createContext(&#123;</span><br><span class="line">  orders: [],</span><br><span class="line">  addOrder: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="設定-Provider，contextValue-傳入-context"><a href="#設定-Provider，contextValue-傳入-context" class="headerlink" title="設定 Provider，contextValue 傳入 context"></a>設定 Provider，contextValue 傳入 context</h1><p>在外層設定值與函式，傳入 context</p>
<p>在需使用到的組件外，包一層 Provider，傳入需要的 value，使底下的組件都可以使用 value 裡的值</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ProductList <span class="keyword">from</span> <span class="string">&quot;./ProductList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    orders: []</span><br><span class="line">  &#125;</span><br><span class="line">  addOrder = <span class="function"><span class="params">order</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      orders: [...this.state.orders, order]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; orders &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> contextValue = &#123;</span><br><span class="line">      orders,</span><br><span class="line">      addOrder: <span class="built_in">this</span>.addOrder</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Provider value=&#123;contextValue&#125;&gt;</span><br><span class="line">          &lt;Header /&gt;</span><br><span class="line">          &lt;ProductList /&gt;</span><br><span class="line">        &lt;/Provider&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="Consumer-使用-context"><a href="#Consumer-使用-context" class="headerlink" title="Consumer 使用 context"></a>Consumer 使用 context</h1><p>在需要使用 context value 的地方包一層 Consumer，需注意 <strong>value 必須用函式傳入</strong></p>
<p>這麼一來就可以取到 context 的值囉！</p>
<p>Header.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Consumer &#125; <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">       &#123; <span class="function"><span class="params">value</span> =&gt;</span> (<span class="string">`購物車(<span class="subst">$&#123;value.orders.length&#125;</span>)`</span>)&#125;</span><br><span class="line">      &lt;/Consumer&gt;</span><br><span class="line">      &lt;hr/&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure>
<br/>

<p>ProductList.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">&quot;./Product&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> menu = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;雞肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;豬肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;牛肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;海鮮鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;泡菜鍋&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProductList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;menu.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Product</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> &#123;<span class="attr">...item</span>&#125; /&gt;</span></span>)&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProductList;</span><br></pre></td></tr></table></figure>
<br/>

<p>Product.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Consumer &#125; <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Product = <span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;label&gt;&#123;name&#125;&lt;/label&gt;</span><br><span class="line">      &lt;Consumer&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          value =&gt; (</span><br><span class="line">            &lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123;value.addOrder(id)&#125;&#125;&gt;+&lt;/button&gt;</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/Consumer&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Product;</span><br></pre></td></tr></table></figure>
<p><br/><br/><br>React Hooks 的 useContext 可以不使用 Consumer，可參考 <a href="https://happy9990929.github.io/2022/07/05/react-hooks">React 常用 Hooks</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Context</tag>
        <tag>Context API</tag>
        <tag>React Provider</tag>
        <tag>React Consumer</tag>
      </tags>
  </entry>
  <entry>
    <title>React表單處理-input、select、radio、checkbox、file</title>
    <url>/2022/07/02/react-form/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<p>React 的表單，常會用 onChange 去做處理，以下是一些 input、select、radio、checkbox、file 的範例記錄。</p>
<a id="more"></a>

<h1 id="文字輸入-雙向綁定-input"><a href="#文字輸入-雙向綁定-input" class="headerlink" title="文字輸入-雙向綁定 input"></a>文字輸入-雙向綁定 input</h1><p>接收 value 和 onChange 事件，如 input 輸入的值變更，setState 會將 value 變更為新的值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    text: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  onChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      text: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; text &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> value=&#123;text&#125; onChange=&#123;<span class="built_in">this</span>.onChange&#125; /&gt;</span><br><span class="line">        &lt;h1&gt;&#123;text&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Input;</span><br></pre></td></tr></table></figure>
<br/>

<p>value 傳入的一定會是字串，所以如想要的值為其他型別，要記得轉型，以下為 Number 型態，parseInt 將字串轉為 number</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    num: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  onChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      num: <span class="built_in">parseInt</span>(e.target.value, <span class="number">10</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;number&quot;</span> value=&#123;num&#125; onChange=&#123;<span class="built_in">this</span>.onChange&#125; /&gt;</span><br><span class="line">        &lt;h1&gt;&#123;num&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Input;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="下拉選單-Select"><a href="#下拉選單-Select" class="headerlink" title="下拉選單-Select"></a>下拉選單-Select</h1><p><strong>綁定字串陣列</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> animals = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;mouse&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Select</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    animal: animals[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  onChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      animal: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; animal &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;select value=&#123;animal&#125; onChange=&#123;<span class="built_in">this</span>.onChange&#125;&gt;</span><br><span class="line">          &#123;animals.map(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span>))&#125;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">          &#123;animal&#125;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Select;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>綁定物件陣列 value</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> animals = [</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;狗&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;dog&#x27;</span> &#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;貓&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;cat&#x27;</span> &#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;老鼠&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;mouse&#x27;</span> &#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;兔子&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;rabbit&#x27;</span> &#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;鳥&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;bird&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Select</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    animalVal: animals[<span class="number">0</span>].value</span><br><span class="line">  &#125;</span><br><span class="line">  onChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      animalVal: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; animalVal &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;select value=&#123;animalVal&#125; onChange=&#123;<span class="built_in">this</span>.onChange&#125;&gt;</span><br><span class="line">          &#123;animals.map(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">key</span>=<span class="string">&#123;item.label&#125;</span> <span class="attr">value</span>=<span class="string">&#123;item.value&#125;</span>&gt;</span>&#123;item.label&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span>))&#125;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">          &#123;animals.find(<span class="function"><span class="params">item</span> =&gt;</span> item.value === animalVal).label&#125;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Select;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="單選與多選-radio、checkbox"><a href="#單選與多選-radio、checkbox" class="headerlink" title="單選與多選-radio、checkbox"></a>單選與多選-radio、checkbox</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RadioCheckbox</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    gender: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    animal: &#123;</span><br><span class="line">      dog: <span class="literal">false</span>,</span><br><span class="line">      cat: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  changeGender = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      gender: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  changeAnimal = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = e.target.value;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (</span><br><span class="line">      &#123;</span><br><span class="line">        animal: &#123;</span><br><span class="line">          ...state.animal,</span><br><span class="line">          [key]: !state.animal[key]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; gender, animal &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;你的性別?&lt;/h1&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;radio&quot;</span></span><br><span class="line">            id=<span class="string">&quot;male&quot;</span></span><br><span class="line">            value=<span class="string">&quot;male&quot;</span></span><br><span class="line">            checked=&#123;gender === <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line">            onChange=&#123;<span class="built_in">this</span>.changeGender&#125;/&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;male&quot;</span>&gt;男&lt;/label&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;radio&quot;</span></span><br><span class="line">            id=<span class="string">&quot;female&quot;</span></span><br><span class="line">            value=<span class="string">&quot;female&quot;</span></span><br><span class="line">            checked=&#123;gender === <span class="string">&#x27;female&#x27;</span>&#125;</span><br><span class="line">            onChange=&#123;<span class="built_in">this</span>.changeGender&#125;/&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;female&quot;</span>&gt;女&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;喜歡的動物?&lt;/h1&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">            id=<span class="string">&quot;dog&quot;</span></span><br><span class="line">            value=<span class="string">&quot;dog&quot;</span></span><br><span class="line">            checked=&#123;animal.dog&#125;</span><br><span class="line">            onChange=&#123;<span class="built_in">this</span>.changeAnimal&#125;/&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;dog&quot;</span>&gt;狗&lt;/label&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">            id=<span class="string">&quot;cat&quot;</span></span><br><span class="line">            value=<span class="string">&quot;cat&quot;</span></span><br><span class="line">            checked=&#123;animal.cat&#125;</span><br><span class="line">            onChange=&#123;<span class="built_in">this</span>.changeAnimal&#125;/&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">&quot;cat&quot;</span>&gt;貓&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;pre&gt;&#123;<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.state, <span class="literal">null</span>, <span class="number">2</span>)&#125;&lt;/pre&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RadioCheckbox;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="檔案上傳與圖片預覽-file"><a href="#檔案上傳與圖片預覽-file" class="headerlink" title="檔案上傳與圖片預覽-file"></a>檔案上傳與圖片預覽-file</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">file</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    img: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  changeImg = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 取得第0筆檔案</span></span><br><span class="line">    <span class="keyword">const</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// FileReader 讀取瀏覽器選中的檔案</span></span><br><span class="line">    <span class="keyword">const</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="comment">// 讀取完改變 img</span></span><br><span class="line">    fileReader.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="built_in">this</span>.fileLoad);</span><br><span class="line">    <span class="comment">// 將圖片繪出，轉換成 Base64 編碼</span></span><br><span class="line">    fileReader.readAsDataURL(file);</span><br><span class="line">  &#125;</span><br><span class="line">  fileLoad = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此處的 e 為 fileReader</span></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      img: e.target.result</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> onChange=&#123;<span class="built_in">this</span>.changeImg&#125;/&gt;</span><br><span class="line">        &lt;img src=&#123;<span class="built_in">this</span>.state.img&#125; width=<span class="string">&quot;100%&quot;</span> /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> file;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react form</tag>
        <tag>react input</tag>
        <tag>react select</tag>
        <tag>react radio</tag>
        <tag>react checkbox</tag>
        <tag>react file</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 1】 React 的歷史時間軸</title>
    <url>/2022/09/16/react-history/</url>
    <content><![CDATA[<p><img src="https://imgur.com/3UUlzjJ.jpg" alt="react-blue.jpg"></p>
<p>第一次參加 IT 邦鐵人賽，接下來會發一系列鐵人賽的文章，希望可以堅持到最後，一起加油吧！</p>
<a id="more"></a>

<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="[ 前情提要 ]"></a>[ 前情提要 ]</h3><p>要學習 React 就要有開一間餐廳的決心，你說這有什麼關係？<br>這過程其實大同小異，兩者都需要學習且消耗時間成本，才有機會成功！<br>現在「<strong>你</strong>」就是餐廳的老闆，即將營業一間「React 熱炒店」，<br>請了特級廚師 <strong>小當家</strong> 當御用主廚，而 <strong>解師傅</strong> 也是股東之一，我們抱著堅持下去的決心一起前進吧！</p>
<p>解師傅：老闆～請多多指教囉！<br>小當家：我們一起把  React 熱炒店 做大吧~~~🤩<br><br/><br/></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React 的出現，讓開發者享受到組件重用的便利，優化使用者介面</p>
<p>早期都是用 Class Component，但在 React 16.8 之後出了 「Hook」，可以單純使用函式組件，讓你不需要用複雜的 class，就能使用更多 React 的功能，因此整篇，我們都會使用 Hook 的方式來開發</p>
<p>不過 React 是誰發明的？又是怎麼出現的呢？在操作 React 之前，先來簡單了解一下 React 的背景吧！</p>
<p><br/><br/></p>
<h1 id="🕓-回顧-React-的時間軸"><a href="#🕓-回顧-React-的時間軸" class="headerlink" title="🕓 回顧 React 的時間軸"></a>🕓 回顧 React 的時間軸</h1><p><br/><br/></p>
<p><img src="https://imgur.com/skyo2W1.jpg" alt="fb.jpg"></p>
<h3 id="💠-2010-年前後"><a href="#💠-2010-年前後" class="headerlink" title="💠 2010 年前後"></a>💠 <strong>2010 年前後</strong></h3><p>Facebook 快速成長，相信你我對 Facebook 一定都不陌生，隨著團隊的擴張讓代碼的維護變得越來越困難，FB 認為現行技術已無法滿足擴展需求，如果繼續用舊有的代碼維護頁面，系統的複雜就成級數的增長，使代碼變得脆弱且不可預測</p>
<p><br/><br/><br/></p>
<p><img src="https://imgur.com/KSp9YEL.jpg" alt="fax.jpg"></p>
<h3 id="💠-2011-年"><a href="#💠-2011-年" class="headerlink" title="💠 2011 年"></a>💠 <strong>2011 年</strong></h3><p>為了解決這個問題，一位 Facebook 工程師 <strong>Jordan Walke</strong> ，便開發出 <a href="https://github.com/jordwalke/FaxJs"><strong>FaxJs</strong></a>，也就是 React 的原型，於是 React 先被應用在 Facebook 的 News Feed (動態消息)</p>
<p><br/><br/><br/></p>
<p><img src="https://imgur.com/kXcTioK.jpg" alt="ig.jpg"></p>
<h3 id="💠-2012-年"><a href="#💠-2012-年" class="headerlink" title="💠 2012 年"></a>💠 <strong>2012 年</strong></h3><p>Facebook 將 React 分離出來，讓 React 可以在不同專案運行，Facebook 收購 Instagram，將 React 部署在 Instagram</p>
<p>Facebook 的 CEO Mark Zuckerberg 表示：我們最大的錯誤就是壓太多寶在 HTML5 上了</p>
<p><br/><br/><br/></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GW0rj4sNH2w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="💠-2013年"><a href="#💠-2013年" class="headerlink" title="💠 2013年"></a>💠 <strong>2013年</strong></h3><p>在 JSCONF US 峰會，Jordan Walke 發表 React 的 Open Source，起初的聽眾對 React 抱持懷疑的態度，多數人覺得 React 是一種退步，這讓 Facebook 團隊決定加強宣傳在勇於創新的族群上</p>
<p><br/><br/><br/></p>
<p><img src="https://imgur.com/6d7eueQ.jpg" alt="netflix.jpg"></p>
<h3 id="💠-2014年"><a href="#💠-2014年" class="headerlink" title="💠 2014年"></a>💠 2014年</h3><p>經過團隊的推廣，React 逐漸獲得聲譽，開始有大量公司將 React 用在專案上，包含了 Netflix</p>
<p><br/><br/><br/></p>
<p><img src="https://imgur.com/uzjLy5B.jpg" alt="redux.jpg"></p>
<h3 id="💠-2015年"><a href="#💠-2015年" class="headerlink" title="💠 2015年"></a>💠 2015年</h3><p>React Native、Redux 問世</p>
<p>React Native 讓網頁開發人員能用 React 的方式以 JavaScript 撰寫 App</p>
<p>Redux 可以讓不同的組件，使用到共用的資料和方法，統一集中管理共用的狀態</p>
<p><br/><br/><br/></p>
<h3 id="💠-2016年"><a href="#💠-2016年" class="headerlink" title="💠 2016年"></a>💠 2016年</h3><p>React 成為主流框架之一，版本進入到正式版號 React 15 穩定版</p>
<p><br/><br/><br/></p>
<h3 id="💠-2017年"><a href="#💠-2017年" class="headerlink" title="💠 2017年"></a>💠 2017年</h3><p>React 16 發佈</p>
<p><br/><br/><br/></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dpw9EHDh2bM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="💠-2018年"><a href="#💠-2018年" class="headerlink" title="💠 2018年"></a>💠 2018年</h3><p>在 React Conf 2018，Sophie Alpert 和 Dan Abramov 介紹了 Hook，接著 Ryan Florence 展示了如何用它們來重構應用程式</p>
<p><br/><br/><br/></p>
<p><img src="https://imgur.com/Lm4pMMb.jpg" alt="hook.jpg"></p>
<h3 id="💠-2019年"><a href="#💠-2019年" class="headerlink" title="💠 2019年"></a>💠 2019年</h3><p>React 16.8 公眾發布。React Hooks 可以在穩定版中使用，不必寫 class 就能使用 state，更好管理有狀態的邏輯，也降低了學習成本</p>
<p><br/><br/><br/></p>
<h3 id="💠-2020年"><a href="#💠-2020年" class="headerlink" title="💠 2020年"></a>💠 2020年</h3><p>React 17 引入漸進式升級</p>
<p><br/><br/><br/></p>
<h3 id="💠-2022年至今"><a href="#💠-2022年至今" class="headerlink" title="💠 2022年至今"></a>💠 2022年至今</h3><p>React18 正式版發布</p>
<p><br/><br/><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>回溯的部分就差不多寫到這裡，雖然你完全可以不用知道這些過去，還是可以學好 React ，但回過頭來看了這些過去會發現，這其實是個很勵志的故事，也還滿有趣的！今天就到這裡囉～我們明天繼續吧！</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
      <tags>
        <tag>React時間軸</tag>
        <tag>React歷史</tag>
      </tags>
  </entry>
  <entry>
    <title>React常用Hooks</title>
    <url>/2022/07/05/react-hooks/</url>
    <content><![CDATA[<p><img src="https://imgur.com/cnvp1BX.jpg" alt="hooks"></p>
<p>Hooks 是 React 16.8 之後出的功能，可以單純使用函式組件，而不用寫 Class component</p>
<p>Hooks 優點</p>
<ol>
<li>更好管理有狀態的邏輯</li>
<li>把相同邏輯放在同個地方，而不是強制基於 lifecycle 方法來分拆</li>
<li>Class 運作、學習較為複雜</li>
</ol>
<a id="more"></a>

<p><strong>React 目前沒有計畫移除 Class，所以是完全自由選擇使用，Hooks 也 100% 向下相容</strong><br><br/><br/></p>
<h1 id="useState-狀態管理"><a href="#useState-狀態管理" class="headerlink" title="useState 狀態管理"></a>useState 狀態管理</h1><p>先看看原本的 Class component，這是一個簡單的計數器</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123; count &#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addCount&#125;&gt;add&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<br/>

<p>把 Class component 改成 Hooks ，state 跟 lifecycle 拿掉，使用 useState</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(count + <span class="number">1</span>); <span class="comment">// 或 setCount(c =&gt; c + 1);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123; count &#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;addCount&#125;&gt;add&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>是不是簡短很多呢～</p>
<br/>

<p><strong>useState</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [狀態, 設定狀態的函式] = useState(狀態初始值);</span><br></pre></td></tr></table></figure>
<p>useState 因執行順序，必須放在函式的最上面</p>
<p>狀態初始值可以是任何型態，不像 class 只能用物件</p>
<br/>

<p><strong>useState 的 setState 需要把原本沒使用到的 state 也合併，否則會出錯</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [&#123;count1, count2&#125;, setState] = useState(&#123;<span class="attr">count1</span>: <span class="number">0</span>, <span class="attr">count2</span>: <span class="number">10</span>&#125;);</span><br><span class="line">  <span class="keyword">const</span> addCount1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;...state, <span class="attr">count1</span>: state.count1 + <span class="number">1</span>&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> addCount2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;...state, <span class="attr">count2</span>: state.count2 + <span class="number">1</span>&#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123; count1 &#125;&lt;/h1&gt;</span><br><span class="line">      &lt;h1&gt;&#123; count2 &#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;addCount1&#125;&gt;add&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;addCount2&#125;&gt;add&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="useEffect-附加作用"><a href="#useEffect-附加作用" class="headerlink" title="useEffect 附加作用"></a>useEffect 附加作用</h1><p>每次 render 都會呼叫 useEffect，useEffect 可以做到跟 class lifecycle 一樣的效果，但 useEffect 能把相同邏輯寫在同一個函式裡，相較 class 的 lifecycle 更好管理</p>
<p>useEffect 會做 4 件事情</p>
<ol>
<li>判斷第二個參數的陣列是否一樣，如果一樣才會繼續</li>
<li>執行上一次存下來的清理函式</li>
<li>執行<code>useEffect</code>的內容</li>
<li>把 清理函式 存下來，供下次使用</li>
</ol>
<br/>

<p>return 清理函式 <strong>等同 class 的 componentWillUnmount</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> onScroll = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, onScroll);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>, onScroll);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br/>

<p>第二參數傳入空陣列，<strong>等同 class componentDidMount</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// do componentDidMount</span></span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>等同 class  componentDidUpdate</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// do componentDidUpdate</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>class  componentDidUpdate 寫判斷條件，程式冗長</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.count !== <span class="built_in">this</span>.state.count) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="built_in">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>useEffect 只需要傳入第二參數，如 count 與前次不一樣就會執行</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="built_in">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count])</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="useContext-應用-Context"><a href="#useContext-應用-Context" class="headerlink" title="useContext 應用 Context"></a>useContext 應用 Context</h1><p>使用 Context API 時，不用使用 Consumer，useContext 可以直接用函式取得 context value<br>以 <a href="https://happy9990929.github.io/2022/07/04/react-context-api/">前一篇的 Context API 範例</a> 來改<br><br/></p>
<p><strong>設定 Context</strong></p>
<p>src/context/order.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> context = createContext();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; Provider &#125; = context;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>設定 Provider，contextValue 傳入 context</strong></p>
<p>改成使用 Hooks，Provider 一樣不變</p>
<p>src/App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ProductList <span class="keyword">from</span> <span class="string">&quot;./ProductList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [orders, setOrders] = useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> addOrder = <span class="function"><span class="params">order</span> =&gt;</span> &#123;</span><br><span class="line">    setOrders([...orders, order])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> contextValue = &#123;</span><br><span class="line">    orders, addOrder</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Provider value=&#123;contextValue&#125;&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &lt;ProductList /&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>使用 useContext 取得 contextValue</strong></p>
<p>useContext 可以直接取得 contextValue，就不用再用 Consumer 再從函式取值</p>
<p>src/Header.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> context <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; orders &#125; = useContext(context);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      購物車($&#123;orders.length&#125;)</span><br><span class="line">      &lt;hr/&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure>
<br/>
src/ProductList.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">&quot;./Product&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> menu = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;雞肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;豬肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;牛肉鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;海鮮鍋&#x27;</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;泡菜鍋&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProductList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;menu.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Product</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> &#123;<span class="attr">...item</span>&#125; /&gt;</span></span>)&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProductList;</span><br></pre></td></tr></table></figure>
<br/>
src/Product.js

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> context <span class="keyword">from</span> <span class="string">&quot;./context/order.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Product = <span class="function">(<span class="params">&#123; id, name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; addOrder &#125; = useContext(context);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;label&gt;&#123;name&#125;&lt;/label&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123;addOrder(id)&#125;&#125;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Product;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="useRef-存取組件變數"><a href="#useRef-存取組件變數" class="headerlink" title="useRef 存取組件變數"></a>useRef 存取組件變數</h1><p>useRef 是每次指定相同的 dom</p>
<p>createRef 是每次創建新的 dom</p>
<p>範例: 自動 focus input</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Ref = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> myInput = useRef();</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    myInput.current.focus();</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;myInput&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ref;</span><br></pre></td></tr></table></figure>
<br/>
也可以取代 instance variable

<p>範例: setInterval 計時器</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Ref = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> ref = useRef(&#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ref.current = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> stopCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(ref.current)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;addCount&#125;&gt;start&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;stopCount&#125;&gt;stop&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ref;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Hooks</tag>
        <tag>React useState</tag>
        <tag>React useEffect</tag>
        <tag>React useContext</tag>
        <tag>React useRef</tag>
      </tags>
  </entry>
  <entry>
    <title>React生命週期、錯誤處理</title>
    <url>/2022/07/04/react-lifecycle/</url>
    <content><![CDATA[<p><img src="https://imgur.com/tkfJbzu.jpg" alt="React"></p>
<p>在不同階段的生命週期，如掛載時、更新時、卸載時，分別會對應不同的函式</p>
<a id="more"></a>

<p>圖片截圖自: <a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">網站版 React Life Cycle 網友製</a></p>
<p>常用的生命週期有: constructor、render、componentDidMount、componentDidUpdate、componentWillUnmount</p>
<h1 id="constructor-建構函式"><a href="#constructor-建構函式" class="headerlink" title="constructor 建構函式"></a>constructor 建構函式</h1><p><strong>組件生成後第一個執行，唯一可以指定 state 的地方</strong></p>
<p><strong>constructor 注意</strong><br>❌ 不可呼叫 setState<br>❌ 不可呼叫 ajax<br>❌ 不要將 props 指定為 state</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props); <span class="comment">// super 為 Counter 的父類別 Component</span></span><br><span class="line">    <span class="built_in">this</span>.state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">this</span>.handClick = <span class="built_in">this</span>.handClick.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">handClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="render-渲染函式"><a href="#render-渲染函式" class="headerlink" title="render 渲染函式"></a>render 渲染函式</h1><p><strong>把資料轉成視覺畫面</strong>，可以讀取 props、state，並且會 return 資料</p>
<p>return 可以是一個 jsx 元素、Array、number、boolean、string、null、portal</p>
<p>在 React 16 以後，元素可以是不需被一個標籤包住</p>
<p>你可以用 return Array</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    &lt;h1&gt;title&lt;/h1&gt;,</span><br><span class="line">    &lt;div&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或是<strong>用虛擬的包裝元素 Fragment 包住，渲染出來後 Fragment 不會顯示在 HTML上</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, Fragment &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;Fragment&gt;</span><br><span class="line">        &lt;h1&gt;title&lt;/h1&gt;</span><br><span class="line">        &lt;div&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line">      &lt;/Fragment&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure>
<p>或是直接給空標籤，需要設定 babel，效果也會跟 Fragment 一樣</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;title&lt;/h1&gt;</span><br><span class="line">      &lt;div&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>render 注意</strong><br>❌ 不可呼叫 setState，setState 會更新 state，state 改變後重新 render，會無窮迴圈<br>❌ 不可呼叫 ajax<br><br/><br/></p>
<h1 id="componentDidMount-組件初次-render-完成"><a href="#componentDidMount-組件初次-render-完成" class="headerlink" title="componentDidMount 組件初次 render 完成"></a>componentDidMount 組件初次 render 完成</h1><p>組件第一次 render 完後執行，</p>
<p>可使用 dom、讀取 ajax 資料</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    items: []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.fetchList();</span><br><span class="line">  &#125;</span><br><span class="line">  fetchList = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://.../api&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      items: data,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; items &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;items.map(<span class="function">(<span class="params">item</span>) =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;item.id&#125;&gt;&#123;item.text&#125;&lt;/li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="componentDidUpdate-狀態屬性更新"><a href="#componentDidUpdate-狀態屬性更新" class="headerlink" title="componentDidUpdate 狀態屬性更新"></a>componentDidUpdate 狀態屬性更新</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">componentDidUpdate(prevProps, PrevState, snapshot)</span><br></pre></td></tr></table></figure>
<p>只要 state 或 props 有變動，就會執行 componentDidUpdate</p>
<p>componentDidUpdate 需要做一個 state 或 props 變動的條件判斷</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, PrevState, snapshot</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(prevProps.userID !== <span class="built_in">this</span>.props.userID) &#123;</span><br><span class="line">      <span class="built_in">this</span>.fetchUser(<span class="built_in">this</span>.props.userID);</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>snapshot 是指 getSnapshotBeforeUpdate 回傳的值，可判斷 snapshot 的值，執行動作<br><br/><br/></p>
<h1 id="componentWillUnmount-卸載前"><a href="#componentWillUnmount-卸載前" class="headerlink" title="componentWillUnmount 卸載前"></a>componentWillUnmount 卸載前</h1><p><strong>組件將要銷毀前執行</strong></p>
<p>常用於移除偵聽 removeEventListener、clearTimeout、clearInterval</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="built_in">this</span>.onScroll);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.timeoutTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; &#125;, <span class="number">3000</span>);</span><br><span class="line">  <span class="built_in">this</span>.intervalTimer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123; &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="built_in">this</span>.onScroll);</span><br><span class="line">  <span class="built_in">clearTimeout</span>(<span class="built_in">this</span>.timeoutTimer);</span><br><span class="line">  <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.intervalTimer);</span><br><span class="line">&#125;</span><br><span class="line">onScroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do someting</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>不常用的生命週期: getDerivedStateFromProps、shouldComponentUpdate、getSnapshotBeforeUpdate</p>
<h1 id="getDerivedStateFromProps"><a href="#getDerivedStateFromProps" class="headerlink" title="getDerivedStateFromProps"></a>getDerivedStateFromProps</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromProps</span>(<span class="params">nextProps, prevState</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>每次 mounted、props、state 的變動都會執行，並 return 新的 state，如不須變更須回傳 nu</strong></p>
<p>靜態函式，不會有 this、不能做非同步操作<br><br/><br/></p>
<h1 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制組件要不要更新，return boolean，預設為 true<br><br/><br/></p>
<h1 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getSnapshotBeforeUpdate</span>(<span class="params">prevProps, prevState</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>組件實際變更之前執行</strong></p>
<p>可以記錄 dom 變更之前的狀態，return 無限制型態</p>
<hr>
<h1 id="錯誤處理"><a href="#錯誤處理" class="headerlink" title="錯誤處理"></a>錯誤處理</h1><p><strong>抓組件在生命週期發生的錯誤</strong>，不會抓到 Promise 回傳的錯誤</p>
<h2 id="getDerivedStateFromError"><a href="#getDerivedStateFromError" class="headerlink" title="getDerivedStateFromError"></a>getDerivedStateFromError</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> getDerivedStateFromError(error)</span><br></pre></td></tr></table></figure>
<p>如果組件發生錯誤，想改變視覺狀態，可在 getDerivedStateFromError 執行錯誤處理</p>
<p><br/><br/></p>
<h2 id="componentDidCatch-error-info"><a href="#componentDidCatch-error-info" class="headerlink" title="componentDidCatch(error, info)"></a>componentDidCatch(error, info)</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">componentDidCatch(error, info)</span><br></pre></td></tr></table></figure>
<p>如果組件發生錯誤，想回傳錯誤訊息給後端或導頁，可在 componentDidCatch 執行</p>
<p><br/><br/></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./Child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    hasError: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromError</span>(<span class="params">error</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidCatch</span>(<span class="params">error, info</span>)</span> &#123;</span><br><span class="line">    axios.post(<span class="string">&#x27;/api/logger&#x27;</span>, &#123; info &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; hasError &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">if</span>(hasError) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Success&lt;/h1&gt;</span><br><span class="line">        &lt;Child /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react lifecycle</tag>
        <tag>react constructor</tag>
        <tag>react render</tag>
        <tag>react componentDidMount</tag>
        <tag>react componentDidUpdate</tag>
        <tag>react componentWillUnmount</tag>
        <tag>react getDerivedStateFromProps</tag>
        <tag>react shouldComponentUpdate</tag>
        <tag>react getSnapshotBeforeUpdate</tag>
        <tag>react getDerivedStateFromError</tag>
        <tag>react componentDidCatch</tag>
      </tags>
  </entry>
  <entry>
    <title>React Portal 傳送組件到指定元素</title>
    <url>/2022/07/04/react-portal/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<p>Portal 可以傳送組件到指定的元素，常用在有階層層級的 Modal</p>
<a id="more"></a>

<p>在 index.html 新增 id=”modal” 的元素<br>/public/index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>render App 到 #root</p>
<p>/src/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = createRoot(container);</span><br><span class="line">root.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>import Modal Component</p>
<p>/src/App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Modal <span class="keyword">from</span> <span class="string">&quot;./Modal&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Modal/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<p>import createPortal，並 return createPortal  到 #modal</p>
<p>/src/Modal.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPortal &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createPortal (</span><br><span class="line">      &lt;div&gt;Modal&lt;/div&gt;,</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;modal&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Modal;</span><br></pre></td></tr></table></figure>
<p><br><br><br>最後設定的內容就會出現在 #modal 裡囉！</p>
<p><img src="https://imgur.com/DrGcz6E.jpg" alt="htmlModal"></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React Portal</tag>
      </tags>
  </entry>
  <entry>
    <title>【Redux Toolkit 教學】管理組件的共用資料</title>
    <url>/2022/07/25/react-redux/</url>
    <content><![CDATA[<p><img src="https://imgur.com/Cc0ifaw.jpg" alt="Redux Toolkit"></p>
<p>Redux 是可以讓不同的組件，使用到共用的資料和方法，統一集中管理共用的狀態<br>Redux 不是 React 的 library，但很多 React 專案都會使用 Redux 來管理狀態，這也是學 React 比較複雜的地方<strong>🤪</strong><br>好在官方之後出了 Redux Toolkit，也推薦大家使用 Redux Toolkit 來撰寫 Redux，它是以 Redux 為核心，也比較容易上手！</p>
<a id="more"></a>
<p><br/><br/></p>
<h1 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a><strong>安裝環境</strong></h1><p>可依自己的需求安裝環境</p>
<p><strong>創建模板 React + Redux Toolkit</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app --template redux</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>安裝 react-redux、@reduxjs/toolkit</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm i react-redux @reduxjs/toolkit</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="認識變數"><a href="#認識變數" class="headerlink" title="認識變數"></a>認識變數</h1><p>使用 Redux，你會聽到幾個關鍵字：</p>
<ol>
<li><strong>state</strong>：用來存放資料狀態</li>
<li><strong>reducer</strong>：用來放改變 state 狀態的方法</li>
<li><strong>action</strong>：reducer 要修改 state 的話，需要傳入 action ，去判斷要啟動哪個 reducer</li>
<li><strong>Provider</strong>：在所有組件的最外面（通常是 Index.js）包一層 Provider，傳入 store，所有被包覆的組件都可以使用到 store 的狀態。</li>
<li><strong>store</strong>：存放 state、reducer、action 的檔案<br><br/><br/></li>
</ol>
<h1 id="Redux-流程"><a href="#Redux-流程" class="headerlink" title="Redux 流程"></a>Redux 流程</h1><ol>
<li>創建 <code>Store</code></li>
<li>在最外層加入 <code>Provider</code>，並傳入 store，使整個組件都能使用 store 資料</li>
<li>創建 <code>Slice</code>，設定 state、reducer、action</li>
<li>畫面渲染，取得 state、dispatch 方法改變狀態<br><br/><br/></li>
</ol>
<h1 id="範例情境："><a href="#範例情境：" class="headerlink" title="範例情境："></a>範例情境：</h1><p>todoList 列表，點擊按鈕後新增下一條<br><br/><br/></p>
<h1 id="創建-store"><a href="#創建-store" class="headerlink" title="創建 store"></a>創建 store</h1><p>store/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> todoReducer <span class="keyword">from</span> <span class="string">&quot;./slice/todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configureStore(&#123;</span><br><span class="line">  reducer: &#123;</span><br><span class="line">    todo: todoReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>configureStore</strong>：創建 store 的參數</p>
<p>原生為 creactStore，使用 creactStore 時會有被棄用的警告<br><br/></p>
<p>如有多個檔案，一樣 import 進來</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> todoReducer <span class="keyword">from</span> <span class="string">&quot;./slice/todo&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> productReducer <span class="keyword">from</span> <span class="string">&quot;./slice/product&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configureStore(&#123;</span><br><span class="line">  reducer: &#123;</span><br><span class="line">    todo: todoReducer,</span><br><span class="line">    product: productReducer</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="在最外層加入-Provider"><a href="#在最外層加入-Provider" class="headerlink" title="在最外層加入 Provider"></a>在最外層加入 Provider</h1><p>src/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> root = createRoot(container);</span><br><span class="line"></span><br><span class="line">root.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>也可以加在 App.js 的最外層，只要是外層都可以<br><br/><br/></p>
<h1 id="創建-Slice"><a href="#創建-Slice" class="headerlink" title="創建 Slice"></a><strong>創建 Slice</strong></h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todoSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">&quot;todo&quot;</span>,</span><br><span class="line">  initialState: &#123;</span><br><span class="line">    todolist: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;早上帶波比散步&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;中午帶波比散步&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;晚上帶波比散步&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;睡前帶波比散步&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    addTodo: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.todolist.push(action.payload);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; addTodo &#125; = todoSlice.actions; <span class="comment">// 取用方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectTodo = <span class="function">(<span class="params">state</span>) =&gt;</span> state.todo; <span class="comment">// 取用資料</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoSlice.reducer;</span><br></pre></td></tr></table></figure>
<p><strong>createSlice</strong>：創建slice，把 Redux 原生的 state、reducer、action 都合在一包，稱之為 slice</p>
<p><strong>name</strong>：取一個相關的名稱</p>
<p><strong>initialState</strong>：所有狀態的初始值</p>
<p><strong>reducers</strong>：存放函式，傳入兩個參數，第一個為需要修改的 state，第二個為 action 讓你傳入的參數<br><br/><br/></p>
<h1 id="畫面渲染"><a href="#畫面渲染" class="headerlink" title="畫面渲染"></a>畫面渲染</h1><p>component/TodoList.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; selectTodo &#125; <span class="keyword">from</span> <span class="string">&quot;../store/slice/todo&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> TodoList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> states = useSelector(selectTodo);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;states.todolist.map(<span class="function">(<span class="params">i</span>) =&gt;</span> (</span><br><span class="line">        &lt;li key=&#123;i.id&#125;&gt;&#123;i.name&#125;&lt;/li&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoList;</span><br></pre></td></tr></table></figure>
<p><strong>useSelector</strong>：要拿取 state，就要使用 Redux 的 useSelector api，傳入你在 slice 建立的 Selector<br><br/><br>引用組件到 App.js，dispatch 取得 store 方法</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">&quot;./components/TodoList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addTodo &#125; <span class="keyword">from</span> <span class="string">&quot;./store/slice/todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleAddTodo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(</span><br><span class="line">      addTodo(&#123; <span class="attr">id</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="attr">name</span>: <span class="string">&quot;帶波比去公園&quot;</span>&#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;TodoList /&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleAddTodo&#125;&gt;add todo&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="非同步操作"><a href="#非同步操作" class="headerlink" title="非同步操作"></a>非同步操作</h1><p>做前端一定會碰到 API 的串接，我們需要 createAsyncThunk 方法</p>
<p>我在 public 新增一個要被呼叫的 json</p>
<p>public/todolist.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;早上帶波比散步&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;中午帶波比散步&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;晚上帶波比散步&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>, <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;睡前帶波比散步&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
並使用 axios 串接 API

<p>api/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">&#x27;/index.json&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>
在 slice 的地方引用，並使用 createAsyncThunk 操作非同步

<p>store/slice/todo.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createAsyncThunk, createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getData &#125; <span class="keyword">from</span> <span class="string">&quot;../../api&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchData = createAsyncThunk(<span class="string">&#x27;todo/fetchTodo&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> getData();</span><br><span class="line">  <span class="keyword">return</span> response.data.data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todoSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">&quot;todo&quot;</span>,</span><br><span class="line"></span><br><span class="line">  initialState: &#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">    entities: []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  reducers: &#123; &#125;,</span><br><span class="line"></span><br><span class="line">  extraReducers: &#123;</span><br><span class="line">    [fetchData.pending]: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.loading = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    [fetchData.fulfilled]: <span class="function">(<span class="params">state, &#123; payload &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      state.loading = <span class="literal">false</span></span><br><span class="line">      state.entities = payload</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    [fetchData.rejected]: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.loading = <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectTodo = <span class="function">(<span class="params">state</span>) =&gt;</span> state.todo;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoSlice.reducer;</span><br></pre></td></tr></table></figure>
<p><strong>createAsyncThunk</strong>：在 Redux Toolkit 要呼叫非同步，需要使用 createAsyncThunk 方法</p>
<p>createAsyncThunk 接受兩個參數，第一個為 action type 字串，第二個為返回的 Promise，並生成一個<code>pending</code>、 <code>fulfilled</code>、<code>rejected</code> ，分派 action type 的 thunk</p>
<p><strong>extraReducers</strong>：因為非同步的函式不在 createSlice 裡面，如果要在 createSlice 中監聽這些 action type，需要在 extraReducers 使用<br><br/><br>dispatch 呼叫方法，並取得 api 回傳的資料</p>
<p>App.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchData, selectTodo &#125; <span class="keyword">from</span> <span class="string">&quot;./store/slice/todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line">  <span class="keyword">const</span> &#123; entities, loading &#125; = useSelector(selectTodo);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(fetchData());</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;entities.map(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>))&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="⚠️eslint-出現警告"><a href="#⚠️eslint-出現警告" class="headerlink" title="⚠️eslint 出現警告"></a>⚠️eslint 出現警告</h1><p>使用 useEffect 時遇到警告錯誤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">React Hook useEffect has a missing dependency: &#39;dispatch&#39;.</span><br><span class="line">Either include it or remove the dependency array</span><br></pre></td></tr></table></figure>
<br/>
如果想除掉警告可以把 dispatch 放到第二個參數的陣列裡

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   dispatch(fetchData());</span><br><span class="line">&#125;, [dispatch])</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="參考資料-React-React-Redux-Redux-Toolkit-新手教學、Using-Redux-Toolkit’s-createAsyncThunk"><a href="#參考資料-React-React-Redux-Redux-Toolkit-新手教學、Using-Redux-Toolkit’s-createAsyncThunk" class="headerlink" title="參考資料 React + React-Redux + Redux-Toolkit 新手教學、Using Redux Toolkit’s createAsyncThunk"></a>參考資料 <a href="https://penueling.com/%E7%B7%9A%E4%B8%8A%E5%AD%B8%E7%BF%92/react-react-redux-redix-toolkit-%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%B8/">React + React-Redux + Redux-Toolkit 新手教學</a>、<a href="https://blog.logrocket.com/using-redux-toolkits-createasyncthunk/">Using Redux Toolkit’s createAsyncThunk</a></h3>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>Redux 教學</tag>
        <tag>Redux Toolkit</tag>
        <tag>Redux Toolkit 教學</tag>
        <tag>configureStore</tag>
        <tag>createSlice</tag>
        <tag>useSelector</tag>
        <tag>useDispatch</tag>
        <tag>Redux Toolkit async</tag>
        <tag>createAsyncThunk</tag>
        <tag>extraReducers</tag>
        <tag>react-redux</tag>
      </tags>
  </entry>
  <entry>
    <title>React列表渲染-將陣列、物件渲染成元素</title>
    <url>/2022/07/01/react-render-list/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"><br>在 Vue 框架渲染列表時會有自己的語法 v-for，不過 React 沒有自定義的語法，而是直接使用 JS 的語法</p>
<a id="more"></a>

<h1 id="陣列渲染成元素"><a href="#陣列渲染成元素" class="headerlink" title="陣列渲染成元素"></a>陣列渲染成元素</h1><p>使用 JS 的 map 把每個 item 渲染出來，組件 Item 需要被代入 key 屬性，</p>
<p><strong>key 必須是唯一值</strong>，如陣列改變，才不會再被重新渲染，影響效能</p>
<p>key 如果為 index 也會被重新渲染，只是不會跳出警告，除非沒有唯一值才用 index，或是請後端加上唯一值</p>
<p>List.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> steps = [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;hello&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;world&#x27;</span>&#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;hello world&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;steps.map(<span class="function">(<span class="params">item, idx</span>) =&gt;</span></span><br><span class="line">          (<span class="xml"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;item.text&#125;</span>&gt;</span>&#123; item.text &#125;(&#123; idx &#125;)<span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span>)</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>
<p>Item.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li&gt;&#123;<span class="built_in">this</span>.props.children&#125;&lt;/li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Item;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="物件渲染成元素"><a href="#物件渲染成元素" class="headerlink" title="物件渲染成元素"></a>物件渲染成元素</h1><p>物件使用 <code>Object.keys</code> 先把物件屬性變成陣列，再使用 map 渲染</p>
<p><strong>物件渲染出來的結果順序不一定相同，如果要照資料排序須將資料改為陣列</strong></p>
<p>List.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Item <span class="keyword">from</span> <span class="string">&quot;./Item&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dog = &#123;</span><br><span class="line">      name: <span class="string">&#x27;bobee&#x27;</span>,</span><br><span class="line">      age: <span class="number">12</span>,</span><br><span class="line">      height: <span class="number">64</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123; <span class="built_in">Object</span>.keys(dog).map(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> value = dog[key];</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;Item key=&#123;value&#125;&gt;&#123;key&#125;: &#123;value&#125;&lt;/Item&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;) &#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React列表渲染</tag>
        <tag>react map</tag>
      </tags>
  </entry>
  <entry>
    <title>【DAY 3】React 環境安裝-完成前置作業</title>
    <url>/2022/10/18/react-install/</url>
    <content><![CDATA[<p><img src="https://imgur.com/BhMRQL0.jpg" alt="cover"></p>
<a id="more"></a>

<p><strong>［情境劇場］</strong></p>
<p>解師傅：嘿！老闆！我找到了一間不錯的店面，CRA 師傅會幫我們完成它！</p>
<p>要開一間 React 熱炒店，想當然要先有一間環境店面，即使小當家有再高的廚藝，沒有店面也是無用武之地，我們請 CRA 師傅幫我們建好環境，一起期待我們的新店面吧！!</p>
<hr>
<p>因為要建置一個 JavaScript 的開發環境，一般都會用 Node.js 來作為測試或開發用的本地端伺服器，所以在安裝 React 之前，要先確認：</p>
<ul>
<li>是否已安裝 Node</li>
<li>Node 版本需 &gt;= 14.0.0</li>
<li>npm 需 &gt;= 5.6</li>
</ul>
<p>安裝 Node 就等於已安裝了 npm 工具，所以只需要檢查 npm 版本即可<br><br/><br><br/><br><br/></p>
<h1 id="安裝-Node-js"><a href="#安裝-Node-js" class="headerlink" title="安裝 Node.js"></a>安裝 Node.js</h1><p>先到 <a href="https://nodejs.org/en/">Node 官網</a>，會看到有兩個版本</p>
<ul>
<li>LTS 長期支援版本：官方長期維護，較為穩定，供一般開發專案使用</li>
<li>Current 最新版本：具有現在最新功能，但可能會有變動，較不穩定，要對新功能做研究測試才會使用這個版本</li>
</ul>
<p>我們只是要執行專案，下載 LTS 長期支援版本<br/><br><br/><br><img src="https://imgur.com/c5Kj0ru.jpg" alt="nodejs"><br><br/><br><br/></p>
<h2 id="確認版本"><a href="#確認版本" class="headerlink" title="確認版本"></a>確認版本</h2><p>檢查是否安裝成功，打開命令提示字元(在 windows 搜尋 <code>cmd</code> 或在鍵盤按 開始 + <code>R</code>)</p>
<ul>
<li><p>確認 Node 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認 npm 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p><img src="https://imgur.com/elSlDav.jpg" alt="check node"><br>確認 Node 安裝完就可以來安裝 React 囉！<br/></p>
<br/>
<br/>
<br/>

</li>
</ul>
<h1 id="安裝-React"><a href="#安裝-React" class="headerlink" title="安裝 React"></a>安裝 React</h1><p><a href="https://github.com/facebook/create-react-app">Create React App</a> 簡稱為 CRA，是一個適合學習 React 的環境，<br>也是使用 React 建立一個 <strong>全新的 single-page 應用程式</strong> 的最佳方法</p>
<p>你可以在你要的資料夾下指令 <code>cmd</code> 開啟命令提示字元，<br>接著從下面選擇一種方式安裝 Create React App，官方使用 NPX</p>
<p>my-app 為專案名稱，依專案自行命名<br/></p>
<ul>
<li>NPX<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure></li>
<li>NPM<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init react-app my-app</span><br></pre></td></tr></table></figure></li>
<li>Yarn<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn create react-app my-app</span><br></pre></td></tr></table></figure>
<br/>
<br/>

</li>
</ul>
<blockquote>
<p>⭕ npm 與 npx 的差異<br>npm 為永久安裝，npx 安裝後即移除<br>Create React App 只有最一開始建立專案會用到，之後就不會用了，就很適合用 npx 來安裝</p>
</blockquote>
<br/>
<br/>

<p>安裝成功後，會出現建議的指令</p>
<p><img src="https://imgur.com/KMqwA2o.jpg" alt="CRA"></p>
<br/>
<br/>

<p><code>cd my-app</code>  進入 my-app</p>
<p><code>npm start</code>  開啟專案<br/><br><br/><br><br/><br><br/></p>
<p>如果記不起來指令也沒關係，使用編輯器開啟專案(這邊使用的是 Visual Studio Code)</p>
<p>點擊 package.json，<code>scripts</code> 的地方也會顯示指令</p>
<p><img src="https://imgur.com/WpfOXlM.jpg" alt="script"></p>
<p><code>npm start</code> 執行專案</p>
<p><code>npm run build</code> 打包專案</p>
<p><code>npm test</code> 執行測試</p>
<p><code>npm run eject</code> 對 Create React App 配置進行高度修改<br/><br><br/><br><br/><br><br/></p>
<p>安裝完就大功告成囉！!</p>
<p><img src="https://imgur.com/XCbyYyx.jpg" alt="react"><br><br/><br><br/><br><br/></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>我們今天用 Create React App 成功安裝好 React 了，接著可以進行專案上的開發，明天再來介紹專案內的檔案分別是做什麼功用，以及專案結構該怎麼分配吧！!</p>
<hr>
<p>本文為 IT 鐵人賽系列文 <a href="https://ithelp.ithome.com.tw/users/20115919/ironman/5602">你 React 了嗎? 30 天解鎖 React 技能</a></p>
<hr>
]]></content>
      <categories>
        <category>【IT 鐵人賽】你React了嗎? 30天解鎖React技能</category>
      </categories>
  </entry>
  <entry>
    <title>React-router-dom路由設定教學，實現頁面跳轉！</title>
    <url>/2022/07/20/react-router-dom/</url>
    <content><![CDATA[<p><img src="https://imgur.com/PWYji3a.jpg" alt="React"></p>
<p>此篇版本為 react-router-dom 6.3.0<br>react-router-dom 可以設定 react 的網站路由，是以 react-router 為基底，所以新增後會自動引入 react-router</p>
<a id="more"></a>

<h1 id="安裝-react-router-dom"><a href="#安裝-react-router-dom" class="headerlink" title="安裝 react-router-dom"></a>安裝 react-router-dom</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">npm i react-router-dom</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="路由設定"><a href="#路由設定" class="headerlink" title="路由設定"></a>路由設定</h1><p>在 index.js 設定整個網站的路由</p>
<h2 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h2><p>BrowserRouter 包在所有組件外層，確保整個網站可以使用 router</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">root.render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/BrowserRouter&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>BrowserRouter 跟 HashRouter 的差別<br>HashRouter：網址會帶 <code>#</code> 字號，純前端使用，換 url 時不會發送request<br>BrowserRouter： 網址沒有 <code>#</code> 字號較美觀，需有後端設定，換 url 時會發送request<br><br/></p>
<h2 id="Routers、Router-組件"><a href="#Routers、Router-組件" class="headerlink" title="Routers、Router 組件"></a>Routers、Router 組件</h2><p>在不同的 url 渲染不同的組件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter,</span><br><span class="line">  Routes,</span><br><span class="line">  Route,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">&quot;./routes/Page1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page2 <span class="keyword">from</span> <span class="string">&quot;./routes/Page2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = ReactDOM.createRoot(</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">root.render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;/&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;page1&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page1</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;page2&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page2</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  &lt;/BrowserRouter&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><code>path</code>：路徑<br><code>element</code>：要渲染的组件<br><br/></p>
<h2 id="全匹配路由"><a href="#全匹配路由" class="headerlink" title="全匹配路由"></a><strong><strong>全匹配路由</strong></strong></h2><p>設定 Route <code>path=&quot;*&quot;</code> 在所有路由的最下方，當上面的路徑都沒有匹配到時，就會顯示此組件，可用於 404 找不到頁面</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;/foo&quot;</span> element=&#123;Foo&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;bar&quot;</span> element=&#123;Bar&#125;&gt;&lt;/Route&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;*&quot;</span> element=&#123;NotFound&#125;&gt;&lt;/Route&gt;</span><br><span class="line">  &lt;/Route&gt;</span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="路由跳轉"><a href="#路由跳轉" class="headerlink" title="路由跳轉"></a>路由跳轉</h1><h2 id="Link-組件"><a href="#Link-組件" class="headerlink" title="Link 組件"></a>Link 組件</h2><p>指定連結路徑，跳轉頁面 url</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line">&lt;Link to=<span class="string">&quot;index&quot;</span>&gt;index&lt;/Link&gt;;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="NavLink-組件"><a href="#NavLink-組件" class="headerlink" title="NavLink 組件"></a>NavLink 組件</h2><p>NavLink 跟 Link 用法相同，差別只在於 NavLink 可以判斷 to 的 url 是否為當前路徑，可用於設定 active 的樣式</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NavLink &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">   &lt;NavLink style=&#123;<span class="function">(<span class="params">&#123; isActive &#125;</span>) =&gt;</span> (&#123; <span class="attr">color</span>: isActive? <span class="string">&quot;red&quot;</span>: <span class="string">&quot;&quot;</span> &#125;)&#125;&gt;style&lt;/NavLink&gt;</span><br><span class="line">   &lt;NavLink className=&#123;<span class="function">(<span class="params">&#123; isActive &#125;</span>) =&gt;</span> isActive ? <span class="string">&quot;red&quot;</span> : <span class="string">&quot;blue&quot;</span>&#125;&gt;className&lt;/NavLink&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate"></a>useNavigate</h2><p>可直接傳入要跳轉的 url，可傳入相對路徑，-1 為回上一層</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> navigate= useNavigate();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 前路徑 /a；    當前路徑 /a/a1</span></span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(<span class="string">&#x27;/b&#x27;</span>)&#125;&gt;跳轉到/b&lt;/div&gt;</span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(<span class="string">&#x27;a11&#x27;</span>)&#125;&gt;跳轉到/a/a1/a11&lt;/div&gt;</span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(<span class="string">&#x27;../a2&#x27;</span>)&#125;&gt;跳轉到/a/a2&lt;/div&gt;</span><br><span class="line">    &lt;div onClick=&#123;<span class="function">() =&gt;</span> navigate(-<span class="number">1</span>)&#125;&gt;跳轉到/a&lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="嵌套路由-Nested-Routes"><a href="#嵌套路由-Nested-Routes" class="headerlink" title="嵌套路由 Nested Routes"></a>嵌套路由 <strong><strong>Nested Routes</strong></strong></h1><p>如要用 App 當作基底的 layout 有兩個步驟</p>
<ol>
<li><p>設定路由在 App 的 Router 底下</p>
</li>
<li><p>加入 Outlay，Outlay 會顯示需變更切換的組件</p>
<br/>

</li>
</ol>
<p><strong>設定路由</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;Routes&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;/&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;page1&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page1</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">&quot;page2&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Page2</span> /&gt;</span></span>&#125; /&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">  &lt;/Routes&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>並在 App.js ( layout 組件) 的地方加入 Outlay</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Outlet, Link &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;nav&gt;</span><br><span class="line">        &lt;Link to=<span class="string">&quot;/page1&quot;</span>&gt;Page1&lt;/Link&gt; |&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">        &lt;Link to=<span class="string">&quot;/page2&quot;</span>&gt;Page2&lt;/Link&gt;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line">      &lt;Outlet/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="默認路由-index-Routes"><a href="#默認路由-index-Routes" class="headerlink" title="默認路由 index Routes"></a>默認路由 index Routes</h2><p>如為嵌套路由時，可設定預設要顯示的組件，當 url 為 ‘/about’ 時，Outlet 會顯示 Default 組件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Routes&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;/about&quot;</span> element=&#123;About&#125;&gt;</span><br><span class="line">    &lt;Route index element=&#123;Default&#125;&gt;&lt;/Route&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;contact&quot;</span> element=&#123;Contact&#125;&gt;&lt;/Route&gt;</span><br><span class="line">  &lt;/Route&gt;</span><br><span class="line">&lt;/Routes&gt;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="Params參數"><a href="#Params參數" class="headerlink" title="Params參數"></a>Params參數</h1><h2 id="useParams"><a href="#useParams" class="headerlink" title="useParams()"></a>useParams()</h2><p>當 router 是動態路由時，useParams 可以取得 url 的 params</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;Routes&gt;</span><br><span class="line">    &lt;Route path=<span class="string">&quot;/product/:id&quot;</span> element=&#123;<span class="xml"><span class="tag">&lt;<span class="name">Product</span>/&gt;</span></span>&#125; /&gt;</span><br><span class="line">  &lt;/Routes&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> params= useParams();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;params.id&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams()"></a>useSearchParams()</h2><p>可查找或設定 Query String 問號後面的 params，用法跟 <code>useState()</code> 一樣</p>
<p>如當前路徑為 /product?id=12</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [searchParams, setSearchParams] = useSearchParams();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(searchParams.get(<span class="string">&quot;id&quot;</span>)); <span class="comment">// 12</span></span><br><span class="line">  <span class="built_in">console</span>.log(searchParams.getAll(<span class="string">&quot;id&quot;</span>)); <span class="comment">// [12]</span></span><br><span class="line"></span><br><span class="line">  setSearchParams(&#123;</span><br><span class="line">    name: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  &#125;); <span class="comment">// /product?name=foo</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br/><br/></p>
<h1 id="當前路由資訊"><a href="#當前路由資訊" class="headerlink" title="當前路由資訊"></a>當前路由資訊</h1><h2 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h2><p>獲取當前 url 的各種屬性，</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> location = useLocation();</span><br><span class="line"><span class="built_in">console</span>.log(location);</span><br></pre></td></tr></table></figure>
<p>你可以得到以下資訊</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  pathname: <span class="string">&quot;/hello/world&quot;</span>,</span><br><span class="line">  search: <span class="string">&quot;?filter=123&quot;</span>,</span><br><span class="line">  hash: <span class="string">&quot;#menu&quot;</span>,</span><br><span class="line">  state: <span class="literal">null</span>,</span><br><span class="line">  key: <span class="string">&quot;12345&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>pathname：URL 路徑</p>
<p>search：Query String Params</p>
<p>hash：用於確定頁面滾動的具體位置</p>
<p>state：對於 window.history.state 的包裝</p>
<p>key：每個 Location 對象擁有一個唯一的 key，可以實現數據緩存</p>
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="8536485431"></ins></p>
<hr>
<h3 id="參考文獻：react-router-dom使用指南（最新V6-0-1）、router-tutorial"><a href="#參考文獻：react-router-dom使用指南（最新V6-0-1）、router-tutorial" class="headerlink" title="參考文獻：react-router-dom使用指南（最新V6.0.1）、router-tutorial"></a>參考文獻：<a href="https://zhuanlan.zhihu.com/p/431389907">react-router-dom使用指南（最新V6.0.1）</a>、<a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md">router-tutorial</a></h3>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react-router-dom</tag>
        <tag>BrowserRouter</tag>
        <tag>HashRouter</tag>
        <tag>React Routers</tag>
        <tag>React Router</tag>
        <tag>React Link</tag>
        <tag>React NavLink</tag>
        <tag>React useNavigate</tag>
        <tag>React Nested Routes</tag>
        <tag>React useParams</tag>
        <tag>React useSearchParams</tag>
        <tag>React useLocation</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 dart-sass 取代 node-sass</title>
    <url>/2022/03/18/sass-dart-sass/</url>
    <content><![CDATA[<p><img src="https://imgur.com/Gh27Ew9.jpg" alt="sass"></p>
<p>今天在更新網站時，github actions 在 npm install 時發生了錯誤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm ERR! code 1</span><br><span class="line">npm ERR! path &#x2F;home&#x2F;runner&#x2F;work&#x2F;portfolio&#x2F;portfolio&#x2F;node_modules&#x2F;node-sass</span><br><span class="line">&#x2F;&#x2F; ...中間太多省略</span><br><span class="line">Error: Process completed with exit code 1.</span><br></pre></td></tr></table></figure>
<p>根據資訊推測是 node-sass 的問題，爬了一下文發現，</p>
<a id="more"></a>
<p><a href="https://sass-lang.com/blog/libsass-is-deprecated">Sass 官方已在 2020-10-26 正式宣布棄用 LibSass，並推薦使用 Dart Sass</a></p>
<p>LibSass 顯然沒有足夠的工程帶寬來跟上 Sass 語言的最新發展，且 node-sass 底層依賴 LibSass，常常導致很多使用者安裝的特別的困難，sass 官方已經將 dart-sass 作為未來主要的的開發方向，效能更好。</p>
<p>如果你是 Node Sass 的用戶，遷移到 Dart Sass 很簡單：只需在你的 package.json 文件中將 node-sass 替換為 sass. 這兩個包都公開了相同的 JavaScript API。</p>
<br>

<h1 id="安裝-Dart-Sass-步驟"><a href="#安裝-Dart-Sass-步驟" class="headerlink" title="安裝 Dart Sass 步驟"></a>安裝 Dart Sass 步驟</h1><p>1.如果安裝了 node-sass 首先需要解除安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm remove node-sass</span><br></pre></td></tr></table></figure>
<p>2.安装 dart-sass</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install sass sass-loader -D</span><br></pre></td></tr></table></figure>
<p>3、如果專案之前用到/deep/需要替換為<code>::v-deep</code>，否則會報錯</p>
<h1 id="安裝錯誤"><a href="#安裝錯誤" class="headerlink" title="安裝錯誤"></a>安裝錯誤</h1><p>在安裝的過程中，如果遇到下面錯誤😨</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm ERR! code EBADPLATFORM</span><br><span class="line">npm ERR! notsup Unsupported platform for fsevents@2.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line">npm ERR! notsup Valid OS:    darwin</span><br><span class="line">npm ERR! notsup Valid Arch:  undefined</span><br><span class="line">npm ERR! notsup Actual OS:   win32</span><br><span class="line">npm ERR! notsup Actual Arch: x64</span><br></pre></td></tr></table></figure>
<p>不要緊張! 把 <code>package-lock.json</code> 移除掉，再 npm install 重新生成，<br>再安裝一次 dart-sass 就成功啦!!</p>
<hr>
<p>重新裝了 dart-sass 後，github actions 就跑成功啦！真是可喜可賀😀🌟🌟🌟</p>
]]></content>
      <categories>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
        <tag>node-sass</tag>
        <tag>dart-sass</tag>
        <tag>Process completed with exit code 1</tag>
      </tags>
  </entry>
  <entry>
    <title>設定 OG 分享網址連結，讓你的網站更吸引人</title>
    <url>/2022/03/21/seo-og-image/</url>
    <content><![CDATA[<p><img src="https://imgur.com/SlR0x2P.jpg" alt="og"></p>
<p>你有沒有遇過，當你分享網站連結到 Facebook 時，出現了詭異的縮圖，甚至連縮圖、介紹都沒有，不寫個訊息的話，完全不會讓人想點進去，有人可能還會以為你被盜了😅</p>
<a id="more"></a>

<p><img src="https://imgur.com/bBfZShO.png" alt="無設定og"></p>
<p>這不是被盜！是你應該設定 OG，給用戶理解和信任的網站體驗。</p>
<br/>

<h1 id="OG-是什麼"><a href="#OG-是什麼" class="headerlink" title="OG 是什麼"></a>OG 是什麼</h1><p>OG 是由 Facebook 提出的設定，全名為 Open Graph Protocol，官方中文翻譯為「<a href="https://developers.facebook.com/docs/sharing/webmasters?locale=zh_TW">開放社交關係圖</a>」。<br>OG 可以輕鬆的標記網頁的結構化訊息、包含標題、描述、圖片等，以呈現顯示分享連結的預覽內容，現在主流的社群網站平台都支援 OG，例如：Facebook、Line、Twitter 等。<br>OG 可以呈現網站明確的模樣，增加用戶的信任與好的網站體驗，相對的也會有比較好的點閱率。</p>
<br/>

<h1 id="設定-OG"><a href="#設定-OG" class="headerlink" title="設定 OG"></a>設定 OG</h1><p>要設定 OG 其實很簡單，首先了解每個 og 屬性的意義</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:url&quot;</span> <span class="attr">content</span>=<span class="string">&quot;你的網址&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:locale&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網站語系，ex:zh_TW，預設為 en_US&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;類型，ex：website&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網站的標題&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;網站內容描述&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;縮圖圖片連結&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;圖像的 MIME 類型，可為 image/jpeg、image/gif 或 image/png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:width&quot;</span> <span class="attr">content</span>=<span class="string">&quot;縮圖寬度&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:height&quot;</span> <span class="attr">content</span>=<span class="string">&quot;縮圖高度&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中縮圖的寬、高度依<a href="https://developers.facebook.com/docs/games/services/sharing">官方</a>建議的比例，對高解析度裝置使用至少 1080 像素的寬度以獲得最佳顯示，至少使用寬度為 600 像素的圖像以顯示圖像連結廣告。<br>🔸 正方形：比例 1:1，如 600 x 600 像素<br>🔸 長方形：比例 1.91:1，如 600 x 314 像素</p>
<br/>

<p>接著設定到自己的網站</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:url&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://happy9990929.github.io/gtplay&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:locale&quot;</span> <span class="attr">content</span>=<span class="string">&quot;zh_TW&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;website&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;GTPLAY吉他館&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;販賣各式弦樂器，吉他、電吉他、烏克莉莉等，歡迎洽詢!&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://happy9990929.github.io/gtplay/logo.png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;image/png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:width&quot;</span> <span class="attr">content</span>=<span class="string">&quot;1080&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image:height&quot;</span> <span class="attr">content</span>=<span class="string">&quot;565&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>

<h1 id="檢查-OG"><a href="#檢查-OG" class="headerlink" title="檢查 OG"></a>檢查 OG</h1><p>可以透過 <a href="https://developers.facebook.com/tools/debug/">Facebook分享偵錯工具</a> 來檢查你的 OG，輸入網址，就可以預覽你的成果囉！</p>
<br/>
設定完 og 後，到 Facebook 建立貼文，就可以看到清楚的網站資訊啦！<br/>
是不是看起來漂亮多了呢🤩快把你的網站也設定一下吧！
<br/>
<br/>

<p><img src="https://imgur.com/L4oYvxB.jpg" alt="OG完成"></p>
<hr>
<h3 id="Facebook-官方文件"><a href="#Facebook-官方文件" class="headerlink" title="Facebook 官方文件:"></a>Facebook 官方文件:</h3><p><a href="https://developers.facebook.com/docs/sharing/webmasters?locale=zh_TW">Facebook 開放社交關係圖</a><br><a href="https://developers.facebook.com/docs/sharing/best-practices#images">Facebook 分享最佳作法</a></p>
<hr>
]]></content>
      <categories>
        <category>SEO</category>
      </categories>
      <tags>
        <tag>og image</tag>
        <tag>分享連結圖片</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Vue transition 製作動畫過渡組件</title>
    <url>/2021/03/14/transitions/</url>
    <content><![CDATA[<h1 id="Enter-amp-Leave-Transitions"><a href="#Enter-amp-Leave-Transitions" class="headerlink" title="Enter &amp; Leave Transitions"></a>Enter &amp; Leave Transitions</h1><p>Vue.js 將過場漸變的效果包裝成一個獨立的 transition 元件， 再由開發者自行定義元素的進場 (Enter) 、退場 (Leave) 以及動畫過程漸變 (Transitions) 的樣式。動畫執行完後才會把 DOM 元素拔掉</p>
<a id="more"></a>

<p><img src="https://i.imgur.com/1AHgsrN.png" alt="transition圖片解說"><br>元素進場 (顯示) ：<br>v-enter-from: 進入的開始狀態。在插入元素之前添加，在插入元素之後刪除一幀。<br>v-enter-active: 進入的活動狀態。在整個進入階段應用。在插入元素之前添加，在過渡/動畫結束時將其刪除。此類可用於定義進入過渡的持續時間，延遲和緩和曲線。<br>v-enter-to: 進入的結束狀態。元素插入後添加了一幀（同時 v-enter-from 刪除），過渡/動畫結束後刪除。</p>
<p>元素退場 (消失) ：<br>v-leave-from: 離開的開始狀態。觸發離開過渡時立即添加，在一幀後移除。<br>v-leave-active: 離開的活動狀態。在整個離開階段應用。觸發離開過渡時立即添加，當過渡/動畫結束時將其移除。此類可用於定義離開過渡的持續時間，延遲和緩和曲線。<br>v-leave-to: 離開的結束狀態。觸發離開過渡（同時 v-leave-from 刪除）後添加一幀，在過渡/動畫結束時刪除。</p>
<h2 id="範例一-淡入淡出"><a href="#範例一-淡入淡出" class="headerlink" title="範例一: 淡入淡出"></a>範例一: 淡入淡出</h2><p>transition 定義 name=”fade”，style 將會加入 fade 樣式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isAmin = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAmin,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isAmin = !isAmin&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isAmin&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-from</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="範例二-使用-keyframes-做-bounce-動畫"><a href="#範例二-使用-keyframes-做-bounce-動畫" class="headerlink" title="範例二: 使用 keyframes 做 bounce 動畫"></a>範例二: 使用 keyframes 做 bounce 動畫</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isAmin = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isAmin,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isAmin = !isAmin&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isAmin&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bounce-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: bounce-in <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bounce-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: bounce-in <span class="number">0.5s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> bounce-in &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.25</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="有-v-for-時需用-transition-group"><a href="#有-v-for-時需用-transition-group" class="headerlink" title="有 v-for 時需用 transition-group"></a>有 v-for 時需用 transition-group</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>transition</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE 的 SSR 原理</title>
    <url>/2021/08/29/vue-SSR/</url>
    <content><![CDATA[<p><img src="https://imgur.com/mRrJH3R.jpg" alt="Imgur"><br>SPA 跟 SSR 各有好壞，因應專案需求來決定我們需要的是 SPA 還是 SSR 的網站</p>
<a id="more"></a>

<h1 id="什麼是-CSR"><a href="#什麼是-CSR" class="headerlink" title="什麼是 CSR?"></a>什麼是 CSR?</h1><p>CSR (Client-Side Rendering) 客戶端渲染，通常是講 SPA (Single Page Application)居多，SPA 指的是單頁式應用，內容交由 client 的瀏覽器去處理，HTML 透過 JavaScript 渲染上去。</p>
<p>優點: 減少 server 端的壓力、頁面切換速度快<br>缺點: 首屏顯示慢、SEO 較差<br>適合用在較不需 SEO 或需高頻操作的網站，如: 後台系統、活動頁面等</p>
<h1 id="什麼是-SSR"><a href="#什麼是-SSR" class="headerlink" title="什麼是 SSR?"></a>什麼是 SSR?</h1><p>SSR (Sever-Side Rendering) 伺服器端渲染，由 Server 端的 CPU 收到請求後，解析完整的 HTML 返回到使用者接收端，然後呈現網頁。</p>
<p>優點: 首屏顯示快，不用下載大量的 javascript、SEO 效果好<br>缺點: server 端承受比較大的壓力、點擊別頁時，整個畫面需重新繪製，如網路不好，使用者體驗會較差<br>適合用在很需要 SEO 的網站，如: 平台網站、新聞媒體網站</p>
<h1 id="什麼是-NUXT"><a href="#什麼是-NUXT" class="headerlink" title="什麼是 NUXT"></a>什麼是 NUXT</h1><p>提供 SSR 的功能、更方便去做 Vue.js 的開發的 framework</p>
<h1 id="Nuxt-SSR-原理解析"><a href="#Nuxt-SSR-原理解析" class="headerlink" title="Nuxt SSR 原理解析"></a>Nuxt SSR 原理解析</h1><p>Nuxt.js 是建構在 Node.js 的環境之上，要 run Nuxt 時，需要起一個 Node.js 的 server<br>Nuxt 在 bundle 時，會 bundle 兩份檔案:</p>
<ol>
<li>Server 端的檔案 =&gt; 給搜尋引擎爬蟲，提高 SEO</li>
<li>Client 端的檔案 =&gt; 給 User 看的檔案內容</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>SSR</tag>
        <tag>SPA</tag>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>環境建置 &amp; Vue-cli專案</title>
    <url>/2021/03/08/vue-cli/</url>
    <content><![CDATA[<h1 id="Node-js-環境建置"><a href="#Node-js-環境建置" class="headerlink" title="Node.js 環境建置"></a>Node.js 環境建置</h1><h2 id="下載-NVM"><a href="#下載-NVM" class="headerlink" title="下載 NVM"></a>下載 NVM</h2><p>nvm 是 Node.js 的版本管理器 (version manager)，可在同一台主機上安裝多個版本的 Node.js 環境，因為不同專案可能會使用不同的 Node.js 版本，那就需要透過一個版本管理器來切換不同的 Node.js 版本。<br><br>NVM install - 點選右邊的 releases<br><a href="https://github.com/coreybutler/nvm-windows">https://github.com/coreybutler/nvm-windows</a></p>
<a id="more"></a>

<p>NVM 常用指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm list // 列出目前電腦有安裝的 nodejs 版本</span><br><span class="line">nvm list available // 目前網路上可用的 nodejs 版本列表</span><br><span class="line">nvm install v12.19.0 // 該 nodejs 版本下載安裝</span><br><span class="line">nvm uninstall v12.19.0 // 移除該 nodejs 版本</span><br><span class="line">nvm use v12.19.0 // 使用該 nodejs 版本</span><br><span class="line">nvm -v // 目前該 nvm 版本</span><br></pre></td></tr></table></figure>
<h2 id="下載-node-js"><a href="#下載-node-js" class="headerlink" title="下載 node.js"></a>下載 node.js</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install v12.19.0 // 該 nodejs 版本下載安裝</span><br><span class="line">nvm use v12.19.0 // 使用該 nodejs 版本</span><br><span class="line">node -v // 目前該 node 版本</span><br></pre></td></tr></table></figure>
<h2 id="檢查-npm-是否安裝成功"><a href="#檢查-npm-是否安裝成功" class="headerlink" title="檢查 npm 是否安裝成功"></a>檢查 npm 是否安裝成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v // 目前該 npm 版本</span><br></pre></td></tr></table></figure>
<p>npm 常用指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v // 查看目前npm的版本</span><br><span class="line">npm install &lt;package&gt; // 安裝npm套件</span><br><span class="line">npm install &lt;package&gt;  -D // 安裝開發階段套件</span><br><span class="line">npm install &lt;package&gt;  -S // 安裝上線階段套件</span><br><span class="line">npm rm &lt;package&gt; // 移除該套件</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="安裝-Vue-cli"><a href="#安裝-Vue-cli" class="headerlink" title="安裝 Vue-cli"></a>安裝 Vue-cli</h1><p>Vue CLI 是一個基於 Vue.js 進行快速開發的完整系統，確保各種構建工具能夠平穩銜接，使開發人員可以專注在撰寫應用上，而不必花好幾天去糾結配置的問題。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>
<h1 id="建構一個新的-Vue-專案"><a href="#建構一個新的-Vue-專案" class="headerlink" title="建構一個新的 Vue 專案"></a>建構一個新的 Vue 專案</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create my-project // my-project 為要創建的資料夾名稱</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">vue ui // ui介面設定</span><br></pre></td></tr></table></figure>
<br>
Please pick a preset: (請選擇一個預設)

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Manually select features //手動選擇功能</span><br></pre></td></tr></table></figure>
<br>
Check the features needed for your project: (檢查項目所需的功能)

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Choose Vue version //選擇 Vue 版本</span><br><span class="line">Babel //JavaScript 轉譯器，可將 ES6+ 程式碼轉為等效的 ES5 程式碼</span><br><span class="line">Router // 路由</span><br><span class="line">CSS pre-processors //CSS 預處理器</span><br></pre></td></tr></table></figure>
<br>
Choose a version of Vue.js that you want to start the project with (選擇Vue版本)

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3.x (Preview)</span><br></pre></td></tr></table></figure>
<br>
Use history mode for router?

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Y</span><br></pre></td></tr></table></figure>
<br>
Pick a CSS pre-processor

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sass/SCSS (with dart-sass)</span><br></pre></td></tr></table></figure>
<br>
Where do you prefer placing config for Babel, ESLint, etc.?

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">In package.json</span><br></pre></td></tr></table></figure>
<br>
Save this as a preset for future projects?

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Y</span><br></pre></td></tr></table></figure>
<p>Save preset as: 直接 ENTER<br><br></p>
<p>建立完後啟動 serve</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-project // 進入資料夾</span><br><span class="line">npm run serve // 開啟serve</span><br><span class="line">npm run build // 建立dist</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Vue-cli-專案結構解析"><a href="#Vue-cli-專案結構解析" class="headerlink" title="Vue-cli 專案結構解析"></a>Vue-cli 專案結構解析</h1><p>node_modules：透過 npm 下載的套件跟工具都會放在這個資料夾裡面<br><br>package.json：關於這整包專案所有的資訊，包含安裝套件版本、專案版本、npm 指令都可以在這個 json 檔案裡面找得到，之後要搬移專案重新安裝套件也需要靠這個 json 檔案<br><br>package-lock.json：專門紀錄 package.json 裡面更細節的內容，例如安裝的套件的詳細版本，或是確認你的 dependency (依賴)是被哪個函式庫所要求的等等<br><br>babel.config.js: babel 轉換 JS 時所用的套件</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>Vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition API 共用邏輯的封裝</title>
    <url>/2021/03/21/vue-composition-api/</url>
    <content><![CDATA[<h1 id="Vue-處理共用邏輯的方式"><a href="#Vue-處理共用邏輯的方式" class="headerlink" title="Vue 處理共用邏輯的方式"></a>Vue 處理共用邏輯的方式</h1><p>以往用 Vue2 處理共用邏輯有幾種方式</p>
<p>🔸 Mixins<br>🔸 Higher-order Components ( HOC )<br>🔸 Renderless Components</p>
<p>但 Vue2 存在著一些問題，命名衝突、產生多餘的元件實體、資料難以追蹤來源，就會有一些狀況產生。<br>隨著 Vue3 的升級，Vue3 Composition API 解決了 Vue2 的問題</p>
<a id="more"></a>

<p>🔸 資料追蹤清晰<br>🔸 不會有命名衝突的問題<br>🔸 不需要產生多餘的元件</p>
<h1 id="取得-Composition-API-的值"><a href="#取得-Composition-API-的值" class="headerlink" title="取得 Composition API 的值"></a>取得 Composition API 的值</h1><p>從共用邏輯封裝的 Composition API 取值</p>
<h2 id="範例-顯示滑鼠座標"><a href="#範例-顯示滑鼠座標" class="headerlink" title="範例: 顯示滑鼠座標"></a>範例: 顯示滑鼠座標</h2><h3 id="封裝邏輯的-JS"><a href="#封裝邏輯的-JS" class="headerlink" title="封裝邏輯的 JS"></a>封裝邏輯的 JS</h3><p>不同 components 可能會共用的 JS</p>
<p>composition-api/useMousePosition.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> y = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> positionUpdate = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    x.value = e.pageX;</span><br><span class="line">    y.value = e.pageY;</span><br><span class="line">  &#125;;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h3 id="整合封裝好的-JS"><a href="#整合封裝好的-JS" class="headerlink" title="整合封裝好的 JS"></a>整合封裝好的 JS</h3><p>所有封裝的 JS 都在 index.js 做整合，component 只需引入這支就好</p>
<p>composition-api/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;./useMousePosition.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMousePosition = mousePosition;</span><br></pre></td></tr></table></figure>
<br>

<h3 id="index-js-引入到-component"><a href="#index-js-引入到-component" class="headerlink" title="index.js 引入到 component"></a>index.js 引入到 component</h3><p>MousePosition.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = useMousePosition();</span><br><span class="line">    <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mouse Position<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>x: &#123;&#123;x&#125;&#125; y: &#123;&#123;y&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h3 id="解構取出-reactive-的物件"><a href="#解構取出-reactive-的物件" class="headerlink" title="解構取出 reactive 的物件"></a>解構取出 reactive 的物件</h3><p>組件透過解構要取出 reactive 的物件時，解構出來的變數會變成單純的變數(不具備綁定功能)，要讓 reactive 的變數被綁定有兩種方法:</p>
<p>1️⃣ 不使用解構，直接 return reactive 物件</p>
<p>composition-api/useMousePosition.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, reactive, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> position = reactive(&#123;</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> positionUpdate = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    position.x = e.pageX;</span><br><span class="line">    position.y = e.pageY;</span><br><span class="line">  &#125;;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>MousePosition.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> position = useMousePosition();</span><br><span class="line">    <span class="keyword">return</span> &#123; position &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mouse Position<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>x: &#123;&#123; position.x &#125;&#125; y: &#123;&#123; position.y &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<p>2️⃣ 使用 toRefs</p>
<p>只要把 reactive 物件用 toRefs 包起來，就可以讓解構的值具備資料綁定的效果</p>
<p>composition-api/useMousePosition.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> position = reactive(&#123;</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> positionUpdate = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    position.x = e.pageX;</span><br><span class="line">    position.y = e.pageY;</span><br><span class="line">  &#125;;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> toRefs(position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>MousePosition.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = useMousePosition();</span><br><span class="line">    <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mouse Position<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>x: &#123;&#123;x&#125;&#125; y: &#123;&#123;y&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<p>🔡 如要 return 更多的變數可使用展開運算子的方式</p>
<p>useMousePosition.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = ref(<span class="string">&quot;bobee&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> position = reactive(&#123;</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> positionUpdate = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    position.x = e.pageX;</span><br><span class="line">    position.y = e.pageY;</span><br><span class="line">  &#125;;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;mousemove&quot;</span>, positionUpdate);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123; ...toRefs(position), name &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>MousePosition.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y, name &#125; = useMousePosition();</span><br><span class="line">    <span class="keyword">return</span> &#123; x, y, name &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mouse Position<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>x: &#123;&#123;x&#125;&#125; y: &#123;&#123;y&#125;&#125; &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這麼一來就可以取出多個值了！</p>
<br>

<h1 id="設定-Composition-API-的值"><a href="#設定-Composition-API-的值" class="headerlink" title="設定 Composition API 的值"></a>設定 Composition API 的值</h1><h2 id="範例-點擊按鈕改變值"><a href="#範例-點擊按鈕改變值" class="headerlink" title="範例: 點擊按鈕改變值"></a>範例: 點擊按鈕改變值</h2><p>useState.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">stateAdd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> idx = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> addState = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    idx.value++;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; idx, addState &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;./useMousePosition.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; stateAdd &#125; <span class="keyword">from</span> <span class="string">&quot;./useState.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMousePosition = mousePosition;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useState = stateAdd;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; idx, addState &#125; = useState();</span><br><span class="line">    <span class="keyword">return</span> &#123; idx, addState &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>number: &#123;&#123;idx&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addState&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>封裝的內容都是 priviate 的，即使複製兩個 components 也不會影響到各別的值</p>
<br>

<h1 id="封裝非同步處理的狀態"><a href="#封裝非同步處理的狀態" class="headerlink" title="封裝非同步處理的狀態"></a>封裝非同步處理的狀態</h1><p>useFetch.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchs</span>(<span class="params">API_url = <span class="string">&quot;&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLoad = ref(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fetchData = reactive(&#123; <span class="attr">data</span>: [] &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> errorMsg = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  axios</span><br><span class="line">    .get(API_url)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      isLoad.value = <span class="literal">true</span>;</span><br><span class="line">      fetchData.data = res.data;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      isLoad.value = <span class="literal">true</span>;</span><br><span class="line">      errorMsg.value = error.request.statusText;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123; isLoad, fetchData, errorMsg &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;./useMousePosition.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; stateAdd &#125; <span class="keyword">from</span> <span class="string">&quot;./useState.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchs &#125; <span class="keyword">from</span> <span class="string">&quot;./useFetch.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useMousePosition = mousePosition;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useState = stateAdd;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useFetch = fetchs;</span><br></pre></td></tr></table></figure>
<br>

<p>FetchData.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useFetch &#125; <span class="keyword">from</span> <span class="string">&quot;@/composition-api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isLoad, fetchData, errorMsg &#125; = useFetch(</span><br><span class="line">      <span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> &#123; isLoad, fetchData, errorMsg &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;!isLoad&quot;</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../assets/load.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--errorMsg不等於空時才會出現--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;errorMsg&quot;</span>&gt;</span>ERROR: &#123;&#123; errorMsg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isLoad&quot;</span> <span class="attr">class</span>=<span class="string">&quot;imgBlock&quot;</span>&gt;</span></span><br><span class="line">    &lt;img</span><br><span class="line">      v-for=&quot;item in fetchData.data&quot;</span><br><span class="line">      :key=&quot;item.url&quot;</span><br><span class="line">      :src=&quot;item.url&quot;</span><br><span class="line">      alt=&quot;&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>Composition API</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 自定義模板 directive</title>
    <url>/2021/03/14/vue-directive/</url>
    <content><![CDATA[<h1 id="全局-directive"><a href="#全局-directive" class="headerlink" title="全局 directive"></a>全局 directive</h1><p>透過 directive 可以讓每頁都使用共用語法，在 main.js 中添加全局 directive<br>directive mounted 生命週期等同於 onMounted, 但這裡為純 js 並非 vue 的週期裡，所以這樣使用</p>
<a id="more"></a>

<p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定義變數名稱focus</span></span><br><span class="line">app.directive(<span class="string">&quot;focus&quot;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(el);</span><br><span class="line">    el.focus(); <span class="comment">// 有v-focus名稱的都會有focus()效果</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>template</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span> // 自定義變數名稱前面須加上前綴v-XXX</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="範例-將數字轉千分位"><a href="#範例-將數字轉千分位" class="headerlink" title="範例: 將數字轉千分位"></a>範例: 將數字轉千分位</h2><p>tool.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> numPrice = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> n = num + <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> numArr = n.split(<span class="string">&quot;&quot;</span>).reverse();</span><br><span class="line">  <span class="keyword">const</span> overArr = [];</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  numArr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">3</span>) &#123;</span><br><span class="line">      i = <span class="number">1</span>;</span><br><span class="line">      overArr.push(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    overArr.push(item);</span><br><span class="line">  &#125;);</span><br><span class="line">  overArr.reverse();</span><br><span class="line">  <span class="keyword">return</span> overArr.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>main.js<br>mounted(el, val) // 第二個參數為 v-xxx=”丟進去的值”</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; numPrice &#125; <span class="keyword">from</span> <span class="string">&quot;@/lib/tools.js&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line">app.directive(<span class="string">&quot;price&quot;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> p = numPrice(binding.value);</span><br><span class="line">    el.innerHTML = p;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>template</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-price</span>=<span class="string">&quot;15555000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="加上-v-model-時需-updated"><a href="#加上-v-model-時需-updated" class="headerlink" title="加上 v-model 時需 updated"></a>加上 v-model 時需 updated</h3><p>因為 mounted 只會執行一次，如需動態綁定，需再加上 updated<br>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.directive(<span class="string">&quot;price&quot;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> p = numPrice(binding.value);</span><br><span class="line">    el.innerHTML = p;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">updated</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> p = numPrice(binding.value);</span><br><span class="line">    el.innerHTML = p;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>components</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">1233211234567</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-price</span>=<span class="string">&quot;num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>directive</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 動態路由設定</title>
    <url>/2021/03/16/vue-dynamic-router/</url>
    <content><![CDATA[<h1 id="設定動態網址"><a href="#設定動態網址" class="headerlink" title="設定動態網址"></a>設定動態網址</h1><a id="more"></a>

<p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/About.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/courses&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Courses&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Courses/index.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/courses/:id&quot;</span>, <span class="comment">// 加上:id</span></span><br><span class="line">    name: <span class="string">&quot;Courses_id&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Courses/_id.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h1 id="設定外層的nav"><a href="#設定外層的nav" class="headerlink" title="設定外層的nav"></a>設定外層的nav</h1><p>useRoute: 用來獲取網址上面的參數<br>useRouter: 提供處理轉址相關的操作API</p>
<p>點擊選單，會根據路由去加上active，由於動態選單不會被加上router-link-active，所以使用監聽的方式去綁定class</p>
<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> route = useRoute();</span><br><span class="line">    <span class="keyword">const</span> reouteArr = reactive([<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;courses&#x27;</span>]); <span class="comment">// 每個選單的路由</span></span><br><span class="line">    <span class="keyword">const</span> index = ref(<span class="number">0</span>);</span><br><span class="line">    watch(</span><br><span class="line">      ()=&gt;route.path, <span class="comment">// 取得現在的路由</span></span><br><span class="line">      ()=&gt;&#123;</span><br><span class="line">        reouteArr.forEach(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> rp = route.path.substr(<span class="number">1</span>).split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>]; <span class="comment">// 移除斜線</span></span><br><span class="line">          <span class="comment">// substr() 方法返回一個字符串中從指定位置開始到指定字符數的字符。</span></span><br><span class="line">          <span class="comment">// split() 指定的字串分割，返回一個新Array</span></span><br><span class="line">          <span class="keyword">if</span> (item === rp) &#123;</span><br><span class="line">            index.value = idx;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> &#123; index &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:index === 0&#125;&quot;</span>&gt;</span> Home <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:index === 1&#125;&quot;</span>&gt;</span> About <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/courses&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active:index === 2&#125;&quot;</span>&gt;</span> Courses <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">  <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">  a &#123;</span><br><span class="line">    <span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span><br><span class="line">    &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#42b983</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="內層的選單"><a href="#內層的選單" class="headerlink" title="內層的選單"></a>內層的選單</h1><p>如要切換選單時做更多的效果可以不使用router-link<br>router.push可以指向要去的頁面<br>router.push(‘/路徑’) or router.push({ path: ‘/路徑’ })<br>router.go(-1);回上一頁</p>
<p>滑鼠中鍵沒辦法讓router.push跳出視窗<br>可以使用router.resolve儲存路徑，再用純JS開啟路徑的視窗</p>
<p>/Courses/index.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onMounted, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> coursesList = reactive(&#123; <span class="attr">data</span>:&#123;&#125; &#125;); <span class="comment">// 儲存API回來的data</span></span><br><span class="line">    <span class="keyword">const</span> router = useRouter();</span><br><span class="line">    <span class="keyword">const</span> goNewRouter = <span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">      router.push(&#123;<span class="attr">path</span>: <span class="string">`/courses/<span class="subst">$&#123;id&#125;</span>`</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 滑鼠中鍵沒辦法讓router.push跳出視窗</span></span><br><span class="line">    <span class="keyword">const</span> openNewTab = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> saveUrl = router.resolve(&#123; <span class="attr">path</span>: <span class="string">`/courses/<span class="subst">$&#123;id&#125;</span>`</span> &#125;); <span class="comment">// router.resolve可儲存路徑</span></span><br><span class="line">      <span class="built_in">window</span>.open(saveUrl.href);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      axios.get(<span class="string">&#x27;https://vue-lessons-api.herokuapp.com/courses/list&#x27;</span>).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        coursesList.data = res.data;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      coursesList, goNewRouter, openNewTab</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果 @click事件有兩個就要加修飾符，才知道點的是要觸發哪一個Funtion<br>@click.left 滑鼠左鍵 @click.middle 滑鼠中鍵</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in coursesList.data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click.left</span>=<span class="string">&quot;goNewRouter(item.id)&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">click.middle</span>=<span class="string">&quot;openNewTab(item.id)&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.photo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;teacher-box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;teach-img&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item.teacher.img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.teacher.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>NTD: &#123;&#123; item.money &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#courses</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">318px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>($color: #<span class="number">000000</span>, $alpha: <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.2s</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">231</span>, <span class="number">231</span>, <span class="number">231</span>);</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">opacity</span>: 1;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    &gt; h1 &#123;</span><br><span class="line">      <span class="selector-tag">font-size</span>: 14<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">text-align</span>: <span class="selector-tag">left</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.teacher-box</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">      &gt; h2 &#123;</span><br><span class="line">        <span class="selector-tag">font-size</span>: 13<span class="selector-tag">px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.teach-img</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        &gt; img &#123;</span><br><span class="line">          <span class="selector-tag">border-radius</span>: 25<span class="selector-tag">px</span>;</span><br><span class="line">          <span class="selector-tag">margin-right</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="設定內頁"><a href="#設定內頁" class="headerlink" title="設定內頁"></a>設定內頁</h1><p>/Courses/_id.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRoute, useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onMounted, onUnmounted, reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> route = useRoute();</span><br><span class="line">    <span class="keyword">const</span> router = useRouter();</span><br><span class="line">    <span class="keyword">const</span> courses = reactive(&#123; <span class="attr">data</span>:&#123;&#125; &#125;);</span><br><span class="line">    <span class="keyword">const</span> isError = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      axios.get(<span class="string">`https://vue-lessons-api.herokuapp.com/courses/<span class="subst">$&#123;route.params.id&#125;</span>`</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        courses.data = res.data.data[<span class="number">0</span>];</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        isError.value = <span class="literal">true</span>;</span><br><span class="line">        courses.data[<span class="string">&#x27;errorMsg&#x27;</span>] = error.response.data.error_message;</span><br><span class="line">        <span class="comment">// 設定三秒會跳回原頁面</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          router.push(&#123;<span class="attr">path</span>:<span class="string">&#x27;/courses&#x27;</span>&#125;);</span><br><span class="line">          <span class="comment">// router.push(&#x27;/courses&#x27;)</span></span><br><span class="line">          <span class="comment">// router.go(-1); // 回上一頁</span></span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 離開此組件要執行的動作</span></span><br><span class="line">    onUnmounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      courses, isError</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>物件第二層初始時會是空的(undefined)，用v-if包住，等有資料時才會出現</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!isError&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; courses.data.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>NTD: &#123;&#123; courses.data.money &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;courses.data.photo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Object.keys(courses.data).length !== 0&quot;</span>&gt;</span><span class="comment">&lt;!--等有資料時才會出現--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;courses.data.teacher.img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="comment">&lt;!--物件第二層初始時會是空的--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; courses.data.teacher.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- error_message --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;isError&quot;</span>&gt;</span>&#123;&#123; courses.data.errorMsg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 的環境變量</title>
    <url>/2022/01/01/vue-env/</url>
    <content><![CDATA[<p><img src="https://imgur.com/lY6VKQe.png" alt="Vue"></p>
<p>有時候我們在開發專案時，會遇到開發環境跟正式環境資料不一樣的狀況，比較常見的就是域名不同，<br>最近我遇到的需求是，上正式站時，某個連結網址要換成正式站網址，但開發環境要用測試連結，那我們可以怎麼做呢?<br>像這種時候，可以使用環境變量，簡單解決各個環境的問題。</p>
<a id="more"></a>

<h1 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h1><p>在開發的過程中，通常會有三種階段: 開發環境、測試環境、生產環境(正式環境)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">development  <span class="comment">// 模式用于 vue-cli-service serve</span></span><br><span class="line">production   <span class="comment">// 模式用于 vue-cli-service build 和 vue-cli-service test:e2e</span></span><br><span class="line">test         <span class="comment">// 模式用于 vue-cli-service test:unit</span></span><br></pre></td></tr></table></figure>
<br/>
設定每個環境下的模式，serve、build 本身就有預設值，如沒要特別改，可省略--mode，你也可以自己定義模式環境，比如新建一個叫的staging模式，是用於構建生產環境的，但一些變量不同

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>, <span class="comment">// 等同vue-cli-service serve --mode development</span></span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>, <span class="comment">// 等同vue-cli-service build --mode production</span></span><br><span class="line">  <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span>,</span><br><span class="line">  <span class="string">&quot;staging&quot;</span> :<span class="string">&quot;vue-cli-service build --mode staging&quot;</span> <span class="comment">// 自訂 staging 模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="環境變量"><a href="#環境變量" class="headerlink" title="環境變量"></a>環境變量</h1><p>Cli-3.0總共提供了四種方式來制定環境變量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.env                <span class="comment">// 在所有的環境中被載入</span></span><br><span class="line">.env.local          <span class="comment">// 在所有的環境中被載入，只會在本地，會被 git 忽略</span></span><br><span class="line">.env.[mode]         <span class="comment">// 只在指定的模式中被載入</span></span><br><span class="line">.env.[mode].local   <span class="comment">// 只在指定的模式中被載入，只會在本地，會被 git 忽略</span></span><br></pre></td></tr></table></figure>
<p>不同的文件會在不同環境中被載入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.env                      <span class="comment">// 會在所有的環境中被載入</span></span><br><span class="line">.env.local                <span class="comment">// 會在所有環境中載入，但只限於本地</span></span><br><span class="line">.env.development          <span class="comment">// 只在開發環境中被載入</span></span><br><span class="line">.env.production           <span class="comment">// 只在生產環境中被載入</span></span><br><span class="line">.env.development.local    <span class="comment">// 會在本地開發環境中載入</span></span><br></pre></td></tr></table></figure>
<br/>

<p>運行相關命令的時候，會根據不同環境載入不同的文件，以至於能正確讀到文件裡的變量。載入的優先級別是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.env.[ mode ].local &gt; .env.[ mode ] &gt; .env</span><br></pre></td></tr></table></figure>
<br/>

<p>在文件中，我們只需要以key=value的方式就可以設置變量了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">FOO=bar</span><br><span class="line">VUE_APP_SECRET=secret</span><br></pre></td></tr></table></figure>
<p>設置完環境變量之後就可以在我們的項目中使用這兩個變量了。<br/><br>請注意，只有NODE_ENV，BASE_URL和以 VUE_APP_ 開頭的變量將通過 webpack.DefinePlugin 靜態地嵌入到客戶端側的代碼中。這是為了避免意外公開機器上可能具有相同名稱的私鑰。<br>在webpack配置中使用，沒什麽限制，可以直接通過process.env.XXX來使用<br><br/></p>
<h1 id="示例：建立-Staging-模式"><a href="#示例：建立-Staging-模式" class="headerlink" title="示例：建立 Staging 模式"></a>示例：建立 Staging 模式</h1><p>首先在項目根目錄下新建.env.staging文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">NODE_ENV=production</span><br><span class="line">VUE_APP_TITLE=My App (staging)</span><br></pre></td></tr></table></figure>
<br/>
package.json 設定 --mode staging

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span>,</span><br><span class="line">  <span class="string">&quot;staging&quot;</span> :<span class="string">&quot;vue-cli-service build --mode staging&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p>下指令<br><code>npm run staging</code><br>會在staging 模式下加載可能存在的.env、.env.staging和 .env.staging.local 文件然後構建出生產環境應用</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html">官方-模式和環境變量</a><br><a href="http://www.qianduan8.com/1704.html">vue-cli3.0入门-环境变量和模式配置</a></p>
<h3 id="nuxt-js-配置參考"><a href="#nuxt-js-配置參考" class="headerlink" title="nuxt.js 配置參考"></a>nuxt.js 配置參考</h3><p><a href="https://www.itread01.com/content/1547462292.html">nuxt.js配置基本域名和NODE_ENV環境變數</a></p>
<hr>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>env</tag>
        <tag>env環境變量</tag>
        <tag>環境變數</tag>
        <tag>環境變量</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 的 $event 事件回傳</title>
    <url>/2021/03/14/vue-event-return/</url>
    <content><![CDATA[<h1 id="event-事件回傳"><a href="#event-事件回傳" class="headerlink" title="$event 事件回傳"></a>$event 事件回傳</h1><p>取得事件的 target</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clickFn = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.target);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      clickFn,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickFn($event)&quot;</span>&gt;</span>CLICK<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如有多個參數，$event 事件需放在最後面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clickFn = <span class="function">(<span class="params">num, e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num, e.target);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      clickFn,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickFn(100, $event)&quot;</span>&gt;</span>CLICK<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>event</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 表單元件處理</title>
    <url>/2021/03/21/vue-form/</url>
    <content><![CDATA[<h1 id="表單綁定"><a href="#表單綁定" class="headerlink" title="表單綁定"></a>表單綁定</h1><p>表單開發是 Web 開發中最常見的需求之一，幾個基本的 Vue 表單處理如下</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>E-MAIL<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入email&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>PASSWORD<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入密碼&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>我已閱讀使用者條款<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handSubmit&quot;</span>&gt;</span>送出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> email = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> password = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> checkbox = ref(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> handSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(email, password, checkbox);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; email, password, checkbox, handSubmit &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="複選的-checkbox"><a href="#複選的-checkbox" class="headerlink" title="複選的 checkbox"></a>複選的 checkbox</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in courseslist.tags&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.tag&quot;</span>&gt;</span></span><br><span class="line">      &lt;input</span><br><span class="line">        :id=&quot;item.tag&quot;</span><br><span class="line">        type=&quot;checkbox&quot;</span><br><span class="line">        :value=&quot;item.tag&quot;</span><br><span class="line">        v-model=&quot;courseslist.listArray&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">:for</span>=<span class="string">&quot;item.tag&quot;</span>&gt;</span>&#123;&#123; item.tag &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handSubmit&quot;</span>&gt;</span>送出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> courseslist = reactive(&#123;</span><br><span class="line">      listArray: [],</span><br><span class="line">      tags: [</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;JavaScript&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Html&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Css&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Html5&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Vuejs&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;React&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Sass&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Css3&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">tag</span>: <span class="string">&quot;Canvas&quot;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> handSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(courseslist.listArray);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; courseslist, handSubmit &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="下拉選單-select"><a href="#下拉選單-select" class="headerlink" title="下拉選單 select"></a>下拉選單 select</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;select-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;cityActive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>請選擇縣市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in twZip.city&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;areaActive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>請選擇區域<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in twZip.area&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handSubmit&quot;</span>&gt;</span>送出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; onMounted, reactive, ref, watch &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> twZip = reactive(&#123; <span class="attr">city</span>: [], <span class="attr">area</span>: [] &#125;);</span><br><span class="line">    <span class="keyword">const</span> cityActive = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> areaActive = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    watch(cityActive, <span class="function">(<span class="params">newCity</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 透過filter把特定縣市資料拉出來</span></span><br><span class="line">      <span class="keyword">const</span> newArr = twZip.city.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.name === newCity);</span><br><span class="line">      areaActive.value = <span class="string">&quot;&quot;</span>; <span class="comment">// 每次變換時清空，才會顯示請選擇區域</span></span><br><span class="line">      twZip.area = newArr[<span class="number">0</span>].area;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handSubmit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(cityActive.value);</span><br><span class="line">      <span class="built_in">console</span>.log(areaActive.value);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      axios</span><br><span class="line">        .get(<span class="string">&quot;https://vue-lessons-api.herokuapp.com/city/list&quot;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          twZip.city = res.data.twzip.city;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; twZip, cityActive, areaActive, handSubmit &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="register-註冊"><a href="#register-註冊" class="headerlink" title="register 註冊"></a>register 註冊</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!isRegister&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &lt;input</span><br><span class="line">      type=&quot;text&quot;</span><br><span class="line">      placeholder=&quot;輸入使用者名稱&quot;</span><br><span class="line">      v-model=&quot;registered.username&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;error_message.username&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; error_message.username &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>PASSWORD<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &lt;input</span><br><span class="line">      type=&quot;password&quot;</span><br><span class="line">      placeholder=&quot;輸入密碼&quot;</span><br><span class="line">      v-model=&quot;registered.password&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;error_message.password&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; error_message.password &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>E-MAIL<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入email&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;registered.email&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;error_message.email&quot;</span>&gt;</span>&#123;&#123; error_message.email &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年齡<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;輸入年齡&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;registered.age&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;registered.sex&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>boy<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;registered.sex&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;girl&quot;</span>&gt;</span>girl<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;registered.terms&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>我已閱讀使用者條款<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handClick&quot;</span>&gt;</span>送出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isRegister&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>註冊成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive, ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isRegister = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">const</span> registered = reactive(&#123;</span><br><span class="line">      username: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      password: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      sex: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      email: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      age: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      terms: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> error_message = reactive(&#123;&#125;);</span><br><span class="line">    <span class="keyword">const</span> handError = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 把 error 的值傳進 error_message</span></span><br><span class="line">      <span class="built_in">Object</span>.keys(error).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> (error_message[item] = error[item]));</span><br><span class="line">      <span class="built_in">console</span>.log(error_message);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      axios</span><br><span class="line">        .post(</span><br><span class="line">          <span class="string">&quot;https://vue-lessons-api.herokuapp.com/auth/registered&quot;</span>,</span><br><span class="line">          registered</span><br><span class="line">        )</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          isRegister.value = <span class="literal">true</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          handError(error.response.data.error_message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; registered, isRegister, handClick, error_message &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.createApp(app).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的各種常用修飾符/語法糖</title>
    <url>/2021/03/21/vue-modifiers/</url>
    <content><![CDATA[<h1 id="事件修飾符"><a href="#事件修飾符" class="headerlink" title="事件修飾符"></a>事件修飾符</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.prevent <span class="comment">// 防止做原本預設的動作</span></span><br><span class="line">.stop <span class="comment">// 阻止事件冒泡到父元素，阻止任何父事件處理程序被執行</span></span><br><span class="line">.self <span class="comment">// 只在自己的層級處理自己的程序</span></span><br><span class="line">.once <span class="comment">// 只處理一次</span></span><br><span class="line">.native <span class="comment">// 在元件的根元素上監聽一個原生事件</span></span><br><span class="line">.sync</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="按鍵修飾符"><a href="#按鍵修飾符" class="headerlink" title="按鍵修飾符"></a>按鍵修飾符</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@keydown.enter  <span class="comment">// 按下enter做某事</span></span><br><span class="line">@keydown.a.prevent <span class="comment">// 防止A做原本預設動作</span></span><br><span class="line">@keydown<span class="number">.13</span>  <span class="comment">// 按下enter做某事，也可直接寫成keyCode碼</span></span><br></pre></td></tr></table></figure>
<h1 id="v-model-修飾符"><a href="#v-model-修飾符" class="headerlink" title="v-model 修飾符"></a>v-model 修飾符</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.lazy <span class="comment">// 打完文字後，焦點移出後才會反應</span></span><br><span class="line">.number <span class="comment">// 把輸入值當成數字</span></span><br><span class="line">.trim <span class="comment">// 裁掉文字前後的空格</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 嵌套路由，幫網站設定 layout</title>
    <url>/2021/03/16/vue-nested-routes/</url>
    <content><![CDATA[<h1 id="嵌套路由-Nested-Routes"><a href="#嵌套路由-Nested-Routes" class="headerlink" title="嵌套路由(Nested Routes)"></a>嵌套路由(Nested Routes)</h1><p>父層有 router-view 可以切換，內層也有自己的 router-view 可以切換</p>
<a id="more"></a>

<p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&quot;../views/About.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Changelog <span class="keyword">from</span> <span class="string">&quot;../views/About/Changelog.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> GitHub <span class="keyword">from</span> <span class="string">&quot;../views/About/GitHub.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Guide <span class="keyword">from</span> <span class="string">&quot;../views/About/Guide.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> aboutIndex <span class="keyword">from</span> <span class="string">&quot;../views/About/index.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Reference <span class="keyword">from</span> <span class="string">&quot;../views/About/Reference.vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">    component: About,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;&quot;</span>, <span class="comment">// children裡的路徑不需要斜線/</span></span><br><span class="line">        component: aboutIndex</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;changelog&quot;</span>,</span><br><span class="line">        component: Changelog</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;gitHub&quot;</span>,</span><br><span class="line">        component: GitHub</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;guide&quot;</span>,</span><br><span class="line">        component: Guide</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;reference&quot;</span>,</span><br><span class="line">        component: Reference</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br>

<h2 id="內層加上-router-view"><a href="#內層加上-router-view" class="headerlink" title="內層加上 router-view"></a>內層加上 router-view</h2><p>about.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/changelog&quot;</span>&gt;</span>changelog<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/gitHub&quot;</span>&gt;</span>gitHub<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/guide&quot;</span>&gt;</span>guide<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/reference&quot;</span>&gt;</span>reference<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.about</span> &#123;</span><br><span class="line">  &gt; nav &#123;</span><br><span class="line">    &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">      &amp;.router-link-exact-active &#123;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-tag">rebeccapurple</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需注意的是，嵌套路由的router-link，class會自動產生router-link-active，router-link-active的下一層也會產生router-link-exact-active，可以利用此類別來設定active</p>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt 錯誤頁面處理</title>
    <url>/2021/09/13/vue-nuxt-error/</url>
    <content><![CDATA[<p><img src="https://imgur.com/dq0PWCR.jpg" alt="Imgur"></p>
<p>使用者網址輸入錯誤，或頁面發生錯誤的時候，會在畫面上給一個 404 的頁面，在 Nuxt 我們也需要設置 404 的頁面</p>
<a id="more"></a>

<p>在 layouts 新增一個 error.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;error.statusCode === 404&quot;</span>&gt;</span>Page not found<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>An error occurred<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home page<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">&#x27;error&#x27;</span>], <span class="comment">// 如頁面發生錯誤，會傳遞叫 error 的 props</span></span><br><span class="line">  layout: <span class="string">&#x27;blog&#x27;</span>, <span class="comment">// you can set a custom layout for the error page</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt 快速安裝及設定</title>
    <url>/2021/08/30/vue-nuxt-install/</url>
    <content><![CDATA[<p><img src="https://imgur.com/mRrJH3R.jpg" alt="Imgur"></p>
<h1 id="安裝-Nuxt"><a href="#安裝-Nuxt" class="headerlink" title="安裝 Nuxt"></a>安裝 Nuxt</h1><p>安裝 Nuxt 前，先檢查 Nodejs 最少需要 v10.13 的版本，如小於此版本，請升級 Nodejs</p>
<a id="more"></a>

<p>以下步驟請依專案而定</p>
<p>安裝 nuxt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx create-nuxt-app &lt;project-name&gt;</span><br></pre></td></tr></table></figure>
<br>

<p>Project name: 直接 Enter</p>
<br>

<p>Programming language:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JavaScript</span><br></pre></td></tr></table></figure>
<br>

<p>Package manager:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm</span><br></pre></td></tr></table></figure>
<br>

<p>UI framework:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>
<br>

<p>Nuxt.js modules: (可先安裝的功能)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Axios - Promise based HTTP client</span><br></pre></td></tr></table></figure>
<br>

<p>Linting tools: 直接 Enter</p>
<br>

<p>Testing framework: 直接 Enter</p>
<br>

<p>Rendering mode:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Universal (SSR / SSG)</span><br></pre></td></tr></table></figure>
<br>

<p>Deployment target:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server (Node.js hosting)</span><br></pre></td></tr></table></figure>
<br>

<p>Development tools:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jsconfig.json (Recommended <span class="keyword">for</span> VS Code <span class="keyword">if</span> you<span class="string">&#x27;re not using typescript)</span></span><br></pre></td></tr></table></figure>
<br>

<p>What is your GitHub username?</p>
<br>

<p>Version control system:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure>
<br>

<h2 id="Nuxt-2-14-6-安裝出現錯誤"><a href="#Nuxt-2-14-6-安裝出現錯誤" class="headerlink" title="Nuxt 2.14.6 安裝出現錯誤"></a>Nuxt 2.14.6 安裝出現錯誤</h2><p><img src="https://imgur.com/aJWOh3A.jpg" alt="Imgur"><br>這是目前只有在 Nuxt 2.14.6 會出現錯誤，可以在 nuxt.config.js 裡面的 build 新增以下設定解決這個錯誤</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  babel: &#123;</span><br><span class="line">    plugins: [[<span class="string">&#x27;@babel/plugin-proposal-private-methods&#x27;</span>, &#123; <span class="attr">loose</span>: <span class="literal">true</span> &#125;]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="安裝-SASS"><a href="#安裝-SASS" class="headerlink" title="安裝 SASS"></a>安裝 SASS</h1><p>Nuxt 預設是沒有辦法使用 SASS 的，如需要可以 npm 安裝 SASS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev sass sass-loader fibers</span><br></pre></td></tr></table></figure>
<h1 id="components-false"><a href="#components-false" class="headerlink" title="components: false"></a>components: false</h1><p>這個功能是 nuxt v2.13 時候所導入的功能，可以讓你不需要 import 就可以載入組件，但是這會造成不知道組件的正確路徑以及可能會有命名的相關問題，所以不推薦使用<br>在 nuxt.config.js 裡面把 components 這個欄位設定成 false，或是砍掉這個設定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components: <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>nuxt 教學</tag>
      </tags>
  </entry>
  <entry>
    <title>了解 Nuxt 架構解析</title>
    <url>/2021/09/09/vue-nuxt-layout/</url>
    <content><![CDATA[<p><img src="https://imgur.com/wcFw6fe.jpg" alt="Imgur"></p>
<h1 id="nuxt-指令"><a href="#nuxt-指令" class="headerlink" title="nuxt 指令"></a>nuxt 指令</h1><p>在 package.json 有一些指令可以操作 nuxt</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;nuxt&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;nuxt build&quot;,</span><br><span class="line">  &quot;start&quot;: &quot;nuxt start&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p><code>npm run dev</code> 開發環境時使用<br><code>npm run build</code> 打包專案，分別有 Client 端與 Server 端<br><code>npm run start</code> 用 Node.js 起一個 Server</p>
<h1 id="資料夾功能"><a href="#資料夾功能" class="headerlink" title="資料夾功能"></a>資料夾功能</h1><p>pages - 放頁面的地方，新增頁面後，會自動產生新頁面名稱的 router<br>layouts - 頁面共用的版型，像 header、footer 會重複的部分，可以寫在 default.vue，供每頁共用</p>
<p>layouts/default.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Nuxt</span> /&gt;</span>  // Nuxt 為 pages 裡面的頁面，像是 Vue Cli 的 router-view</span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>components - 頁面的最小單位組件<br>assets - 需要經過 Nuxt 編譯打包、壓縮的檔案，如 CSS、圖片等<br>static - 不需經過 Nuxt 編譯的檔案，如 favicon、音樂、Zip、自己寫的 json 等<br>store - 操作 Vuex 的地方<br>middleware - 進入頁面前需要做的中間層，如驗證檢查等<br>plugins - 自定義的 Global nuxt 套件，會從 nuxt.config.js 自動注入</p>
<p>🔸create-nuxt-app v3.7.1 安裝完後沒有 layout 以及 assets 目錄可以自己新增</p>
]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt 生命週期及執行順序</title>
    <url>/2021/09/10/vue-nuxt-lifecycle-hooks/</url>
    <content><![CDATA[<p><img src="https://imgur.com/btmMqMY.jpg" alt="Imgur"></p>
<p>因為 Nuxt 又有牽扯到 Server 的部分，所以 Nuxt 的生命週期會跟 Vue 的 Nuxt 有一點不太一樣</p>
<a id="more"></a>

<p><img src="https://imgur.com/Myy3gry.jpg" alt="nuxt"></p>
<h1 id="asyncData"><a href="#asyncData" class="headerlink" title="asyncData"></a>asyncData</h1><p>在 Server 執行階段，瀏覽器渲染之前的生命週期，Server 端處理非同步時，如 API 需要做到 SEO，需在 asyncData 處理，asyncData 只會執行一次。<br>🔸 asyncData 只有在頁面選染前才會執行，所以只有在 <code>pages</code> 裡的 component 才能使用 asyncData，如其他資料夾的 component 也需要 SEO，需把資料往下傳遞或是存進 Vuex 渲染<br>🔸 不能使用 this，在 Server 階段執行還沒產生 Vue 實體<br>🔸 不能使用瀏覽器有關的 API，如 windiw.alert、document 等，因在 Server 階段執行還沒建構出網站內容</p>
<p>asyncData 的內容如跟 data 同名 ，asyncData 會覆蓋掉 data</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123;name&#125;&#125;  // Bobee</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">asyncData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;Bobee&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">&#x27;Lala&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如想修改 asyncData 裡面的值，由於 asyncData 只會執行一次，所以不能被其他 methods 給抓取，直接在 data 新增一樣的內容，再去做控制就可以改變了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;name = &#x27;Lala&#x27;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">asyncData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;Bobee&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>官方有提到，想確保 API 的資料已經回來，可使用 <code>async await</code> 的方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-for</span>=<span class="string">&quot;item in res&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.url&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item.url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">asyncData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(</span><br><span class="line">    <span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    res: res.data,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打開檢查原始碼將會發現，這些圖片都被 Server render 到畫面上來了</p>
<h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><p>nuxt 2.12+的新功能，fetch 跟 asyncData 一樣都是由 Server 端執行，並 render 到畫面上來，不過有以下幾點跟 asyncData 不太一樣<br>🔸 可在任何一個 component 執行<br>🔸 可取得 this，因在 created 之後<br>🔸 不行 return 資料到 template，只能透過覆寫的方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;name&#125;&#125; // 這邊會被覆寫為Bobee</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: <span class="string">&quot;Lala&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">fetch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;Bobee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p><strong>fetchOnServer</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fetchOnServer: <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<p>如果把 fetchOnServer 設定成 false，那這樣 fetch 就只會在 client 端被執行，在檢視原始碼裡面就不會找到 fetch 的資料</p>
<br/>

<p><strong>keep-alive</strong><br>可以把內容緩存起來，不用重複 render 造成效能問題，只有用 keep-alive 時才可以調用 activated 生命週期，每當重新進入頁面都會觸發 activated</p>
<br/>

<p><strong>Fetch 提供的參數</strong><br>$fetchState.pending ( true  |  false ) :  讓你在 client 端去判斷 API 載入完成沒有<br>$fetchState.error ( null | { } ) : 當發生畫面上的內容發生錯誤的時候，去判斷錯誤的部分<br>$fetchState.timestamp ( Integer ) : 顯示最後一次非同步處理的時間</p>
<p>範例:<br>layouts/default.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Nuxt</span> <span class="attr">keep-alive</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>pages/index.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;$fetchState.pending&quot;</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;$fetchState.error&quot;</span>&gt;</span>ERROR &#123;&#123;$fetchState.error&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-for</span>=<span class="string">&quot;item in res&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.url&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;item.url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      res: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  fetchOnServer: <span class="literal">false</span>,</span><br><span class="line">  <span class="function"><span class="title">activated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 判斷上次執行的 timestamp 跟現在的時間如相差超過 10 秒，將會重新執行 fetch</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.$fetchState.timestamp &lt;= <span class="built_in">Date</span>.now() - <span class="number">10000</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.$fetch();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">fetch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.res = <span class="keyword">await</span> axios.get(<span class="string">&#x27;https://vue-lessons-api.herokuapp.com/photo/list&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.data);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="生命週期執行順序"><a href="#生命週期執行順序" class="headerlink" title="生命週期執行順序"></a>生命週期執行順序</h1><p>將生命週期 console.log 出來</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">asyncData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;asyncData&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;beforeCreate&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;created&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;mounted&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">fetch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;fetch&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>順序為<br>asyncData → <code>beforeCreate</code> → <code>created</code> → fetch → <code>beforeCreate</code> → <code>created</code> → mounted<br>將會發現 beforeCreate、created 會被執行兩次，原因是 Server 端和 Client 端都會有 beforeCreate、created，所以需要再做一些判斷或處理，不然有可能重複的東西會被執行兩次。</p>
]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>asyncData</tag>
        <tag>fetch</tag>
        <tag>keep-alive</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Nuxt 設定 loading 效果</title>
    <url>/2021/09/13/vue-nuxt-loading/</url>
    <content><![CDATA[<p><img src="https://imgur.com/MUS8ao2.jpg" alt="Imgur"></p>
<h1 id="loading-開關"><a href="#loading-開關" class="headerlink" title="loading 開關"></a>loading 開關</h1><p>預設 loading 開關為 true，如想關閉 loading 可在 nuxt.config.js 設定</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  loading: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="修改-loading-樣式"><a href="#修改-loading-樣式" class="headerlink" title="修改 loading 樣式"></a>修改 loading 樣式</h1><p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  loading: &#123;</span><br><span class="line">    color: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    height: <span class="string">&#x27;5px&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="客製-loading"><a href="#客製-loading" class="headerlink" title="客製 loading"></a>客製 loading</h1><p>在 components 目錄新增一個 loading.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">&quot;html&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-page&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;loading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    loading: <span class="literal">false</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">finish</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.loading-page</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 nuxt.config.js 設定 loading 的組件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  loading: <span class="string">&#x27;~/components/loading.vue&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="點擊開關-loading"><a href="#點擊開關-loading" class="headerlink" title="點擊開關 loading"></a>點擊開關 loading</h1><p>可以從 this.$nuxt 的物件，去抓 $loading，$loading 就是 components/loading.vue 的組件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;openLoading&quot;</span>&gt;</span>loading<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">openLoading</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$nuxt.$loading.start(); <span class="comment">// 啟動 loading</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$nuxt.$loading.finish(); <span class="comment">// 關閉 loading</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>loading</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Nuxt 重新包裝 cookie 與 localStorage 等方法</title>
    <url>/2021/10/12/vue-nuxt-localStorage/</url>
    <content><![CDATA[<p><img src="https://imgur.com/mRrJH3R.jpg" alt="Imgur"></p>
<p>在開發網頁時，或多或少會用到 localStorage 的方法去存取資料，在取得物件時，需做一些 JSON 的轉換，便能將資料取出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;data&#x27;</span>, <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">name</span>: <span class="string">&#x27;bobee&#x27;</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;data&#x27;</span>)));</span><br></pre></td></tr></table></figure>
<p>但每次都要這樣轉換其實有點麻煩，如果有很多地方都要使用這個方法，就必須寫一堆 JSON.stringify、JSON.parse，為了更方便使用，可以將方法包裝，供全站使用。</p>
<a id="more"></a>

<h1 id="包裝-localStorage"><a href="#包裝-localStorage" class="headerlink" title="包裝 localStorage"></a>包裝 localStorage</h1><h2 id="新增-localStorage-js，自行注入-localStorage-方法"><a href="#新增-localStorage-js，自行注入-localStorage-方法" class="headerlink" title="新增 localStorage.js，自行注入 localStorage 方法"></a>新增 localStorage.js，自行注入 localStorage 方法</h2><p>plugins/localStorage.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app &#125;, inject) =&gt; &#123;</span><br><span class="line">  inject(<span class="string">&#x27;localStorage&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 設定 key</span></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">key = <span class="string">&#x27;&#x27;</span>, val = &#123;&#125;</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">localStorage</span>.setItem(key, <span class="built_in">JSON</span>.stringify(val));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取得 key</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">key = <span class="string">&#x27;&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> obj = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(key));</span><br><span class="line">      <span class="comment">// 如果 obj 沒有東西，回傳空物件，此寫法在程式上會比較好判斷，也可減少錯誤發生</span></span><br><span class="line">      <span class="keyword">if</span> (!obj) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 移除 key</span></span><br><span class="line">    <span class="function"><span class="title">remove</span>(<span class="params">key = <span class="string">&#x27;&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">localStorage</span>.removeItem(key);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 移除所有 key</span></span><br><span class="line">    <span class="function"><span class="title">removeAll</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">localStorage</span>.clear();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>別忘了 nuxt.config.js 也要加上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [<span class="string">&quot;~/plugins/localStorage.js&quot;</span>],</span><br></pre></td></tr></table></figure>
<br>

<h2 id="調用-localStorage"><a href="#調用-localStorage" class="headerlink" title="調用 $localStorage"></a>調用 $localStorage</h2><p>inject localStorage 的方法後，就可以在全站隨心所欲的使用 this.$localStorage 了!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$localStorage.set(<span class="string">&quot;data&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;bobee&quot;</span> &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$localStorage.get(<span class="string">&quot;data&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="包裝-cookies"><a href="#包裝-cookies" class="headerlink" title="包裝 cookies"></a>包裝 cookies</h1><p>cookie 也是同包裝 localStorage 的作法，而 cookie 可以使用 <a href="https://github.com/js-cookie/js-cookie">Js-cookie</a> 套件更方便操作</p>
<h2 id="安裝-Js-cookie"><a href="#安裝-Js-cookie" class="headerlink" title="安裝 Js-cookie"></a>安裝 Js-cookie</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i js-cookie -S</span><br></pre></td></tr></table></figure>
<br>

<h2 id="新增-cookie-js，自行注入-cookies-方法"><a href="#新增-cookie-js，自行注入-cookies-方法" class="headerlink" title="新增 cookie.js，自行注入 cookies 方法"></a>新增 cookie.js，自行注入 cookies 方法</h2><p>plugins/cookie.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app &#125;, inject) =&gt; &#123;</span><br><span class="line">  inject(<span class="string">&#x27;cookies&#x27;</span>, &#123;</span><br><span class="line">    set: <span class="function">(<span class="params">name, value = &#123;&#125;, expires = &#123; expires: <span class="number">365</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      Cookies.set(name, value, expires);</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> val = Cookies.get(name);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(val);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      Cookies.remove(name);</span><br><span class="line">    &#125;,</span><br><span class="line">    removeAll: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> NodeList = <span class="built_in">Object</span>.keys(Cookies.get());</span><br><span class="line">      NodeList.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> Cookies.remove(el));</span><br><span class="line">      <span class="built_in">window</span>.location.replace(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [<span class="string">&quot;~/plugins/cookie.js&quot;</span>],</span><br></pre></td></tr></table></figure>
<br>

<h2 id="調用-cookies"><a href="#調用-cookies" class="headerlink" title="調用 $cookies"></a>調用 $cookies</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$cookies.set(<span class="string">&quot;bobee&quot;</span>, &#123; <span class="attr">age</span>: <span class="number">11</span> &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$cookies.get(<span class="string">&quot;bobee&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="筆記來源-2021-Vue3-專業職人-進階篇"><a href="#筆記來源-2021-Vue3-專業職人-進階篇" class="headerlink" title="筆記來源: 2021 Vue3 專業職人 | 進階篇"></a>筆記來源: 2021 Vue3 專業職人 | 進階篇</h3>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>cookie</tag>
        <tag>localStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Nuxt 使用 Plugins</title>
    <url>/2021/10/11/vue-nuxt-plugins/</url>
    <content><![CDATA[<p><img src="https://imgur.com/ig2CVFl.jpg" alt="Plugins"><br>我們常常會使用到套件，幫助網站快速達到想要的效果，在 NUXT 要怎麼自行撰寫套件、如何整合現有的套件、或是整合第三方套件呢?</p>
<a id="more"></a>

<h1 id="自己撰寫的-Plugins"><a href="#自己撰寫的-Plugins" class="headerlink" title="自己撰寫的 Plugins"></a>自己撰寫的 Plugins</h1><p>自己撰寫 Plugins 起手式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app &#125;, inject) =&gt; &#123;</span><br><span class="line">  inject(<span class="string">&#x27;EventName&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 想做的事情</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>inject 會把你所寫的東西，注入到整個環境，<br>EventName 是自定義的方法名稱，可以在頁面呼叫<code>this.$EventName</code>使用。</p>
<h2 id="1-在-plugins-資料夾新增自定義的-js"><a href="#1-在-plugins-資料夾新增自定義的-js" class="headerlink" title="1.在 plugins 資料夾新增自定義的 js"></a>1.在 plugins 資料夾新增自定義的 js</h2><p>/plugins/demo.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app &#125;, inject) =&gt; &#123;</span><br><span class="line">  inject(<span class="string">&#x27;EventName&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">log</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;EventName=&gt;&#x27;</span>, val);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="2-載入-demo-js"><a href="#2-載入-demo-js" class="headerlink" title="2.載入 demo.js"></a>2.載入 demo.js</h2><p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [<span class="string">&#x27;~/plugins/demo.js&#x27;</span>];</span><br></pre></td></tr></table></figure>
<br>

<h2 id="3-調用自定義的方法"><a href="#3-調用自定義的方法" class="headerlink" title="3.調用自定義的方法"></a>3.調用自定義的方法</h2><p>index.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SSR 沒有 this，直接調用 $EventName</span></span><br><span class="line"><span class="function"><span class="title">asyncData</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">  context.$EventName.log(<span class="string">&quot;asyncData&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSR 沒有 this，直接調用 $EventName</span></span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$EventName.log(<span class="string">&quot;mounted&quot;</span>));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<br>

<h1 id="整合現有的-Nuxt-Plugins"><a href="#整合現有的-Nuxt-Plugins" class="headerlink" title="整合現有的 Nuxt Plugins"></a>整合現有的 Nuxt Plugins</h1><p>以 <a href="https://axios.nuxtjs.org/">axios</a> 做為範例</p>
<h2 id="1-安裝-nuxt-axios"><a href="#1-安裝-nuxt-axios" class="headerlink" title="1.安裝 nuxt axios"></a>1.安裝 nuxt axios</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @nuxtjs/axios</span><br></pre></td></tr></table></figure>
<br>

<h2 id="2-設定-modules"><a href="#2-設定-modules" class="headerlink" title="2.設定 modules"></a>2.設定 modules</h2><p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">modules: [<span class="string">&quot;@nuxtjs/axios&quot;</span>],</span><br></pre></td></tr></table></figure>
<p>設定 modules 後，就可以用 context.$axios 去做操作了，<br>也可使用解構的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">asyncData</span>(<span class="params">&#123; $axios &#125;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> $axios.get(</span><br><span class="line">    <span class="string">&quot;https://vue-lessons-api.herokuapp.com/photo/list&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<br>

<h2 id="3-封裝-axios-的錯誤處理"><a href="#3-封裝-axios-的錯誤處理" class="headerlink" title="3.封裝 axios 的錯誤處理"></a>3.封裝 axios 的錯誤處理</h2><p>在 plugins 新增 axios.js，用來處理 onError</p>
<p>plugins/axios.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">&#123; $axios, redirect &#125;</span>) </span>&#123;</span><br><span class="line">  $axios.onError(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//axios 如發生錯誤，onError 可依內容去做後續處理</span></span><br><span class="line">    <span class="keyword">if</span> (error.response.status === <span class="number">500</span>) &#123;</span><br><span class="line">      redirect(<span class="string">&#x27;/sorry&#x27;</span>); <span class="comment">// 跳轉頁面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (error.response.status === <span class="number">404</span>) &#123;</span><br><span class="line">      redirect(<span class="string">&#x27;/404&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>並在 nuxt.config.js 新增 plugins</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [<span class="string">&quot;~/plugins/axios.js&quot;</span>],</span><br></pre></td></tr></table></figure>
<p>這麼一來整個 global 都可以使用到這個 axios 的錯誤處理</p>
<br>

<h1 id="第三方套件整合-Nuxt"><a href="#第三方套件整合-Nuxt" class="headerlink" title="第三方套件整合 Nuxt"></a>第三方套件整合 Nuxt</h1><p>通常使用 Nuxt 製作時，會找可以直接在 Nuxt 使用的套件，如果想使用的套件不是 Nuxt 專用，我們需要將一般的 VUE 套件，包裝成 NUXT 再做使用，需注意套件有沒有支援 SSR</p>
<p>以 Vue.js <a href="https://github.com/euvl/vue-notification#readme">notifications</a> 套件做為範例，是一個彈出通知訊息的套件</p>
<h2 id="1-安裝-notifications"><a href="#1-安裝-notifications" class="headerlink" title="1.安裝 notifications"></a>1.安裝 notifications</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save vue-notification</span><br></pre></td></tr></table></figure>
<p>先將 notifications 安裝起來</p>
<br>

<h2 id="2-新增-notifications-js-並引用"><a href="#2-新增-notifications-js-並引用" class="headerlink" title="2.新增 notifications.js 並引用"></a>2.新增 notifications.js 並引用</h2><p>在 plugins 新增 notification.js<br>notification.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">// import Notifications from &#x27;vue-notification&#x27; 此為 CSR 使用</span></span><br><span class="line"><span class="keyword">import</span> Notifications <span class="keyword">from</span> <span class="string">&#x27;vue-notification/dist/ssr.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Notifications);</span><br></pre></td></tr></table></figure>
<p>本來在 CSR 時是放在 main.js 的引入，NUXT 是放在 notification.js，使用 SSR 的方式引入</p>
<p>在 nuxt.config.js 新增 plugins</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="string">&quot;~/plugins/notification.js&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<br>

<h2 id="3-使用套件方法"><a href="#3-使用套件方法" class="headerlink" title="3.使用套件方法"></a>3.使用套件方法</h2><p>由於此套件屬於全站皆可使用的，所以放在 layouts，訊息 position 可以依需求調整</p>
<p>layouts/default.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">notifications</span> <span class="attr">position</span>=<span class="string">&quot;bottom right&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>pages/index.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showNotice&quot;</span>&gt;</span>CLICK<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">showNotice</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// using options</span></span><br><span class="line">    <span class="built_in">this</span>.$notify(&#123;</span><br><span class="line">      title: <span class="string">&quot;Important message&quot;</span>,</span><br><span class="line">      text: <span class="string">&quot;Hello user!&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<br>

<h2 id="4-匯入-CSS"><a href="#4-匯入-CSS" class="headerlink" title="4.匯入 CSS"></a>4.匯入 CSS</h2><p>NUXT 套件整合，可能會遇到吃不到 CSS 的情況，需自行匯入 CSS<br>在 assets 新增 notifications.css，並全域匯入</p>
<p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">css: [<span class="string">&#x27;~/assets/notifications.css&#x27;</span>];</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="筆記來源-2021-Vue3-專業職人-進階篇"><a href="#筆記來源-2021-Vue3-專業職人-進階篇" class="headerlink" title="筆記來源: 2021 Vue3 專業職人 | 進階篇"></a>筆記來源: 2021 Vue3 專業職人 | 進階篇</h3>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>plugins</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt 自動化 Router 配置</title>
    <url>/2021/09/12/vue-nuxt-router/</url>
    <content><![CDATA[<p><img src="https://imgur.com/kyou2GQ.jpg" alt="Imgur"></p>
<p>Nuxt 設置路由非常方便，只要新增好 component 就會自動設定好頁面</p>
<h1 id="Router-更換頁面的進入點"><a href="#Router-更換頁面的進入點" class="headerlink" title="Router 更換頁面的進入點"></a>Router 更換頁面的進入點</h1><p>在 layouts 可以放進每頁共用的部分，與一個隨著 pages 變化內容的進入點，相當於在 Vue Cli 的 router-view ，在 Nuxt 的進入點用 Nuxt</p>
<a id="more"></a>

<p>layouts/default.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Nuxt</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="嵌套-router-所更換頁面的進入點"><a href="#嵌套-router-所更換頁面的進入點" class="headerlink" title="嵌套 router 所更換頁面的進入點"></a>嵌套 router 所更換頁面的進入點</h1><p>About 下面還有子路由，只要在 pages 新增 About 資料夾，再放進 component，就會自動生成底下的路由啦！</p>
<p><img src="https://imgur.com/w5m1vIX.jpg" alt="Imgur"></p>
<p>嵌套路由的進入點為 NuxtChild，而不是用原本的 router-view，這樣在識別的時候也會比較好識別這個組件是不是用嵌套網址<br>pages/About.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about/guide&quot;</span>&gt;</span>Guide<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about/reference&quot;</span>&gt;</span>API Reference<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about/changelog&quot;</span>&gt;</span>Changelog <span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about/gitHub&quot;</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtChild</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="Nuxt-切換頁面的超連結元件"><a href="#Nuxt-切換頁面的超連結元件" class="headerlink" title="Nuxt 切換頁面的超連結元件"></a>Nuxt 切換頁面的超連結元件</h1><p>在 Vue Cli 為 router-link，在 Nuxt 要寫 NuxtLink，用法跟 router-link 一模一樣，雖然在 Nuxt 裡 router-link 也可以執行，但以防萬一非預期的錯誤，在 Nuxt 還是用 NuxtLink 吧！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about page<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="動態-Router-配置"><a href="#動態-Router-配置" class="headerlink" title="動態 Router 配置"></a>動態 Router 配置</h1><p>在要設置動態路由的資料夾，新增一個名為<code>_id.vue</code> 的 component，id 為自定義的名字，主要前面要加底線</p>
<p><img src="https://imgur.com/HItJoSV.jpg" alt="Imgur"></p>
<p>asyncData 會回傳一個 context 物件，context.params.id 可取得動態路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">asyncData</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(context.params.id);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      id: context.params.id,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt 的 SEO 設定</title>
    <url>/2021/09/12/vue-nuxt-seo/</url>
    <content><![CDATA[<p><img src="https://imgur.com/s07cfNA.jpg" alt="Imgur"></p>
<p>做好 SEO，可以增強網站的自然搜尋排名，不同的頁面通常會有不同的 title、關鍵字，Nuxt 可以幫我們做到這件事。</p>
<h1 id="Global-Settings"><a href="#Global-Settings" class="headerlink" title="Global Settings"></a>Global Settings</h1><p>設定整個網站的 SEO，在這裡你可以定義所有的 meta</p>
<a id="more"></a>

<p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">head: &#123;</span><br><span class="line">  title: <span class="string">&quot;一文前端大小事&quot;</span>,</span><br><span class="line">  htmlAttrs: &#123;</span><br><span class="line">    lang: <span class="string">&quot;en&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  meta: [</span><br><span class="line">    &#123; <span class="attr">charset</span>: <span class="string">&quot;utf-8&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;viewport&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;width=device-width, initial-scale=1&quot;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      hid: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">      name: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">      content: <span class="string">&quot;一起鑽研前端技術吧^^&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;format-detection&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;telephone=no&quot;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  link: [&#123; <span class="attr">rel</span>: <span class="string">&quot;icon&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;image/x-icon&quot;</span>, <span class="attr">href</span>: <span class="string">&quot;/favicon.ico&quot;</span> &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h1 id="Local-Settings"><a href="#Local-Settings" class="headerlink" title="Local Settings"></a>Local Settings</h1><p>要設定每頁的 SEO 也很簡單，只要把 head 搬去要設定的頁面就可以了<br>pages/about.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  head: &#123;</span><br><span class="line">    title: <span class="string">&#x27;關於我們&#x27;</span>,</span><br><span class="line">    htmlAttrs: &#123;</span><br><span class="line">      lang: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    meta: [</span><br><span class="line">      &#123; <span class="attr">charset</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;viewport&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;width=device-width, initial-scale=1&#x27;</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        hid: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        content: <span class="string">&#x27;關於我們的頁面&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;format-detection&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;telephone=no&#x27;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    link: [&#123; <span class="attr">rel</span>: <span class="string">&#x27;icon&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;image/x-icon&#x27;</span>, <span class="attr">href</span>: <span class="string">&#x27;/favicon.ico&#x27;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>
如果要利用 data 的資料，改變 head 的內容，可以把 head 變成函式的方式 return

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    title: <span class="string">&quot;data的關於我們&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">head</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    title: <span class="built_in">this</span>.title,</span><br><span class="line">    htmlAttrs: &#123;</span><br><span class="line">      lang: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    meta: [</span><br><span class="line">      &#123; <span class="attr">charset</span>: <span class="string">&quot;utf-8&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;viewport&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;width=device-width, initial-scale=1&quot;</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        hid: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">        content: <span class="string">&quot;關於我們的頁面&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;format-detection&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;telephone=no&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    link: [&#123; <span class="attr">rel</span>: <span class="string">&quot;icon&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;image/x-icon&quot;</span>, <span class="attr">href</span>: <span class="string">&quot;/favicon.ico&quot;</span> &#125;],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h1 id="SSR-設定"><a href="#SSR-設定" class="headerlink" title="SSR 設定"></a>SSR 設定</h1><p>Nuxt 的 SSR 預設是開啟，實際上 Nuxt 也可以開發 SPA 模式，打包時就只會輸出 Client 端的部分</p>
<p>nuxt.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ssr: <span class="literal">false</span>, <span class="comment">// 關閉 SSR，使用 SPA 開發模式</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Nuxt 管理 vuex 狀態</title>
    <url>/2021/10/16/vue-nuxt-vuex/</url>
    <content><![CDATA[<p><img src="https://imgur.com/mRrJH3R.jpg" alt="Imgur"></p>
<p>要在 Nuxt 使用 vuex ，直接在 store 新增 index.js，並用函式的方式回傳 state，加入 actions、mutations、getters，即可直接使用。</p>
<a id="more"></a>

<h1 id="Nuxt-操作-vuex"><a href="#Nuxt-操作-vuex" class="headerlink" title="Nuxt 操作 vuex"></a>Nuxt 操作 vuex</h1><p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  idx: <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">handAddCount</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&#x27;addCount&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="function"><span class="title">addCount</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    state.idx++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="function"><span class="title">getIdx</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`count: <span class="subst">$&#123;state.idx&#125;</span>`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>

<p>index.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clickBtn&quot;</span>&gt;</span>ADD<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">clickBtn</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;handAddCount&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">count</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.getIdx;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="asyncData-取得-store-資料"><a href="#asyncData-取得-store-資料" class="headerlink" title="asyncData 取得 store 資料"></a>asyncData 取得 store 資料</h1><p>想在 asyncData 取得 store，可從 context 去抓取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; asyncCount &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">asyncData</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">asyncCount</span>: context.app.store.state.idx &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="拆分-module"><a href="#拆分-module" class="headerlink" title="拆分 module"></a>拆分 module</h1><h2 id="寫在同一支的-module"><a href="#寫在同一支的-module" class="headerlink" title="寫在同一支的 module"></a>寫在同一支的 module</h2><p>在 store 新增 User 資料夾，等於直接創建了一個 User 的 module</p>
<p>store/User/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  name: <span class="string">&#x27;bobee&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">log</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getters = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>直接 this.$store.state.User 就可以取得到 User 裡的資料</p>
<p>index.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$store.state.User.name);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;User/log&quot;</span>));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<br>

<h2 id="拆分四支檔案的-module"><a href="#拆分四支檔案的-module" class="headerlink" title="拆分四支檔案的 module"></a>拆分四支檔案的 module</h2><p>也可以把 state、actions、mutations、getters 拆分成四支檔案，取得資料的方法也是同樣的</p>
<p>store/User/state.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (&#123;</span><br><span class="line">  title: <span class="string">&#x27;nuxt&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>store/User/actions.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>store/User/mutations.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>store/User/getters.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="Plugins-注入-Vuex"><a href="#Plugins-注入-Vuex" class="headerlink" title="Plugins 注入 Vuex"></a>Plugins 注入 Vuex</h1><p>已載入全域的 plugins，只有在 nuxt 上可以使用，vuex 上沒辦法調用，<br>所以需要將套件的方法注入到 Vuex 裡面，假如我們已經在專案上安裝好了 vue-notification 套件，在layout的地方注入方法</p>
<p>layout/defalut.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$store.$notify = <span class="built_in">this</span>.$notify</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這麼一來，就可以在 store 使用 this.$notify 了!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">handAddCount</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">    commit(<span class="string">&quot;AddCount&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">handApiData</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> apiGetPhotoData();</span><br><span class="line">      commit(<span class="string">&quot;AddCount&quot;</span>, &#123; <span class="attr">data</span>: res.data &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 錯誤處理</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;錯誤處理:&quot;</span>, error);</span><br><span class="line">      <span class="built_in">this</span>.$notify(&#123;</span><br><span class="line">        group: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">        title: <span class="string">&quot;API資料錯誤&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">        text: error</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="筆記來源-2021-Vue3-專業職人-進階篇"><a href="#筆記來源-2021-Vue3-專業職人-進階篇" class="headerlink" title="筆記來源: 2021 Vue3 專業職人 | 進階篇"></a>筆記來源: 2021 Vue3 專業職人 | 進階篇</h3>]]></content>
      <categories>
        <category>Vue-Nuxt</category>
      </categories>
      <tags>
        <tag>Nuxt</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Router 網址路由設定、History modes</title>
    <url>/2021/03/14/vue-router/</url>
    <content><![CDATA[<h1 id="單頁式應用"><a href="#單頁式應用" class="headerlink" title="單頁式應用"></a>單頁式應用</h1><p>single-page application，縮寫 SPA<br>透過 JS 動態渲染當前頁面來與使用者互動，而非傳統的從伺服器重新載入整個新頁面。這種方法避免了頁面之間切換打斷用戶體驗，使應用程式更像一個桌面應用程式。</p>
<h1 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h1><p>將會改變的區塊使用 router-view 顯示</p>
<a id="more"></a>

<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="設定路由"><a href="#設定路由" class="headerlink" title="設定路由"></a>設定路由</h1><p>將 Home、404 頁面直接一進入就 import，其他頁面使用動態 import 組件，點擊該頁面時，才會載入組件。<br>動態 import 組件 build 時每個頁面會是一支獨立的 JS。<br>如全部頁面直接一進入就 import，頁面一多時會影響效能; 但如果是小專案，頁面很少時，可以直接全部 import，減少 request 的數量。<br>大網站 =&gt; 動態載入，不吃效能<br>小網站 =&gt; 直接載入，減少 request 數量</p>
<p>router index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>; <span class="comment">// 直接 import</span></span><br><span class="line"><span class="keyword">import</span> NotFoundComponent <span class="keyword">from</span> <span class="string">&quot;../views/NotFoundComponent.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/rwd&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;rwd&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Rwd.vue&quot;</span>), <span class="comment">// 動態 import</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/vuejs&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;vuejs&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Vuejs.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/reactjs&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;reactjs&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Reactjs.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/html5&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;html5&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Html5.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/nodejs&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;nodejs&quot;</span>,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Nodejs.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/:pathMatch(.*)&quot;</span>, <span class="attr">component</span>: NotFoundComponent &#125;, <span class="comment">// 需放最下面，上面的path都沒有時即顯示此頁面</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>
<h2 id="router-例外處理-404"><a href="#router-例外處理-404" class="headerlink" title="router 例外處理(404)"></a>router 例外處理(404)</h2><p>{ path: “/:pathMatch(.*)”, component: NotFoundComponent }<br>404 頁面的 path 需放最下面，載入時會從上到下開始跑，上面的 path 都沒有 Match 時即會顯示此頁面<br></p>
<h2 id="History-modes"><a href="#History-modes" class="headerlink" title="History modes"></a>History modes</h2><p><b>createWebHashHistory()</b><br>會透過 # 字號來當作網址切換的操作，但是會跟錨點相撞，對 SEO 有不利的影響<br><br><b>createWebHistory()</b><br>需要跟後端搭配重新配置根目錄下的 router，還要自己配置例外處理的頁面例如 404 等</p>
<br>

<h1 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h1><p>設定 router-link 指向連結頁面</p>
<p>header.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rwd&quot;</span>&gt;</span>RWD<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/vuejs&quot;</span>&gt;</span>VUEJS<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/reactjs&quot;</span>&gt;</span>REACTJS<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/html5&quot;</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/nodejs&quot;</span>&gt;</span>NODEJS<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 setup、CSS新寫法</title>
    <url>/2021/03/21/vue-other-issues/</url>
    <content><![CDATA[<p>Vue3 還有很多新功能官方正在進行中，目前有幾個差不多定案的新功能</p>
<a id="more"></a>

<h1 id="Script-Setup"><a href="#Script-Setup" class="headerlink" title="Script Setup"></a>Script Setup</h1><p><b>原本寫法</b></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = ref(<span class="string">&quot;Bobee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<p><b>新寫法</b><br>直接將 Setup 寫在 script 上，不用 export、return<br>如果沒有在 template 寫變數，就自動不會 return 出來</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref&#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">const name = ref(<span class="string">&quot;Bobee&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>

<h1 id="變數綁定-CSS"><a href="#變數綁定-CSS" class="headerlink" title="變數綁定 CSS"></a>變數綁定 CSS</h1><p>用 v-bind 綁定 JS 變數，可以直接變換屬性的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">const name = ref(<span class="string">&quot;Bobee&quot;</span>);</span><br><span class="line">const colorBlue = ref(<span class="string">&quot;#000FFF&quot;</span>);</span><br><span class="line">const changeColor = () =&gt; &#123;</span><br><span class="line">  colorBlue.value = <span class="string">&quot;#FF0000&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeColor&quot;</span>&gt;</span>changeColor<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">v-bind</span>(colorBlue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>Composition API</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 的 Slot 插槽</title>
    <url>/2021/03/14/vue-slot/</url>
    <content><![CDATA[<h1 id="Slot-插槽"><a href="#Slot-插槽" class="headerlink" title="Slot 插槽"></a>Slot 插槽</h1><p>在子元件上面開個洞， 由外層元件將內容置放在至子層元件指定的位置中<br>可解決樣式一樣，但內容不一樣的組件</p>
<a id="more"></a>

<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SlotsTitle <span class="keyword">from</span> <span class="string">&quot;@/components/SlotsTitle.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    SlotsTitle,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>將組件用 html 寫法有頭有尾包起來，並用 kebab-case(全小寫&amp;dashed)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slots-title</span>&gt;</span>Sunday<span class="tag">&lt;/<span class="name">slots-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slots-title</span>&gt;</span>Monday<span class="tag">&lt;/<span class="name">slots-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slots-title</span>&gt;</span>Tuesday<span class="tag">&lt;/<span class="name">slots-title</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SlotsTitle.vue<br>父層的內容將會插入<slot></slot>之中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../assets/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>Slot</tag>
      </tags>
  </entry>
  <entry>
    <title>透過ref綁定，取得DOM元素</title>
    <url>/2021/03/14/vue-template-refs/</url>
    <content><![CDATA[<h1 id="透過-ref-綁定，取得-DOM-元素"><a href="#透過-ref-綁定，取得-DOM-元素" class="headerlink" title="透過 ref 綁定，取得 DOM 元素"></a>透過 ref 綁定，取得 DOM 元素</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> inputText = ref(<span class="literal">null</span>); <span class="comment">// 變數需跟綁定的ref一樣名稱</span></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      inputText.value.focus(); <span class="comment">// 回傳後即可使用inputText</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      inputText, <span class="comment">// 回傳inputText</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;inputText&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span> // 綁定ref</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>ref</tag>
      </tags>
  </entry>
  <entry>
    <title>vee-validate 4.0 教學，表單驗證套件應用</title>
    <url>/2022/03/29/vue-vee-validate/</url>
    <content><![CDATA[<p><img src="https://imgur.com/0WQXAft.png" alt="vee-validate"></p>
<p>填寫表單時，需要驗證是否必填(require)、或是格式是否正確，自己手刻很複雜，可能也會不夠全面，用套件來做驗證是最省事又快速的。在 Vue2 框架時，我偏好使用 vee-validate 來做驗證，因為它簡單又好用，但到了 Vue3，veeValidate4 怎麼好像是另一個世界惹😱，vee-validate4 該怎麼使用呢</p>
<a id="more"></a>

<h1 id="安裝-vee-validate"><a href="#安裝-vee-validate" class="headerlink" title="安裝 vee-validate"></a>安裝 vee-validate</h1><p>首先先安裝 vee-validate</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add vee-validate</span><br><span class="line"># or</span><br><span class="line">npm i vee-validate --save</span><br></pre></td></tr></table></figure>
<br/>

<p>另外 yup 也是個簡單卻強大的驗證 library，vee-validate 可以結合 yup 一起使用</p>
<p>安裝 yup</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add yup</span><br><span class="line"># or</span><br><span class="line">npm i yup --save</span><br></pre></td></tr></table></figure>
<br/>

<h1 id="使用-vee-validate"><a href="#使用-vee-validate" class="headerlink" title="使用 vee-validate"></a>使用 vee-validate</h1><p>vee-validate 提供了兩種方法，可以使用 components 或是 composition API<br>components: 適合簡單的 UI 組件和具有自定義樣式的原生 HTML 元素，使用 Field、Form 和 ErrorMessage<br>composition API: 適合構建複雜的 UI 表單組件和通用數據驗證，使用 useField、useForm<br>這兩種方式都可以混合使用</p>
<p>我這邊使用的是 composition API + yup 來做驗證</p>
<br/>

<hr>
<p>製作需求:<br>1.取得 API 資料後，會自動把資料帶入到表單<br>2.表單驗證<br>3.取得表單值</p>
<hr>
<h2 id="引入驗證-js、input-元件"><a href="#引入驗證-js、input-元件" class="headerlink" title="引入驗證 js、input 元件"></a>引入驗證 js、input 元件</h2><p>在 main.js 引入全局 (global) 驗證、表單 component input，如果表單只有一頁，可以直接引用在表單頁面<br>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入全局驗證、表單 component input</span></span><br><span class="line"><span class="keyword">import</span> &#123; schema &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/validate.js&#x27;</span>;</span><br><span class="line">app.provide(<span class="string">&#x27;schema&#x27;</span>, schema);</span><br><span class="line"><span class="keyword">import</span> FormInput <span class="keyword">from</span> <span class="string">&#x27;@/components/FormInput.vue&#x27;</span>;</span><br><span class="line">app.component(<span class="string">&#x27;FormInput&#x27;</span>, FormInput);</span><br><span class="line"></span><br><span class="line">app.use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<br />

<h2 id="用-yup-處理驗證格式的-js"><a href="#用-yup-處理驗證格式的-js" class="headerlink" title="用 yup 處理驗證格式的 js"></a>用 yup 處理驗證格式的 js</h2><p>.required 必填<br>.matches 客製驗證格式<br>.oneOf 確認 key 是否相同<br>.min 最少幾位數<br>.max 最多幾位數<br>.nullable 接受 key 為 null</p>
<p>utils/validate.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; object, string, ref, array &#125; <span class="keyword">from</span> <span class="string">&#x27;yup&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> required = <span class="string">&#x27;必填&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> phoneRegExp = <span class="regexp">/^((\\+[1-9]&#123;1,4&#125;[ \\-]*)|(\\([0-9]&#123;2,3&#125;\\)[ \\-]*)|([0-9]&#123;2,4&#125;)[ \\-]*)*?[0-9]&#123;3,4&#125;?[ \\-]*[0-9]&#123;3,4&#125;?$/</span>;</span><br><span class="line"><span class="keyword">const</span> passwordRegExp = <span class="regexp">/[a-zA-Z0-9]/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> schema = object().shape(&#123;</span><br><span class="line">  email: string().required(required).email(<span class="string">&#x27;E-mail輸入錯誤&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  password: string()</span><br><span class="line">    .required(required)</span><br><span class="line">    .min(<span class="number">8</span>, <span class="string">&#x27;密碼最少8位&#x27;</span>)</span><br><span class="line">    .max(<span class="number">20</span>, <span class="string">&#x27;密碼最多20位&#x27;</span>)</span><br><span class="line">    .matches(passwordRegExp, <span class="string">&#x27;請輸入不含符號的半形英文、數字&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  confirmPassword: string()</span><br><span class="line">    .oneOf([ref(<span class="string">&#x27;password&#x27;</span>)], <span class="string">&#x27;輸入密碼不相同&#x27;</span>)</span><br><span class="line">    .required(required),</span><br><span class="line"></span><br><span class="line">  phone: string().matches(phoneRegExp, <span class="string">&#x27;手機輸入錯誤&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  userName: string().nullable().required(required),</span><br><span class="line"></span><br><span class="line">  link: array().of(string().required(<span class="string">&#x27;請輸入標題&#x27;</span>)),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="建立-input-元件"><a href="#建立-input-元件" class="headerlink" title="建立 input 元件"></a>建立 input 元件</h2><p>設定從父層來的 props</p>
<p>components/FormInput.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;input</span><br><span class="line">    :id=&quot;id&quot;</span><br><span class="line">    v-model=&quot;inputValue&quot;</span><br><span class="line">    :name=&quot;name&quot;</span><br><span class="line">    :type=&quot;type&quot;</span><br><span class="line">    :placeholder=&quot;placeholder&quot;</span><br><span class="line">    :maxlength=&quot;maxlength&quot;</span><br><span class="line">    class=&quot;form-control&quot;</span><br><span class="line">    :class=&quot;&#123; &#x27;is-invalid&#x27;: errorMessage &#125;&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invalid-feedback&quot;</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>並設定 useField 的值 (value) 跟錯誤訊息 (errorMessage)，會由 name 來判定驗證格式是否正確，watch 是為了取得 API 資料後，會自動把資料帶入到表單，如沒有這個需求可以拿掉</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useField &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    id: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    type: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    modelValue: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    maxlength: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">Infinity</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; <span class="attr">value</span>: inputValue, errorMessage &#125; = useField(</span><br><span class="line">      props.name,</span><br><span class="line">      <span class="literal">undefined</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 設定預設值，如未設定值為 undefined</span></span><br><span class="line">        initialValue: props.modelValue,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得 API 資料後，會自動把資料帶入到表單</span></span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; props.modelValue,</span><br><span class="line">      val =&gt; &#123;</span><br><span class="line">        inputValue.value = val;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      inputValue,</span><br><span class="line">      errorMessage,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<br/>

<h2 id="表單頁面"><a href="#表單頁面" class="headerlink" title="表單頁面"></a>表單頁面</h2><p>插入 input component，設定好要傳入的 props</p>
<p>Form.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;FormInput</span><br><span class="line">        :id=&quot;&#x27;userName&#x27;&quot;</span><br><span class="line">        v-model=&quot;memberInfo.data.name&quot;</span><br><span class="line">        :name=&quot;&#x27;userName&#x27;&quot;</span><br><span class="line">        :type=&quot;&#x27;text&#x27;&quot;</span><br><span class="line">        :placeholder=&quot;&#x27;輸入&#x27;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密碼：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;FormInput</span><br><span class="line">        :id=&quot;&#x27;password&#x27;&quot;</span><br><span class="line">        v-model=&quot;password.password&quot;</span><br><span class="line">        :name=&quot;&#x27;password&#x27;&quot;</span><br><span class="line">        :type=&quot;&#x27;password&#x27;&quot;</span><br><span class="line">        :placeholder=&quot;&#x27;輸入&#x27;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;confirmPassword&quot;</span>&gt;</span>確認密碼：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;FormInput</span><br><span class="line">        :id=&quot;&#x27;confirmPassword&#x27;&quot;</span><br><span class="line">        v-model=&quot;password.confirmPassword&quot;</span><br><span class="line">        :name=&quot;&#x27;confirmPassword&#x27;&quot;</span><br><span class="line">        :type=&quot;&#x27;password&#x27;&quot;</span><br><span class="line">        :placeholder=&quot;&#x27;輸入&#x27;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>e-mail：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        &lt;FormInput</span><br><span class="line">        :id=&quot;&#x27;email&#x27;&quot;</span><br><span class="line">        v-model=&quot;memberInfo.data.email&quot;</span><br><span class="line">        :name=&quot;&#x27;email&#x27;&quot;</span><br><span class="line">        :type=&quot;&#x27;text&#x27;&quot;</span><br><span class="line">        :placeholder=&quot;&#x27;輸入&#x27;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, idx) in fields&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.url&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">:for</span>=<span class="string">&quot;`link$&#123;idx&#125;`&quot;</span>&gt;</span>link&#123;&#123;idx+1&#125;&#125;：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          &lt;FormInput</span><br><span class="line">          :id=&quot;`link[$&#123;idx&#125;]`&quot;</span><br><span class="line">          :name=&quot;`link[$&#123;idx&#125;].url`&quot;</span><br><span class="line">          :type=&quot;&#x27;text&#x27;&quot;</span><br><span class="line">          :placeholder=&quot;&#x27;輸入&#x27;&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;remove(idx)&quot;</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;push(&#123;url: &#x27;&#x27;&#125;)&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Form 表單取值：</span><br><span class="line">    &#123;&#123; values &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br/>

<p>設定 useForm、useFieldArray<br>useForm 是整個 Form 表單，設定驗證並取值，取到的值 submit 到後端，就資料完成送出啦！<br>useFieldArray 用來設定陣列的 input，可使用內建方法：移除 (remove)、取代 (replace)、新增資料 (push)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useForm, useFieldArray &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> schema = inject(<span class="string">&#x27;schema&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整個 Form 表單</span></span><br><span class="line">    <span class="keyword">const</span> &#123; values &#125; = useForm(&#123;</span><br><span class="line">      validationSchema: schema,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 設定多筆資料的陣列、陣列方法</span></span><br><span class="line">    <span class="keyword">const</span> &#123; replace, remove, push, fields &#125; = useFieldArray(<span class="string">&#x27;link&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> password = reactive(&#123;</span><br><span class="line">      password: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      confirmPassword: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得 API 的資料</span></span><br><span class="line">    <span class="keyword">const</span> publicPath = process.env.BASE_URL;</span><br><span class="line">    <span class="keyword">const</span> getMemberInfo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> axios.get(<span class="string">`<span class="subst">$&#123;publicPath&#125;</span>data/info.json`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> memberInfo = reactive(&#123;</span><br><span class="line">      data: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    getMemberInfo().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      memberInfo.data = res.data;</span><br><span class="line">      <span class="comment">// 取得資料後，將空陣列資料取代為取得後的資料</span></span><br><span class="line">      replace(memberInfo.data.link);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      password,</span><br><span class="line">      memberInfo,</span><br><span class="line">      values,</span><br><span class="line">      remove, push, fields</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.form-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br/>

<p>資料格式<br>data/info.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bobee&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;lala9990929@gmail.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;link&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://happy9990929.github.io&quot;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://happy9990929.github.io/gtplay&quot;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- 文章內廣告 -->
<p><ins class="adsbygoogle"
     style="display:block; text-align:center; margin: 100px auto"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-3584202217117217"
     data-ad-slot="5051618728"></ins></p>
<h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>vee-validate4.0 跟之前的版本差異真的很大，我也是研究了一陣子，如果有哪邊有問題或是有更好的寫法，歡迎路過的大大指正噢🧐<br>👉 附上我的 <a href="https://github.com/happy9990929/vee-validate4">vee-validate4 範例</a><br>最後用可愛的 bobee 做結尾吧！<br><br/><br><img src="https://imgur.com/wXW0AKf.jpg" alt="bobee"></p>
<hr>
<h1 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h1><p><a href="https://vee-validate.logaretm.com/v4/guide/overview">vee-validate 官方</a></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>vee-validate4</tag>
        <tag>veeValidate4 教學</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex &amp; API 資料流整合</title>
    <url>/2021/03/21/vue-vuex-api-example/</url>
    <content><![CDATA[<h1 id="圖片切換範例"><a href="#圖片切換範例" class="headerlink" title="圖片切換範例"></a>圖片切換範例</h1><h2 id="API-抽離管理，清楚管理資料"><a href="#API-抽離管理，清楚管理資料" class="headerlink" title="API 抽離管理，清楚管理資料"></a>API 抽離管理，清楚管理資料</h2><p>axios create 的物件會變成 axios 的實體<br>axios interceptors 攔截器，可以做驗證檢查</p>
<a id="more"></a>

<p>@/api/photoRequest.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create的物件會變成axios的實體</span></span><br><span class="line"><span class="keyword">const</span> photoRequest = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">&quot;https://vue-lessons-api.herokuapp.com/&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios 攔截器，可以做驗證檢查</span></span><br><span class="line"><span class="comment">// 發出 request以前執行</span></span><br><span class="line">photoRequest.interceptors.request.use(</span><br><span class="line">  (config) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">throw</span> &#123; <span class="attr">response</span>: &#123; <span class="attr">data</span>: <span class="string">&quot;資料不得為空&quot;</span> &#125; &#125;;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接到 response 之前執行</span></span><br><span class="line">photoRequest.interceptors.response.use(</span><br><span class="line">  (response) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getPhotoRequest = <span class="function">() =&gt;</span> photoRequest.get(<span class="string">&quot;/photo/list&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="api-模組入口"><a href="#api-模組入口" class="headerlink" title="api 模組入口"></a>api 模組入口</h2><p>index.js 做各模組的分類，當成模組的入口，方便管理，components 只需引入 index.js</p>
<p>@/api/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getPhotoRequest &#125; <span class="keyword">from</span> <span class="string">&quot;./photoRequest.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiGetPhotoRequest = getPhotoRequest;</span><br></pre></td></tr></table></figure>
<h2 id="資料管理"><a href="#資料管理" class="headerlink" title="資料管理"></a>資料管理</h2><p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; apiGetPhotoRequest &#125; <span class="keyword">from</span> <span class="string">&quot;../api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    photoArr: [],</span><br><span class="line">    idx: <span class="number">0</span>,</span><br><span class="line">    isLoad: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="comment">// 為確保API資料拿回再進行handImgLoad()，需回傳Promise，axios本身就是一個Promise的回傳</span></span><br><span class="line">    <span class="comment">// async / await 接近同步呼叫</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">handInit</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> apiGetPhotoRequest();</span><br><span class="line">        commit(<span class="string">&quot;init&quot;</span>, res.data);</span><br><span class="line">        <span class="keyword">return</span> res.data;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error.response.data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 上面async等於</span></span><br><span class="line">    <span class="comment">// handInit(&#123; commit &#125;) &#123;</span></span><br><span class="line">    <span class="comment">//   const res = apiGetPhotoRequest();</span></span><br><span class="line">    <span class="comment">//   return res.then((response) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     commit(&quot;init&quot;, response.data);</span></span><br><span class="line">    <span class="comment">//     return response.data;</span></span><br><span class="line">    <span class="comment">//   &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="function"><span class="title">handLoadState</span>(<span class="params">&#123; commit &#125;, bool</span>)</span> &#123;</span><br><span class="line">      commit(<span class="string">&quot;loadState&quot;</span>, bool);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">handAdd</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      commit(<span class="string">&quot;Add&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">handRemove</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      commit(<span class="string">&quot;Remove&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">init</span>(<span class="params">state, payload</span>)</span> &#123;</span><br><span class="line">      state.photoArr = payload;</span><br><span class="line">      <span class="built_in">console</span>.log(state.photoArr);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">loadState</span>(<span class="params">state, bool</span>)</span> &#123;</span><br><span class="line">      state.isLoad = bool;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">Add</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.idx++;</span><br><span class="line">      <span class="keyword">if</span> (state.idx &gt; state.photoArr.length - <span class="number">1</span>) &#123;</span><br><span class="line">        state.idx = <span class="number">0</span>; <span class="comment">// 大於總數量時返回第一張</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">Remove</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.idx--;</span><br><span class="line">      <span class="keyword">if</span> (state.idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        state.idx = state.photoArr.length - <span class="number">1</span>; <span class="comment">//小於0時返回最後一張</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="function"><span class="title">isLoad</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.isLoad;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">photoArr</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.photoArr;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">idx</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.idx;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="組件"><a href="#組件" class="headerlink" title="組件"></a>組件</h2><p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ImageBox <span class="keyword">from</span> <span class="string">&quot;./components/ImageBox/index.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> LoadingBar <span class="keyword">from</span> <span class="string">&quot;./components/LoadingBar.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    LoadingBar,</span><br><span class="line">    ImageBox,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handImgLoad = <span class="function">(<span class="params">imgArr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">      imgArr.forEach(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newImage = <span class="keyword">new</span> Image();</span><br><span class="line">        newImage.src = image.url;</span><br><span class="line">        newImage.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          i++;</span><br><span class="line">          store.dispatch(<span class="string">&quot;handLoadState&quot;</span>, i === imgArr.length);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> init = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(<span class="string">&quot;handInit&quot;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        handImgLoad(res); <span class="comment">// res為handInit回傳的資料</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      init();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">LoadingBar</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ImageBox</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>loading 組件<br>components/LoadingBar.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isLoad = computed(<span class="function">() =&gt;</span> store.getters.isLoad);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; isLoad &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-show</span>=<span class="string">&quot;!isLoad&quot;</span> <span class="attr">class</span>=<span class="string">&quot;load&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../assets/load.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>圖片組件<br>components/ImageBox/index.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ImgShow <span class="keyword">from</span> <span class="string">&quot;./ImgShow.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ChangeBtn <span class="keyword">from</span> <span class="string">&quot;./ChangeBtn.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ImgShow,</span><br><span class="line">    ChangeBtn,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isLoad = computed(<span class="function">() =&gt;</span> store.getters.isLoad);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; isLoad &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isLoad&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ImgShow</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChangeBtn</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>圖片切換按鈕<br>components/ImageBox/ChangeBtn.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> addImg = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(<span class="string">&quot;handAdd&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> removeImg = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(<span class="string">&quot;handRemove&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; addImg, removeImg &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btnbox&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;removeImg&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>上一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;addImg&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>下一張<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>圖片顯示組件<br>components/ImageBox/ImgShow.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> photoArr = computed(<span class="function">() =&gt;</span> store.getters.photoArr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> idx = computed(<span class="function">() =&gt;</span> store.getters.idx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; photoArr, idx &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &lt;img</span><br><span class="line">    class=&quot;img&quot;</span><br><span class="line">    v-for=&quot;(item, s) in photoArr&quot;</span><br><span class="line">    v-show=&quot;idx === s&quot;</span><br><span class="line">    :key=&quot;item.url&quot;</span><br><span class="line">    :src=&quot;item.url&quot;</span><br><span class="line">    alt=&quot;&quot;</span><br><span class="line">  /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex 資料流，設定Vuex與modules管理</title>
    <url>/2021/03/16/vue-vuex/</url>
    <content><![CDATA[<h1 id="什麼是-Vuex"><a href="#什麼是-Vuex" class="headerlink" title="什麼是 Vuex?"></a>什麼是 Vuex?</h1><p>Vuex 是 Vue 應用程式的狀態管理，組件常會跨結構的傳遞狀態、需要全域狀態的管理，用 Vuex 可以更容易的控管你的資料流。</p>
<a id="more"></a>

<p>沒有用Vuex<br><img src="https://i.imgur.com/yAFf3sQ.png" alt="Imgur"></p>
<p>使用Vuex<br><img src="https://i.imgur.com/Bogdlvu.png" alt="Imgur"></p>
<h1 id="Vuex-的前置作業"><a href="#Vuex-的前置作業" class="headerlink" title="Vuex 的前置作業"></a>Vuex 的前置作業</h1><p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state: &#123;&#125;,</span><br><span class="line">  actions: &#123;&#125;,</span><br><span class="line">  mutations: &#123;&#125;,</span><br><span class="line">  modules: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App)</span><br><span class="line">  .use(store) <span class="comment">// 使用store</span></span><br><span class="line">  .mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="State-Getters-Mutations-Actions"><a href="#State-Getters-Mutations-Actions" class="headerlink" title="State Getters Mutations Actions"></a>State Getters Mutations Actions</h1><p>State:<br>🔸 存放資料狀態</p>
<p>Getters:<br>🔸 取得狀態，類似 computed 重組資料<br>🔸 components 不要直接取得 state，先用 getters 去處理資料邏輯，再回傳資料。</p>
<p>Mutations:<br>🔸 唯一改變 state 的方法<br>🔸 只能做同步操作，mutations 不能做非同步操作<br>🔸 mutations 需用 commit 呼叫</p>
<p>Actions:<br>🔸 actions 觸發 mutations，commit 會發送事件給 mutations<br>🔸 actions 才做非同步操作<br>🔸 需用 dispatch 呼叫<br>🔸 不能更改 state</p>
<p>流程: components ➜ dispatch ➜ <code>actions</code> ➜ commit ➜ <code>mutations</code> ➜ <code>state</code> ➜ <code>getters</code> ➜ components</p>
<h2 id="Vuex-範例"><a href="#Vuex-範例" class="headerlink" title="Vuex 範例"></a>Vuex 範例</h2><p>側邊選單收合</p>
<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MenuBtn <span class="keyword">from</span> <span class="string">&quot;../src/components/MenuBtn.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> MenuSlid <span class="keyword">from</span> <span class="string">&quot;../src/components/MenuSlid.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MenuBtn,</span><br><span class="line">    MenuSlid,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MenuBtn</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MenuSlid</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft JhengHei&quot;</span>, <span class="string">&quot;Heiti TC&quot;</span>, <span class="string">&quot;sans-serif&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &gt; .content &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    <span class="selector-tag">height</span>: 100%;</span><br><span class="line">    <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(&quot;<span class="selector-tag">https</span>://<span class="selector-tag">source</span><span class="selector-class">.unsplash</span><span class="selector-class">.com</span>/<span class="selector-tag">WLUHO9A_xik</span>/1600<span class="selector-tag">x900</span>&quot;);</span><br><span class="line">    <span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span>;</span><br><span class="line">    <span class="selector-tag">background-position</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line">    <span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br><span class="line">    <span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    isOpen: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// actions觸發mutations，commit會發送事件給mutations</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">handMenuOpen</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// context.state等於store的state</span></span><br><span class="line">      <span class="keyword">const</span> openBool = !context.state.isOpen;</span><br><span class="line">      <span class="comment">// 傳入openBool參數給mutations</span></span><br><span class="line">      context.commit(<span class="string">&#x27;handOpenState&#x27;</span>, openBool);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 只有mutations可以修改state</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 接收actions給的參數openBool，再去改變state的值</span></span><br><span class="line">    <span class="function"><span class="title">handOpenState</span>(<span class="params">state, openBool</span>)</span> &#123;</span><br><span class="line">      state.isOpen = openBool;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 類似computed重組資料，不要直接取得state，先用getters去處理資料邏輯，再回傳資料</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="function"><span class="title">isOpen</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.isOpen;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<br>

<p>MenuSlid.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>; <span class="comment">// 所有跟vuex有關的內容</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line">    <span class="comment">// 用computed取得isOpen資料，不要把整個store return出來</span></span><br><span class="line">    <span class="keyword">const</span> isOpen = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> store.getters.isOpen</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> handClickMenu = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(<span class="string">&#x27;handMenuOpen&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; handClickMenu, isOpen &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;menu&#x27;, &#123;open: isOpen&#125; ]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;closeBtn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handClickMenu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-times fa-3x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>abous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>content<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>user<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>address<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>
MenuBtn.vue

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = useStore();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line">    <span class="comment">// 用dispatch觸發一個事件到actions</span></span><br><span class="line">    <span class="keyword">const</span> handClickMenu = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.dispatch(<span class="string">&#x27;handMenuOpen&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; handClickMenu &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;menuBtn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handClickMenu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bars fa-3x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.menuBtn</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<h1 id="Vuex-結構拆分"><a href="#Vuex-結構拆分" class="headerlink" title="Vuex 結構拆分"></a>Vuex 結構拆分</h1><p>當 Vuex 內容越來越多時，可以拆分檔案，比較好管理</p>
<p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">&#x27;./state.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">&#x27;./actions.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&#x27;./mutations.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state, actions, mutations, getters</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>store/state.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  isOpen: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>store/getters.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">isOpen</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.isOpen;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>store/mutations.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">handOpenState</span>(<span class="params">state, openBool</span>)</span> &#123;</span><br><span class="line">    state.isOpen = openBool;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>store/actions.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">handMenuOpen</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> openBool = !context.state.isOpen;</span><br><span class="line">    context.commit(<span class="string">&#x27;handOpenState&#x27;</span>, openBool);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Vuex-modules"><a href="#Vuex-modules" class="headerlink" title="Vuex modules"></a>Vuex modules</h1><p>module可以依照功能來區分資料<br>設定namespaced在不同的modules可以有一樣的名稱，依照modules名稱做判斷</p>
<p>store/Auth/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    token: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">handSetToken</span>(<span class="params">context, token</span>)</span> &#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;setToken&#x27;</span>, token);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">setToken</span>(<span class="params">state, token</span>)</span> &#123;</span><br><span class="line">      state.token = token;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="function"><span class="title">getToken</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.token;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>App.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 因為設定namespaced，前面要加modules名稱Auth/</span></span><br><span class="line">      store.dispatch(<span class="string">&#x27;Auth/handSetToken&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(store.getters[<span class="string">&#x27;Auth/getToken&#x27;</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3基本操作-1</title>
    <url>/2021/03/02/vue3-base1/</url>
    <content><![CDATA[<h1 id="vue-js-的起手式"><a href="#vue-js-的起手式" class="headerlink" title="vue.js 的起手式"></a>vue.js 的起手式</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handAddInt&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> handAddInt = <span class="function">() =&gt;</span> msg.value++;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 變數回傳到模版</span></span><br><span class="line">      msg,</span><br><span class="line">      handAddInt,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">Vue.createApp(App).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>以往 VUE2 使用 new Vue 創建實體，VUE3 使用 createApp 來創建應用程式(App)的實體，並掛載到 DOM 上<br>setup() 放入所有跟 vue.js 相關的操作內容<br>return 放入要回傳到 HTML 的資料<br>透過 ref 讓資料做綁定，ref 需要透過.value 存取資料</p>
<h1 id="ref-amp-reactive"><a href="#ref-amp-reactive" class="headerlink" title="ref &amp; reactive"></a>ref &amp; reactive</h1><h2 id="選擇-ref-還是-reactive"><a href="#選擇-ref-還是-reactive" class="headerlink" title="選擇 ref 還是 reactive"></a>選擇 ref 還是 reactive</h2><p>在大多數情況下兩者可以互相替換使用，主要取決於個人喜好或者團隊習慣，根據具體情況去決定要使用哪個就好</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message.text&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = ref(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> message = reactive(&#123; <span class="attr">text</span>: <span class="string">&quot;hello&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg,</span><br><span class="line">      message,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="ref"><a href="#ref" class="headerlink" title="ref()"></a>ref()</h2><p>可以接受任何型態的資料，但是不會對物件或陣列內部的屬性變動做監聽，需要透過<code>.value</code>存取資料。</p>
<h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive()"></a>reactive()</h2><p>只能接受物件或陣列，可以做深層的監聽，以及訪問資料不需要<code>.value</code></p>
<hr>
<h1 id="v-model-資料雙向綁定"><a href="#v-model-資料雙向綁定" class="headerlink" title="v-model 資料雙向綁定"></a>v-model 資料雙向綁定</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message.text&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message.text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = ref(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> message = reactive(&#123; <span class="attr">text</span>: <span class="string">&quot;hello&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg,</span><br><span class="line">      message,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="v-on-Event-事件綁定"><a href="#v-on-Event-事件綁定" class="headerlink" title="v-on:Event 事件綁定"></a>v-on:Event 事件綁定</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reduceCount&quot;</span>&gt;</span>Reduce<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      count.value++;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> reduceCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      count.value--;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      addCount,</span><br><span class="line">      reduceCount,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h1><p>readonly  就是讓你的  ref  或是  reactive  的資料只可以讀取不可以被修改<br>非常適合用在參數傳遞的時候避免不小心被修改資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, readonly &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> copyCount = readonly(count);</span><br><span class="line">    <span class="keyword">const</span> addCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      copyCount.value++;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> reduceCount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      copyCount.value--;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      addCount,</span><br><span class="line">      reduceCount,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>點擊按鈕時 copyCount 無法被修改</p>
<hr>
<h1 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, idx) in dogs&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span>&#123;&#123;idx+1&#125;&#125;-&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dogs = reactive([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;蝴蝶犬&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;柴犬&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;博美犬&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;哈士奇&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;法國鬥牛犬&quot;</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      dogs,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="KEY"><a href="#KEY" class="headerlink" title="KEY"></a>KEY</h2><p>為了不要重複渲染，v-for 必須加上 key，修改資料時就不會全部的 DOM 一起修改<br>使用 v-for 時一定要給 key<br>使用 v-for 時不要拿索引當 key<br>使用唯一的值當 key 的值</p>
<hr>
<h1 id="v-if-與-v-show"><a href="#v-if-與-v-show" class="headerlink" title="v-if 與 v-show"></a>v-if 與 v-show</h1><p>顯示、隱藏 DOM 元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handDomShow&quot;</span>&gt;</span>show text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isShow = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">const</span> text = ref(<span class="string">&quot;hello VUE!&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> handDomShow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isShow.value = !isShow.value;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShow,</span><br><span class="line">      text,</span><br><span class="line">      handDomShow,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>直接將 DOM 從頁面上移除跟加入<br>v-if 可以減少渲染速度的效能<br>可用於權限或一開始就不該出現的區塊<br>如果是 DOM 元素切換的功能，消耗的資源比較高，建議用 v-show</p>
<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>透過 CSS 的 display : none; 跟 display : block; 來顯示關閉<br>v-show 可以提升切換速度效能<br>適合做 tab 切換的功能</p>
<hr>
<h1 id="v-bind-attribute-屬性綁定"><a href="#v-bind-attribute-屬性綁定" class="headerlink" title="v-bind:attribute 屬性綁定"></a>v-bind:attribute 屬性綁定</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;(list, idx) in listArr&quot;</span><br><span class="line">    v-bind:class=&quot;list.status&quot;</span><br><span class="line">    v-bind:key=&quot;list.name&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123;idx + 1&#125;&#125;. &#123;&#123;list.name&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; reactive &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> listArr = reactive([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;蝴蝶犬&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;red&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;柴犬&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;blue&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;博美犬&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;red&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;哈士奇&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;red&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;法國鬥牛犬&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;blue&quot;</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      listArr,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如要綁定兩個以上的 class 可寫成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;[&#x27;box&#x27;, &#123;open: isOpen&#125;]&quot;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>以上是我的學習筆記，希望也有幫助到你哦 😀<br></p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>ref</tag>
        <tag>reactive</tag>
        <tag>v-model</tag>
        <tag>v-on</tag>
        <tag>readonly</tag>
        <tag>v-for</tag>
        <tag>v-show</tag>
        <tag>v-if</tag>
        <tag>v-bind</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3基本操作-2</title>
    <url>/2021/03/04/vue3-base2/</url>
    <content><![CDATA[<h1 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h1><h2 id="範例-1-自動長出-menu-高度"><a href="#範例-1-自動長出-menu-高度" class="headerlink" title="範例 1: 自動長出 menu 高度"></a>範例 1: 自動長出 menu 高度</h2><p>計算屬性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;HandListShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>菜單<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: toggleH&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(list, idx) in listArr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;list&quot;</span>&gt;</span>&#123;&#123;list.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, computed &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isOpen = ref(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> listArr = reactive([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;蛋糕&quot;</span>, <span class="attr">money</span>: <span class="number">3200</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;紅茶拿鐵&quot;</span>, <span class="attr">money</span>: <span class="number">100</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;義大利麵&quot;</span>, <span class="attr">money</span>: <span class="number">500</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;玉米濃湯&quot;</span>, <span class="attr">money</span>: <span class="number">300</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;海鮮燉飯&quot;</span>, <span class="attr">money</span>: <span class="number">1600</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;夏威夷披薩&quot;</span>, <span class="attr">money</span>: <span class="number">900</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;牛肉麵&quot;</span>, <span class="attr">money</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;法國麵包&quot;</span>, <span class="attr">money</span>: <span class="number">1800</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> HandListShow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isOpen.value = !isOpen.value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> toggleH = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> isOpen.value ? <span class="string">`<span class="subst">$&#123;listArr.length * <span class="number">40</span>&#125;</span>px`</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isOpen,</span><br><span class="line">      listArr,</span><br><span class="line">      HandListShow,</span><br><span class="line">      toggleH,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Computed-跟-Methods"><a href="#Computed-跟-Methods" class="headerlink" title="Computed 跟 Methods"></a>Computed 跟 Methods</h3><p><strong>computed</strong></p>
<p>會依據計算的資料<strong>進行緩存</strong>，只要你的資料沒有重新被更改，你的 computed 不會被重新計算執行，如不須傳入參數，建議都使用 computed 計算</p>
<p><strong>methods</strong></p>
<p>雖可以達到一樣的效果，但 methods<strong>不會進行緩存</strong>，每次都會重新執行 ，可以<strong>傳入參數</strong>進行處理</p>
<h2 id="範例-2-計算資料"><a href="#範例-2-計算資料" class="headerlink" title="範例 2: 計算資料"></a>範例 2: 計算資料</h2><p>利用 computed 取得資料</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;HandListShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>菜單<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: toggleH&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(list, idx) in newMenu&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;list.menu&quot;</span>&gt;</span>&#123;&#123;list.menu&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, computed &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isOpen = ref(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> listArr = reactive([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;蛋糕&quot;</span>, <span class="attr">money</span>: <span class="number">3200</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;紅茶拿鐵&quot;</span>, <span class="attr">money</span>: <span class="number">100</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;義大利麵&quot;</span>, <span class="attr">money</span>: <span class="number">500</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;玉米濃湯&quot;</span>, <span class="attr">money</span>: <span class="number">300</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;海鮮燉飯&quot;</span>, <span class="attr">money</span>: <span class="number">1600</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;夏威夷披薩&quot;</span>, <span class="attr">money</span>: <span class="number">900</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;牛肉麵&quot;</span>, <span class="attr">money</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;法國麵包&quot;</span>, <span class="attr">money</span>: <span class="number">1800</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> HandListShow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isOpen.value = !isOpen.value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> toggleH = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> isOpen.value ? <span class="string">`<span class="subst">$&#123;listArr.length * <span class="number">40</span>&#125;</span>px`</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newMenu = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> map = listArr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">menu</span>: <span class="string">`<span class="subst">$&#123;item.name&#125;</span>, $: <span class="subst">$&#123;item.money&#125;</span>`</span> &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> map;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isOpen,</span><br><span class="line">      newMenu,</span><br><span class="line">      HandListShow,</span><br><span class="line">      toggleH,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="範例三-資料篩選-Data-Filter"><a href="#範例三-資料篩選-Data-Filter" class="headerlink" title="範例三: 資料篩選 Data Filter"></a>範例三: 資料篩選 Data Filter</h2><p>v-for 跟 v-if 官方不推薦一起使用，會有優先順序的問題，v-if 會先執行，v-for 的值會變 undefined<br>正確的做法應該要先透過 computed 把資料篩選出來後再進行 v-for<br>只要被 computed 重新包裝過後，須使用<code>.value</code>取得資料</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;HandListShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>課程列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: BoxHeight&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(list, idx) in filterData&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;list.money&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;idx + 1&#125;&#125;. &#123;&#123;list.name&#125;&#125; =&gt; $&#123;&#123;list.money&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, computed &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isOpen = ref(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> listArr = reactive([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;蛋糕&quot;</span>, <span class="attr">money</span>: <span class="number">3200</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;紅茶拿鐵&quot;</span>, <span class="attr">money</span>: <span class="number">100</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;義大利麵&quot;</span>, <span class="attr">money</span>: <span class="number">500</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;玉米濃湯&quot;</span>, <span class="attr">money</span>: <span class="number">300</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;海鮮燉飯&quot;</span>, <span class="attr">money</span>: <span class="number">1600</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;夏威夷披薩&quot;</span>, <span class="attr">money</span>: <span class="number">900</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;牛肉麵&quot;</span>, <span class="attr">money</span>: <span class="number">2000</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;法國麵包&quot;</span>, <span class="attr">money</span>: <span class="number">1800</span> &#125;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> filterData = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> filter = listArr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.money &gt; <span class="number">500</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(filter);</span><br><span class="line">      <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> BoxHeight = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 被 computed 重新包裝過後，須使用`.value`取得資料</span></span><br><span class="line">      <span class="keyword">return</span> isOpen.value ? <span class="string">`<span class="subst">$&#123;filterData.value.length * <span class="number">40</span>&#125;</span>px`</span> : <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> HandListShow = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isOpen.value = !isOpen.value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isOpen,</span><br><span class="line">      filterData,</span><br><span class="line">      HandListShow,</span><br><span class="line">      BoxHeight,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h1><p>資料監控<br>可帶入兩個參數，如資料被改變會自動執行 callback</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch(要監控的資料, <span class="function">(<span class="params">新資料, 舊資料</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="監控-ref"><a href="#監控-ref" class="headerlink" title="監控 ref"></a>監控 ref</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> idx = ref(<span class="number">0</span>);</span><br><span class="line">    watch(idx, <span class="function">(<span class="params">newIdx, oldIdx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;newIdx:&quot;</span>, newIdx, <span class="string">&quot;oldIdx:&quot;</span>, oldIdx);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      idx.value++;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="監控-reactive"><a href="#監控-reactive" class="headerlink" title="監控 reactive"></a>監控 reactive</h2><p>watch 監控的值為 getter，只能被讀取的值，需透過函式回傳 reactive 的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = reactive(&#123; <span class="attr">idx</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; data.idx, <span class="comment">// watch監控的值為getter，只能被讀取的值</span></span><br><span class="line">      (newIdx, oldIdx) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;newIdx:&quot;</span>, newIdx, <span class="string">&quot;oldIdx:&quot;</span>, oldIdx);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      data.idx++;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="監控整個-Array-或-object"><a href="#監控整個-Array-或-object" class="headerlink" title="監控整個 Array 或 object"></a>監控整個 Array 或 object</h2><p>ref 不能監控整個物件的變動，只能監控單一值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> refObj = ref(&#123; <span class="attr">idx</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> reactiveObj = reactive(&#123; <span class="attr">idx</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    watch(refObj, <span class="function">(<span class="params">newIdx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;ref&quot;</span>, refObj);</span><br><span class="line">    &#125;);</span><br><span class="line">    watch(reactiveObj, <span class="function">(<span class="params">newIdx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;reactiveObj&quot;</span>, reactiveObj);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      refObj.value.idx++;</span><br><span class="line">      reactiveObj.idx++;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; refObj, reactiveObj &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如需使用 ref 做深層監控，可以使用 <strong>deep</strong>，但非常耗效能，不建議使用，建議監控單一值就好</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watch &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = ref(&#123; <span class="attr">user</span>: &#123;&#125; &#125;);</span><br><span class="line"></span><br><span class="line">    watch(</span><br><span class="line">      data,</span><br><span class="line">      (newVal) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newVal);</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      data.value.user[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;波比&quot;</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h1><p>不須傳入要監控的值，值在還沒變動時就會開始監控<br>有寫進 watchEffect 的資料都會被讀取，即使是沒有改變的值也會再被 show 出來</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watchEffect &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> numData = reactive(&#123; <span class="attr">idx</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num.value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      num.value++;</span><br><span class="line">      numData.idx++;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="停止-watchEffect-的監控"><a href="#停止-watchEffect-的監控" class="headerlink" title="停止 watchEffect 的監控"></a>停止 watchEffect 的監控</h2><p>給 watchEffect 自定義一個變數，並執行，將會停止 watchEffect</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref, reactive, watchEffect &#125; = Vue;</span><br><span class="line"><span class="keyword">const</span> App = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> num = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> numData = reactive(&#123; <span class="attr">idx</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> stop = watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(num.value);</span><br><span class="line">      <span class="keyword">if</span> (num.value &gt;= <span class="number">4</span>) &#123;</span><br><span class="line">        stop(); <span class="comment">// 停止watchEffect</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(timer); <span class="comment">// watchEffect關閉後不會停止setTimeout，需要再clearInterval</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      num.value++;</span><br><span class="line">      numData.idx++;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p>如果這篇筆記有幫助，麻煩請幫我按五下 Liker，給我一點鼓勵唷！按讚是免錢滴 😀</p>
]]></content>
      <categories>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
        <tag>javascript</tag>
        <tag>VueJs</tag>
        <tag>computed</tag>
        <tag>watch</tag>
        <tag>watchEffect</tag>
      </tags>
  </entry>
  <entry>
    <title>認識 HTTP Header</title>
    <url>/2022/01/02/web-http-header/</url>
    <content><![CDATA[<p><img src="https://imgur.com/w3Kil1b.png" alt="HTTP HEADER"></p>
<p>上次被後端問了關於 Header 的問題，發現我對這 HTTP 的知識薄弱，實在慚愧🥺，馬上上網科普一下，<br>好在找到了<a href="https://www.youtube.com/watch?v=qTpw9EKEeqk">偷米騎巴哥</a>大大分享的直播影片，以下是從影片內容裡整理的資料，筆記記錄一下</p>
<a id="more"></a>

<p>HTTP 是通訊協定，電腦與電腦溝通的語言</p>
<h1 id="前端為何要了解-HTTP"><a href="#前端為何要了解-HTTP" class="headerlink" title="前端為何要了解 HTTP"></a>前端為何要了解 HTTP</h1><p>🔸 前端經常需要與後端合作<br>🔸 釐清責任歸屬<br>🔸 了解瀏覽器運作原理</p>
<br />

<h1 id="什麼是-HTTP-Header"><a href="#什麼是-HTTP-Header" class="headerlink" title="什麼是 HTTP Header"></a>什麼是 HTTP Header</h1><p>🔸 傳送內容以外的資訊<br>內容是什麼格式? 內容有多大? 內容多久後過期?…等等<br>內容為 HTML、圖片、字型、CSS、JavaScript、JSON…等等</p>
<p>🔸 Header 一定在內容前面</p>
<p>🔸 細分 Genaral Header、Request/Response Header、Entity Header</p>
<br />

<h1 id="如何將資料傳送到對方電腦"><a href="#如何將資料傳送到對方電腦" class="headerlink" title="如何將資料傳送到對方電腦"></a>如何將資料傳送到對方電腦</h1><p>TCP/IP 協定(Transmission Control Protocol / Internet Protocol)<br>網際網路協議套組，是一個網路通訊模型，以及一整個網路傳輸協定家族，為網際網路的基礎通訊架構。</p>
<p>TCP/IP 包含了四種表現層，常被視為是簡化的七層OSI模型</p>
<p><img src="https://media.slid.es/uploads/275963/images/4907985/osi_tcpip.jpg" alt="TCP/IP"></p>
<br />
資料傳遞的過程中，每一層都會有一個 header，傳送後，會再一層一層慢慢拆解 header
<br /><br />

<p><img src="https://media.slid.es/uploads/275963/images/4907983/0913wtdosipromo.gif" alt="傳遞資料"></p>
<p>TCP：會切割封包，接收時確認是不是資料都有收到<br>IP：確認資料封包要送去哪個 IP 位址，電腦和網路設備不認得網址只認得 IP<br>DNS Server：把網址轉換成 IP 位址</p>
<p>瀏覽器會傳網址給 DNS 伺服器，透過 DNS 轉成 IP 回來，再用 TCP/IP 傳送 IP，找到伺服器，再傳遞 Response 回來<br><img src="https://imgur.com/OAteH8R.png" alt="傳遞資料"></p>
<br />

<h1 id="HTTP-Header-種類"><a href="#HTTP-Header-種類" class="headerlink" title="HTTP Header 種類"></a>HTTP Header 種類</h1><p>🔸 Request Header 客戶端要求伺服器時傳送<br>🔸 Response Header 伺服器回應客戶端時傳送<br>有發送請求，就必會有回應 (只要伺服器正常運作)</p>
<br />

<h1 id="常見的-Request-Header"><a href="#常見的-Request-Header" class="headerlink" title="常見的 Request Header"></a>常見的 Request Header</h1><p>🔸 Host<br>瀏覽器存取的Host名稱，因為一個IP可以綁訂多個不同Domain，此時就需要Host知道要對應到哪個伺服器</p>
<p>🔸 User-Agent<br>瀏覽器名稱和版本&amp;作業系統名稱和版本</p>
<p>🔸 Accept<br>瀏覽器接受的類型，ex: text/plain、text/html</p>
<p>🔸 Accept-Language<br>瀏覽器接受的語言，q值表示語言優先的權重</p>
<p>🔸 Accept-Encoding<br>瀏覽器支援的壓縮格式，大部分流覽器都支援gzip壓縮，伺服器則會壓縮內容後傳給瀏覽器，節省下載時間和頻寬</p>
<p>🔸 Date<br>傳送瀏覽器時間給伺服器，讓伺服器知道瀏覽器目前的時間</p>
<p>🔸 Expect<br>要求伺服器回應特定結果，期望可以給想要的結果，但最終還是由伺服器決定，ex: 100-continue</p>
<p>🔸 If-Modified-Since<br>瀏覽器cache檔案，下一次request則會發送此header，伺服器使用這個時間來判斷是否修改過檔案，沒有則會回傳304<br>If-Modified-Since (時間)<br>If-None-Match (Hash Code)</p>
<p>🔸 Cookie<br>把瀏覽器的cookie傳給伺服器，每一個request都會包含cookie</p>
<p>🔸 Referer<br>瀏覽器前一個瀏覽頁面的網址，可用此header判斷request的來源，但是不可靠，因為可能被遭到串改<br>(原應為referrer因為拼錯了只好將錯就錯)</p>
<p>🔸 Connection<br>可以設定Keep-Alive保持連線時間，減少重新連接TCP連線次數，提高傳輸效率</p>
<p>🔸 Content-Type<br>指傳送內容的格式，常見格式為：<br>表單: application/x-www-form-urlencoded<br>檔案上傳: multipart/form-data; boundary=–xxx<br>純文字內容: text/plain</p>
<p>🔸 Authorization<br>HTTP 連線的身分驗證(帳號、密碼)</p>
<p>🔸 Upgrade<br>升級到另外一個協定，ex: websocket</p>
<br />

<h1 id="常見的-Response-Header"><a href="#常見的-Response-Header" class="headerlink" title="常見的 Response Header"></a>常見的 Response Header</h1><p>🔸 Etag<br>產生檔案的Hash Code給瀏覽器，下一次瀏覽器可以傳送If-None-Match給伺服器判斷是否有修改過檔案，沒有則回傳304並且不會包含content</p>
<p>🔸 Last-Modified<br>回傳檔案最後修改的時間，下一次瀏覽器可以傳送If-Modified-Since給伺服器判斷是否有修改過檔案，沒有則回傳304並且不會包含content</p>
<p>🔸 Catch-Control<br>快取檔案的策略，max-age 則表示該檔案有效的cache秒數，no-cache 則表示不使用快取</p>
<p>🔸 Content-Type<br>回傳content的mime類型，當content-type設為text/html和text/plain可同時設定charset文字編碼格式，若無content-type瀏覽器自動判斷</p>
<p>🔸 Content-Disposition<br>讓瀏覽器可以打開下載視窗並且指定檔案名稱，例如：Content-Disposition: attachment; filename=”download.zip”</p>
<p>🔸 Content-length<br>取得下載傳送內容的大小，讓瀏覽器可以判斷下載的進度</p>
<p>🔸 Date<br>傳送伺服器時間給瀏覽器，讓瀏覽器知道伺服器目前的時間</p>
<p>🔸 Location<br>當狀態碼為301或302時，瀏覽器則會重新導向到Location這個位置</p>
<p>🔸 Set-Cookie<br>設定瀏覽器的cookie，當瀏覽器收到此header則會建立cookie在瀏覽器中</p>
<p>🔸 Content-Encoding<br>回傳內容的壓縮格式，讓瀏覽器知道該如何解壓縮內容</p>
<p>🔸 Access-Control-Allow-Origin<br>准許跨網域存取的Domain，全部網域使用*字號表示<br>script和link標籤不再此限</p>
<p>🔸 X-Frame-Options<br>否能夠在 frame、iframe 以及 object 載入，網站可以利用 X-Frame-Options 來確保本身內容不會遭惡意嵌入道其他網站、避免 clickjacking 攻擊<br>SAMEORIGIN 只限相同域名，跨域無法載入</p>
<p>🔸 Upgrade<br>確認升級到新的協定，此時connection也會同時回應Upgrade<br>ex: Connection: Upgrade<br>Upgrade: websocket</p>
<br />

<h1 id="WebSocket-雙向溝通"><a href="#WebSocket-雙向溝通" class="headerlink" title="WebSocket (雙向溝通)"></a>WebSocket (雙向溝通)</h1><p>🔸 Header 傳送 Upgrade: websocket<br>🔸 伺服器回應 101 切換協定<br>🔸 建立一個保持連線的狀態，連線會更即時、更快速<br>🔸 建立雙向的通道，可任意的作資料傳遞<br>🔸 即不需要送一個 request 即回一個 response，可一直丟<br>🔸 伺服器能承受的連線數量要很高，通常會作 load balance</p>
<hr>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://www.youtube.com/watch?v=qTpw9EKEeqk">偷米騎巴哥HTTP header &amp; Status code</a><br><a href="https://ithelp.ithome.com.tw/articles/10212102">HTTP Header &amp; Status Code 心得</a></p>
<hr>
]]></content>
      <categories>
        <category>網頁程式技術探討</category>
      </categories>
      <tags>
        <tag>HTTP Header</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS 和 HTTP 的差別？</title>
    <url>/2021/08/07/web-https/</url>
    <content><![CDATA[<p><img src="https://imgur.com/aJkfXyD.jpg" alt="Imgur"><br>我們在拜訪網站時，你有沒有看過這個畫面呢?<br>這是瀏覽器針對 HTTP 網址，對使用者發出的「不安全」提示，藉此來要求網站開發者盡快將網站轉為透過 HTTPS 傳輸資料</p>
<a id="more"></a>

<h1 id="HTTP-和-HTTPS-有什麼差別"><a href="#HTTP-和-HTTPS-有什麼差別" class="headerlink" title="HTTP 和 HTTPS 有什麼差別?"></a>HTTP 和 HTTPS 有什麼差別?</h1><p>兩者差了一個 S，這個 S 代表網站使用編碼協定的安全性(Secure)，HTTPS 跟 HTTP 之間的不同在於網路文字傳送協定中標準的不同</p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>超文本傳輸協定 (Hyper Text Transfer Protocol)<br>HTTP 是以 TCP 作為網路資料傳輸的方式，因為內容只規範了客戶端請求與伺服器回應的標準，在傳輸資料的過程中，因為沒有完善的安全機制，容易被惡意程式竊取，造成資料外洩。</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>超文本傳輸安全協定 (Hyper Text Transfer Protocol Secure)<br>加入 <a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A">SSL/TLS</a> 協定作為安全憑證，以保密為前提為研發，可以算是 HTTP 的進階安全版，多了一道加密的手續，如此一來就算有心人士要竊取，看到的也只是加密符號或一堆亂碼而已。<br>由於加密需要運算的資料較多，導致傳遞回應較慢，後來才又發明金鑰功能，讓網路資料在進行傳輸時兼顧了安全性及傳遞速度。</p>
<br>

<h1 id="HTTPS-對-SEO-的重要性"><a href="#HTTPS-對-SEO-的重要性" class="headerlink" title="HTTPS 對 SEO 的重要性"></a>HTTPS 對 SEO 的重要性</h1><p>你可能會想說，我的網站不需要輸入帳密，也不用輸入信用卡之類的個人資料，只是純瀏覽的網頁<br>.<br>..<br>…<br><img src="https://imgur.com/GFL68vJ.jpg" alt="Imgur"><br>…<br>..<br>.<br>NONONO！這對網站會造成影響的啊！！！<br>由於安全性的考量，現今的瀏覽器會針對 HTTP 網頁特別標註為<code>不安全</code>的網站，當使用者拜訪時跳出這個訊息，有可能就隨即關閉，因此都不利於 SEO 的排名，連瀏覽器的網址列上，也會有個 icon 表示目前網站是 HTTP 或 HTTPS(加密)。</p>
<div style="text-align: center;">HTTP：</div>

<p><img src="https://imgur.com/JD476Gk.jpg" alt="HTTP"></p>
<br>

<div style="text-align: center;">HTTPS：</div>

<p><img src="https://imgur.com/Ov9ZxRp.jpg" alt="HTTPS"></p>
<br>
<br>

<p>因此，HTTPS 的網站的搜尋排名，通常都比 HTTP 網站的排名來得高。<br>基於安全性和 SEO 優化的考量，這也是為什麼現在大多數的網站都是 HTTPS 的原因。</p>
<hr>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://www.nss.com.tw/why-https-is-important-than-http/">為什麼 HTTPS 比 HTTP 重要？一次帶你了解兩者的差異和重要性</a><br><a href="https://buzzorange.com/techorange/2018/05/11/https-seo/">HTTP 和 HTTPS：差了一個「S」，攸關的可是你家網站 SEO 排名順序！</a></p>
<hr>
]]></content>
      <categories>
        <category>網頁程式技術探討</category>
      </categories>
      <tags>
        <tag>HTTPS</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP 狀態碼</title>
    <url>/2021/08/07/web-http-status-code/</url>
    <content><![CDATA[<p><img src="https://imgur.com/8GHhzql.jpg" alt="Imgur"></p>
<h1 id="什麼是-HTTP-狀態碼-HTTP-Status-Codes"><a href="#什麼是-HTTP-狀態碼-HTTP-Status-Codes" class="headerlink" title="什麼是 HTTP 狀態碼(HTTP Status Codes)?"></a>什麼是 HTTP 狀態碼(HTTP Status Codes)?</h1><p>HTTP 狀態碼是伺服器對瀏覽器請求回應(HTTP Response)的狀態，由 RFC 2616 規範定義的，並得到 RFC 2518、RFC 2817、RFC 2295、RFC 2774 與 RFC 4918 等規範擴充。伺服器用一個三位數的代碼來回應瀏覽器的請求，狀態的分類可區分三個層級，第一個數字為大類、第二個數字為中類、第三個數字為小類。</p>
<a id="more"></a>

<p>了解狀態代碼以及如何使用它們將有助於快速診斷網站錯誤</p>
<h2 id="HTTP-狀態碼大致分成-5-類"><a href="#HTTP-狀態碼大致分成-5-類" class="headerlink" title="HTTP 狀態碼大致分成 5 類"></a>HTTP 狀態碼大致分成 5 類</h2><p>1xx Informationa - 參考資訊<br>2xx Successful - 成功<br>3xx Redirection - 重新導向<br>4xx Client Error - 用戶端錯誤<br>5xx Server Error - 伺服器錯誤</p>
<h3 id="1xx-Informational-參考資訊"><a href="#1xx-Informational-參考資訊" class="headerlink" title="1xx Informational 參考資訊"></a>1xx Informational 參考資訊</h3><p>這些狀態碼代表請求已被接受，需要繼續處理，這類回應是臨時回應，所以在接收一般的回應之前，用戶端應準備接收一個或多個 1xx 的回應，等待伺服器採取進一步行動。</p>
<p>100 Continue - 繼續執行所發出的請求<br>101 Switching Protocols - 切換通訊協定</p>
<h3 id="2xx-Successful-成功"><a href="#2xx-Successful-成功" class="headerlink" title="2xx Successful 成功"></a>2xx Successful 成功</h3><p>這類的狀態碼表示伺服器成功接收到用戶端的要求、理解並接受。</p>
<p>200 OK - 確定。用戶端要求成功<br>201 Created - 請求已經被實現<br>202 Accepted - 伺服器已接受請求，但尚未處理<br>203 Non-Authoritative Information - 非授權資訊<br>204 No Content - 無內容，伺服器成功處理了請求，沒有返回任何內容<br>205 Reset Content - 重設內容，伺服器成功處理了請求，但沒有返回任何內容。與 204 回應不同，此回應要求請求者重設文件視圖<br>206 Partial Content - 伺服器已經成功處理了部分 GET 請求<br>207 Multi-Status - 代表之後的訊息體將是一個 XML 訊息，並且可能依照之前子請求數量的不同，包含一系列獨立的回應代碼<br>208 Already Reported - DAV 繫結的成員已經在（多狀態）回應之前的部分被列舉，且未被再次包含<br>226 IM Used - 伺服器已經滿足了對資源的請求，對實體請求的一個或多個實體操作的結果表示</p>
<h3 id="3xx-Redirection-重新導向"><a href="#3xx-Redirection-重新導向" class="headerlink" title="3xx Redirection 重新導向"></a>3xx Redirection 重新導向</h3><p>用戶端瀏覽器必須採取進一步的操作才能完成要求。這些狀態碼用來重新導向，例如瀏覽器可能必須重新發出 HTTP Request 要求伺服器上的不同頁面。客戶端應當自動監測無限迴圈重新導向（例如：A→B→C→……→A 或 A→A），因為這會導致伺服器和客戶端大量不必要的資源消耗。按照 HTTP/1.0 版規範的建議，瀏覽器不應自動存取超過 5 次的重新導向。</p>
<p>300 Multiple Choices - 被請求的資源有一系列可供選擇的回饋資訊，每個都有自己特定的位址和瀏覽器驅動的商議資訊。使用者或瀏覽器能夠自行選擇一個首選的位址進行重新導向<br>301 Moved Permanently - 要求的網頁已經永久改變網址。此狀態要求用戶端未來在連結此網址時應該導向至指定的 URI<br>302 Found - 要求客戶端執行臨時重新導向<br>303 See Other - 通知用戶端使用 GET 連到另一個 URI 去查看<br>304 Not Modified - 未修改。用戶端要求該網頁時，其內容並沒有變更<br>305 Use Proxy - 要求的網頁必須透過 Server 指定的 proxy 才能查看(需透過 Location 標頭)<br>306 Switch Proxy - 在最新版的規範中，306 狀態碼已經不再被使用。最初是指「後續請求應使用指定的代理」<br>307 Temporary Redirect - 在這種情況下，請求應該與另一個 URI 重複，但後續的請求應仍使用原始的 URI。 與 302 相反，當重新發出原始請求時，不允許更改請求方法。 例如，應該使用另一個 POST 請求來重複 POST 請求</p>
<h3 id="4xx-Client-Error-用戶端錯誤"><a href="#4xx-Client-Error-用戶端錯誤" class="headerlink" title="4xx Client Error 用戶端錯誤"></a>4xx Client Error 用戶端錯誤</h3><p>這代表錯誤發生，且這錯誤的發生的原因跟「用戶端」有關，妨礙了伺服器的處理。例如：用戶端可能連結到不存在的頁面、用戶端的權限不足、或可能未提供有效的驗證資訊(輸入的帳號、密碼錯誤)。</p>
<p>400 Bad Request - 錯誤的要求<br>401 Unauthorized - 拒絕存取<br>402 Payment Required - 該狀態碼是為了將來可能的需求而預留的。該狀態碼最初的意圖可能被用作某種形式的數字現金或線上支付方案的一部分，但幾乎沒有哪家服務商使用，而且這個狀態碼通常不被使用<br>403 Forbidden - 伺服器已經理解請求，但是拒絕執行它<br>404 Not Found - 找不到，請求失敗，請求所希望得到的資源未被在伺服器上發現，但允許使用者的後續請求<br>405 Method Not Allowed - 用來存取這個頁面的 HTTP 動詞不受允許 (方法不受允許)<br>406 Not Acceptable - 用戶端瀏覽器不接受要求頁面的 MIME 類型<br>407 Proxy Authentication Required - 需要 Proxy 驗證<br>408 Request Timeout - 請求逾時<br>409 Conflict - 資源狀態衝突<br>410 Gone - 資源已不存在且無轉址資訊<br>411 Length Required - 要求的 Content-Length 沒有定義<br>412 Precondition Failed - 指定條件失敗<br>413 Request Entity Too Large - 要求的實體太大<br>414 Request-URI Too Long - 要求 URI 太長。會因伺服器或瀏覽器而異，建議 2048 字元以下比較保險<br>415 Unsupported Media Type - 不支援的媒體類型<br>416 Requested Range Not Satisfiable - 無法滿足要求的範圍<br>417 Expectation Failed - 執行失敗</p>
<h3 id="5xx-Server-Error-伺服器錯誤"><a href="#5xx-Server-Error-伺服器錯誤" class="headerlink" title="5xx Server Error 伺服器錯誤"></a>5xx Server Error 伺服器錯誤</h3><p>這代表錯誤發生，且這錯誤發生的原因跟「伺服器」有關。伺服器因為發生錯誤或例外狀況(Exception)而無法完成要求(Request)時，就會回應 5xx 的錯誤，且這肯定跟伺服器有關。</p>
<p>500 Internal Server Error - 內部伺服器錯誤。<br>501 Not Implemented – 標頭值指定未實作的設定。<br>502 Bad Gateway - Web 伺服器在作為閘道或 Proxy 時收到無效的回應。<br>503 Service Unavailable - 服務無法使用。 這是 IIS 6.0 專用的錯誤碼。<br>504 Gateway Timeout - 閘道逾時。<br>505 HTTP Version Not Supported - 不支援的 HTTP 版本。</p>
<hr>
<h3 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻:"></a>參考文獻:</h3><p><a href="https://blog.poychang.net/http-status-code/">HTTP 狀態碼一覽表</a><br><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP 狀態碼</a></p>
<hr>
]]></content>
      <categories>
        <category>網頁程式技術探討</category>
      </categories>
      <tags>
        <tag>HTTP 狀態碼</tag>
        <tag>HTTP Status Codes</tag>
      </tags>
  </entry>
</search>
